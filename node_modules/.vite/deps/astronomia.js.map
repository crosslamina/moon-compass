{
  "version": 3,
  "sources": ["../../astronomia/src/base.js", "../../astronomia/src/interpolation.js", "../../astronomia/src/angle.js", "../../astronomia/src/sexagesimal.js", "../../astronomia/src/globe.js", "../../astronomia/src/coord.js", "../../astronomia/src/nutation.js", "../../astronomia/src/elementequinox.js", "../../astronomia/src/precess.js", "../../astronomia/src/planetposition.js", "../../astronomia/src/solar.js", "../../astronomia/src/apparent.js", "../../astronomia/src/apsis.js", "../../astronomia/src/binary.js", "../../astronomia/src/conjunction.js", "../../astronomia/src/circle.js", "../../astronomia/data/deltat.js", "../../astronomia/src/deltat.js", "../../astronomia/src/iterate.js", "../../astronomia/src/kepler.js", "../../astronomia/src/solarxyz.js", "../../astronomia/src/elliptic.js", "../../astronomia/src/moonphase.js", "../../astronomia/src/eclipse.js", "../../astronomia/src/elp.js", "../../astronomia/src/eqtime.js", "../../astronomia/src/fit.js", "../../astronomia/src/illum.js", "../../astronomia/src/julian.js", "../../astronomia/src/jm.js", "../../astronomia/src/jupiter.js", "../../astronomia/src/planetelements.js", "../../astronomia/src/jupitermoons.js", "../../astronomia/src/line.js", "../../astronomia/src/nearparabolic.js", "../../astronomia/src/node.js", "../../astronomia/src/mars.js", "../../astronomia/src/moonposition.js", "../../astronomia/src/moon.js", "../../astronomia/src/moonillum.js", "../../astronomia/src/moonmaxdec.js", "../../astronomia/src/moonnode.js", "../../astronomia/src/parabolic.js", "../../astronomia/src/sidereal.js", "../../astronomia/src/parallax.js", "../../astronomia/src/parallactic.js", "../../astronomia/src/perihelion.js", "../../astronomia/src/planetary.js", "../../astronomia/src/pluto.js", "../../astronomia/src/refraction.js", "../../astronomia/src/rise.js", "../../astronomia/src/saturnmoons.js", "../../astronomia/src/saturnring.js", "../../astronomia/src/solardisk.js", "../../astronomia/src/solstice.js", "../../astronomia/src/stellar.js", "../../astronomia/src/sundial.js", "../../astronomia/src/sunrise.js"],
  "sourcesContent": ["/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module base\n */\n/**\n * Base: Functions and other definitions useful with multiple packages.\n *\n * Base contains various definitions and support functions useful in multiple\n * chapters.\n *\n * Bessellian and Julian Year\n *\n * Chapter 21, Precession actually contains these definitions.  They are moved\n * here because of their general utility.\n *\n * Chapter 22, Nutation contains the function for Julian centuries since J2000.\n *\n * Phase angle functions\n *\n * Two functions, Illuminated and Limb, concern the illumnated phase of a body\n * and are given in two chapters, 41 an 48.  They are collected here because\n * the identical functions apply in both chapters.\n *\n * General purpose math functions\n *\n * SmallAngle is recommended in chapter 17, p. 109.\n *\n * PMod addresses the issue on p. 7, chapter 1, in the section \"Trigonometric\n * functions of large angles\", but the function is not written to be specific\n * to angles and so has more general utility.\n *\n * Horner is described on p. 10, chapter 1.\n *\n * FloorDiv and FloorDiv64 are optimizations for the INT function described\n * on p. 60, chapter 7.\n*/\n\n// ---- constants ----\n\n/** K is the Gaussian gravitational constant. */\nexport const K = 0.01720209895\n// K from ch 33, p. 228, for example\n\n/** AU is one astronomical unit in km. */\nexport const AU = 149597870\n// from Appendix I, p, 407.\n\n/** SOblJ2000 sine obliquity at J2000. */\nexport const SOblJ2000 = 0.397777156\n/** COblJ2000 cosine obliquity at J2000. */\nexport const COblJ2000 = 0.917482062\n// SOblJ2000, COblJ2000 from ch 33, p. 228, for example\n\n/**\n * lightTime returns time for light to travel a given distance.\n * `dist` is distance in to earth in AU. √(x² + y² + z²)\n * Result in seconds of time.\n * @param {Number} dist - distance in to earth in AU\n * @returns {Number} time for light to travel a given distance in seconds\n */\nexport function lightTime (dist) {\n  // Formula given as (33.3) p. 224.\n  return 0.0057755183 * dist\n}\n\n// ---- julian ----\n\n/**\n * Julian and Besselian years described in chapter 21, Precession.\n * T, Julian centuries since J2000 described in chapter 22, Nutation.\n */\n\n/** JMod is the Julian date of the modified Julian date epoch. */\nexport const JMod = 2400000.5\n\n/** J2000 is the Julian date corresponding to January 1.5, year 2000. */\nexport const J2000 = 2451545.0\n\n// Julian days of common epochs.\n// B1900, B1950 from p. 133\n/** Julian days of Julian epoch 1900 */\nexport const J1900 = 2415020.0\n/** Julian days of Besselian epoch 1900 */\nexport const B1900 = 2415020.3135\n/** Julian days of Besselian epoch 1950 */\nexport const B1950 = 2433282.4235\n\n// JulianYear and other common periods\n/** JulianYear in days */\nexport const JulianYear = 365.25 // days\n/** JulianCentury in days */\nexport const JulianCentury = 36525 // days\n/** BesselianYear in days; equals mean tropical year */\nexport const BesselianYear = 365.2421988 // days\n/** Mean sidereal year */\nexport const meanSiderealYear = 365.25636 // days\n\n/**\n * JulianYearToJDE returns the Julian ephemeris day for a Julian year.\n * @param {Number} jy - Julian year\n * @returns {Number} jde - Julian ephemeris day\n */\nexport function JulianYearToJDE (jy) {\n  return J2000 + JulianYear * (jy - 2000)\n}\n\n/**\n * JDEToJulianYear returns a Julian year for a Julian ephemeris day.\n * @param {Number} jde - Julian ephemeris day\n * @returns {Number} jy - Julian year\n */\nexport function JDEToJulianYear (jde) {\n  return 2000 + (jde - J2000) / JulianYear\n}\n\n/**\n * BesselianYearToJDE returns the Julian ephemeris day for a Besselian year.\n * @param {Number} by - Besselian year\n * @returns {Number} jde - Julian ephemeris day\n */\nexport function BesselianYearToJDE (by) {\n  return B1900 + BesselianYear * (by - 1900)\n}\n\n/**\n * JDEToBesselianYear returns the Besselian year for a Julian ephemeris day.\n * @param {Number} jde - Julian ephemeris day\n * @returns {Number} by - Besselian year\n */\nexport function JDEToBesselianYear (jde) {\n  return 1900 + (jde - B1900) / BesselianYear\n}\n\n/**\n * J2000Century returns the number of Julian centuries since J2000.\n *\n * The quantity appears as T in a number of time series.\n * @param {Number} jde - Julian ephemeris day\n * @returns {Number} number of Julian centuries since J2000\n */\nexport function J2000Century (jde) {\n  // The formula is given in a number of places in the book, for example\n  // (12.1) p. 87.\n  // (22.1) p. 143.\n  // (25.1) p. 163.\n  return (jde - J2000) / JulianCentury\n}\n\n// ---- phase ----\n\n/**\n * illuminated returns the illuminated fraction of a body's disk.\n *\n * The illuminated body can be the Moon or a planet.\n *\n * @param {Number} i - phase angle in radians.\n * @returns {Number} illuminated fraction of a body's disk.\n */\nexport function illuminated (i) {\n  // (41.1) p. 283, also (48.1) p. 345.\n  return (1 + Math.cos(i)) * 0.5\n}\n\n/**\n * celestial coordinates in right ascension and declination\n * or ecliptic coordinates in longitude and latitude\n */\nexport class Coord {\n  /**\n   * celestial coordinates in right ascension and declination\n   * or ecliptic coordinates in longitude and latitude\n   *\n   * @param {number} ra - right ascension (or longitude)\n   * @param {number} dec - declination (or latitude)\n   * @param {number} [range] - distance\n   * @param {number} [elongation] - elongation\n   */\n  constructor (ra, dec, range, elongation) {\n    this._ra = ra || 0\n    this._dec = dec || 0\n    this.range = range\n    this.elongation = elongation\n  }\n\n  /**\n   * right ascension\n   * @return {number}\n   */\n  get ra () {\n    return this._ra\n  }\n\n  set ra (ra) {\n    this._ra = ra\n  }\n\n  /**\n   * declination\n   * @return {number}\n   */\n  get dec () {\n    return this._dec\n  }\n\n  set dec (dec) {\n    this._dec = dec\n  }\n\n  /**\n   * right ascension (or longitude)\n   * @return {number}\n   */\n  get lon () {\n    return this._ra\n  }\n\n  set lon (ra) {\n    this._ra = ra\n  }\n\n  /**\n   * declination (or latitude)\n   * @return {number}\n   */\n  get lat () {\n    return this._dec\n  }\n\n  set lat (dec) {\n    this._dec = dec\n  }\n}\n\n/**\n * Limb returns the position angle of the midpoint of an illuminated limb.\n *\n * The illuminated body can be the Moon or a planet.\n *\n * @param {Coord} equ - equatorial coordinates of the body `{ra, dec}` (in radians)\n * @param {Coord} appSun - apparent coordinates of the Sun `{ra, dec}` (In radians).\n * @returns {Number} position angle of the midpoint (in radians).\n */\nexport function limb (equ, appSun) {\n  const α = equ.ra\n  const δ = equ.dec\n  const α0 = appSun.ra\n  const δ0 = appSun.dec\n  // Mentioned in ch 41, p. 283.  Formula (48.5) p. 346\n  const sδ = Math.sin(δ)\n  const cδ = Math.cos(δ)\n  const sδ0 = Math.sin(δ0)\n  const cδ0 = Math.cos(δ0)\n  const sα0α = Math.sin(α0 - α)\n  const cα0α = Math.cos(α0 - α)\n  let χ = Math.atan2(cδ0 * sα0α, (sδ0 * cδ - cδ0 * sδ * cα0α))\n  if (χ < 0) {\n    χ += 2 * Math.PI\n  }\n  return χ\n}\n\n// ---- math ----\n\n// In chapter 17, p. 109, Meeus recommends 10′.\n/**\n * SmallAngle is threshold used by various routines for switching between\n * trigonometric functions and Pythagorean approximations.\n */\nexport const SmallAngle = 10 * Math.PI / 180 / 60 // about .003 radians\n/** cosine of SmallAngle */\nexport const CosSmallAngle = Math.cos(SmallAngle) // about .999996\n\n/**\n * pmod returns a positive floating-point x mod y.\n *\n * For a positive argument y, it returns a value in the range [0,y).\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number} x % y - The result may not be useful if y is negative.\n */\nexport function pmod (x, y) {\n  let r = x % y\n  if (r < 0) {\n    r += y\n  }\n  return r\n}\n\n/**\n * horner evaluates a polynomal with coefficients c at x.  The constant\n * term is c[0].\n * @param {Number} x\n * @param {Number[]} c - coefficients; c[0] may be of type Number[]\n * @returns {Number}\n */\nexport function horner (x, ...c) {\n  if (Array.isArray(c[0])) {\n    c = c[0]\n  }\n  let i = c.length - 1\n  let y = c[i]\n  while (i > 0) {\n    i--\n    y = y * x + c[i]\n  }\n  return y\n}\n\n/**\n * FloorDiv returns the integer floor of the fractional value (x / y).\n * @param {Number} x\n * @param {Number} y\n * @returns {Number} (int)\n */\nexport function floorDiv (x, y) {\n  const q = x / y\n  return Math.floor(q)\n}\n\n/**\n * Cmp compares two float64s and returns -1, 0, or 1 if a is <, ==, or > b,\n * respectively.\n * .\n * @param {Number} a\n * @param {Number} b\n * @returns {Number} comparison result\n */\nexport function cmp (a, b) {\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/**\n * shorthand function for Math.sin, Math.cos\n * @param {Number} ε\n * @returns {Number[]} [sin(ε), cos(ε)]\n */\nexport function sincos (ε) {\n  return [Math.sin(ε), Math.cos(ε)]\n}\n\n/**\n * Convert degrees to radians\n * @param  {Number} deg - Angle in degrees\n * @return {Number} Angle in radians\n */\nexport function toRad (deg) {\n  return (Math.PI / 180.0) * deg\n}\n\n/**\n * Convert radians to degrees\n * @param  {Number} rad - Angle in radians\n * @return {Number} Angle in degrees\n */\nexport function toDeg (rad) {\n  return (180.0 / Math.PI) * rad\n}\n\n/**\n * separate fix `i` from fraction `f`\n * @param {Number} float\n * @returns {Array} [i, f]\n *  {Number} i - (int) fix value\n *  {Number} f - (float) fractional portion; always > 1\n */\nexport function modf (float) {\n  const i = Math.trunc(float)\n  const f = Math.abs(float - i)\n  return [i, f]\n}\n\n/**\n * Rounds `float` value by precision\n * @param {Number} float - value to round\n * @param {Number} [precision] - (int) number of post decimal positions\n * @return {Number} rounded `float`\n */\nexport function round (float, precision = 14) {\n  return parseFloat(float.toFixed(precision))\n}\n\nexport function errorCode (msg, code) {\n  const err = new Error(msg)\n  // @ts-ignore\n  err.code = code\n  return err\n}\n\nexport default {\n  K,\n  AU,\n  SOblJ2000,\n  COblJ2000,\n  lightTime,\n  JMod,\n  J2000,\n  J1900,\n  B1900,\n  B1950,\n  JulianYear,\n  JulianCentury,\n  BesselianYear,\n  meanSiderealYear,\n  JulianYearToJDE,\n  JDEToJulianYear,\n  BesselianYearToJDE,\n  JDEToBesselianYear,\n  J2000Century,\n  illuminated,\n  Coord,\n  limb,\n  SmallAngle,\n  CosSmallAngle,\n  pmod,\n  horner,\n  floorDiv,\n  cmp,\n  sincos,\n  toRad,\n  toDeg,\n  modf,\n  round,\n  errorCode\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module interpolation\n */\n/**\n * Interp: Chapter 3, Interpolation.\n *\n * Len3 and Len5 types\n *\n * These types allow interpolation from a table of equidistant x values\n * and corresponding y values.  Since the x values are equidistant,\n * only the first and last values are supplied as arguments to the\n * constructors.  The interior x values are implicit.  All y values must be\n * supplied however.  They are passed as a slice, and the length of y is fixed.\n * For Len3 it must be 3 and for (Len5 it must be 5.0\n *\n * For these Len3 and Len5 functions, Meeus notes the importance of choosing\n * the 3 or 5 rows of a larger table that will minimize the interpolating\n * factor n.  He does not provide algorithms for doing this however.\n *\n * For an example of a selection function, see len3ForInterpolateX. This\n * was useful for computing Delta T.\n */\nimport base from './base.js'\n\nconst int = Math.trunc\n\n/**\n * Error values returned by functions and methods in this package.\n * Defined here to help testing for specific errors.\n */\nexport const errorNot3 = new Error('Argument y must be length 3')\nexport const errorNot4 = new Error('Argument y must be length 4')\nexport const errorNot5 = new Error('Argument y must be length 5')\nexport const errorNoXRange = new Error('Argument x3 (or x5) cannot equal x1')\nexport const errorNOutOfRange = new Error('Interpolating factor n must be in range -1 to 1')\nexport const errorNoExtremum = new Error('No extremum in table')\nexport const errorExtremumOutside = new Error('Extremum falls outside of table')\nexport const errorZeroOutside = new Error('Zero falls outside of table')\nexport const errorNoConverge = new Error('Failure to converge')\n\n/**\n * Len3 allows second difference interpolation.\n */\nexport class Len3 {\n  /**\n   * NewLen3 prepares a Len3 object from a table of three rows of x and y values.\n   *\n   * X values must be equally spaced, so only the first and last are supplied.\n   * X1 must not equal to x3.  Y must be a slice of three y values.\n   *\n   * @throws Error\n   * @param {Number} x1 - is the x value corresponding to the first y value of the table.\n   * @param {Number} x3 - is the x value corresponding to the last y value of the table.\n   * @param {Number[]} y - is all y values in the table. y.length should be >= 3.0\n   */\n  constructor (x1, x3, y) {\n    if (y.length !== 3) {\n      throw errorNot3\n    }\n    if (x3 === x1) {\n      throw errorNoXRange\n    }\n    this.x1 = x1\n    this.x3 = x3\n    this.y = y\n    // differences. (3.1) p. 23\n    this.a = y[1] - y[0]\n    this.b = y[2] - y[1]\n    this.c = this.b - this.a\n    // other intermediate values\n    this.abSum = this.a + this.b\n    this.xSum = x3 + x1\n    this.xDiff = x3 - x1\n  }\n\n  /**\n   * InterpolateX interpolates for a given x value.\n   */\n  interpolateX (x) {\n    const n = (2 * x - this.xSum) / this.xDiff\n    return this.interpolateN(n)\n  }\n\n  /**\n   * InterpolateXStrict interpolates for a given x value,\n   * restricting x to the range x1 to x3 given to the constructor NewLen3.\n   */\n  interpolateXStrict (x) {\n    const n = (2 * x - this.xSum) / this.xDiff\n    const y = this.interpolateNStrict(n)\n    return y\n  }\n\n  /**\n   * InterpolateN interpolates for (a given interpolating factor n.\n   *\n   * This is interpolation formula (3.3)\n   *\n   * @param n - The interpolation factor n is x-x2 in units of the tabular x interval.\n   * (See Meeus p. 24.)\n   * @return {number} interpolation value\n   */\n  interpolateN (n) {\n    return this.y[1] + n * 0.5 * (this.abSum + n * this.c)\n  }\n\n  /**\n   * InterpolateNStrict interpolates for (a given interpolating factor n.\n   *\n   * @param {number} n - n is restricted to the range [-1..1] corresponding to the range x1 to x3\n   * given to the constructor of Len3.\n   * @return {number} interpolation value\n   */\n  interpolateNStrict (n) {\n    if (n < -1 || n > 1) {\n      throw errorNOutOfRange\n    }\n    return this.interpolateN(n)\n  }\n\n  /**\n   * Extremum returns the x and y values at the extremum.\n   *\n   * Results are restricted to the range of the table given to the constructor\n   * new Len3.\n   */\n  extremum () {\n    if (this.c === 0) {\n      throw errorNoExtremum\n    }\n    const n = this.abSum / (-2 * this.c) // (3.5), p. 25\n    if (n < -1 || n > 1) {\n      throw errorExtremumOutside\n    }\n    const x = 0.5 * (this.xSum + this.xDiff * n)\n    const y = this.y[1] - (this.abSum * this.abSum) / (8 * this.c) // (3.4), p. 25\n    return [x, y]\n  }\n\n  /**\n   * Len3Zero finds a zero of the quadratic function represented by the table.\n   *\n   * That is, it returns an x value that yields y=0.\n   *\n   * Argument strong switches between two strategies for the estimation step.\n   * when iterating to converge on the zero.\n   *\n   * Strong=false specifies a quick and dirty estimate that works well\n   * for gentle curves, but can work poorly or fail on more dramatic curves.\n   *\n   * Strong=true specifies a more sophisticated and thus somewhat more\n   * expensive estimate.  However, if the curve has quick changes, This estimate\n   * will converge more reliably and in fewer steps, making it a better choice.\n   *\n   * Results are restricted to the range of the table given to the constructor\n   * NewLen3.\n   */\n  zero (strong) {\n    let f\n    if (strong) {\n      // (3.7), p. 27\n      f = (n0) => {\n        return n0 - (2 * this.y[1] + n0 * (this.abSum + this.c * n0)) /\n        (this.abSum + 2 * this.c * n0)\n      }\n    } else {\n      // (3.6), p. 26\n      f = (n0) => {\n        return -2 * this.y[1] / (this.abSum + this.c * n0)\n      }\n    }\n    const [n0, ok] = iterate(0, f)\n    if (!ok) {\n      throw errorNoConverge\n    }\n    if (n0 > 1 || n0 < -1) {\n      throw errorZeroOutside\n    }\n    return 0.5 * (this.xSum + this.xDiff * n0) // success\n  }\n}\n\n/**\n * Len3ForInterpolateX is a special purpose Len3 constructor.\n *\n * Like NewLen3, it takes a table of x and y values, but it is not limited\n * to tables of 3 rows.  An X value is also passed that represents the\n * interpolation target x value.  Len3ForInterpolateX will locate the\n * appropriate three rows of the table for interpolating for x, and initialize\n * the Len3 object for those rows.\n *\n * @param {Number} x - is the target for interpolation\n * @param {Number} x1 - is the x value corresponding to the first y value of the table.\n * @param {Number} xN - is the x value corresponding to the last y value of the table.\n * @param {Number[]} y - is all y values in the table.  y.length should be >= 3.0\n * @returns {Len3} interpolation value\n */\nexport function len3ForInterpolateX (x, x1, xN, y) {\n  let y3 = y\n  if (y.length > 3) {\n    const interval = (xN - x1) / (y.length - 1)\n    if (interval === 0) {\n      throw errorNoXRange\n    }\n    let nearestX = int((x - x1) / interval + 0.5)\n    if (nearestX < 1) {\n      nearestX = 1\n    } else if (nearestX > y.length - 2) {\n      nearestX = y.length - 2\n    }\n    y3 = y.slice(nearestX - 1, nearestX + 2)\n    xN = x1 + (nearestX + 1) * interval\n    x1 = x1 + (nearestX - 1) * interval\n  }\n  return new Len3(x1, xN, y3)\n}\n\n/**\n * @private\n * @param {Number} n0\n * @param {Function} f\n * @returns {Array}\n *   {Number} n1\n *   {Boolean} ok - if `false` failure to converge\n */\nexport const iterate = function (n0, f) {\n  for (let limit = 0; limit < 50; limit++) {\n    const n1 = f(n0)\n    if (!isFinite(n1) || isNaN(n1)) {\n      break // failure to converge\n    }\n    if (Math.abs((n1 - n0) / n0) < 1e-15) {\n      return [n1, true] // success\n    }\n    n0 = n1\n  }\n  return [0, false] // failure to converge\n}\n\n/**\n * Len4Half interpolates a center value from a table of four rows.\n * @param {Number[]} y - 4 values\n * @returns {Number} interpolation result\n */\nexport function len4Half (y) {\n  if (y.length !== 4) {\n    throw errorNot4\n  }\n  // (3.12) p. 32\n  return (9 * (y[1] + y[2]) - y[0] - y[3]) / 16\n}\n\n/**\n * Len5 allows fourth Difference interpolation.\n */\nexport class Len5 {\n  /**\n   * NewLen5 prepares a Len5 object from a table of five rows of x and y values.\n   *\n   * X values must be equally spaced, so only the first and last are suppliethis.\n   * X1 must not equal x5.  Y must be a slice of five y values.\n   */\n  constructor (x1, x5, y) {\n    if (y.length !== 5) {\n      throw errorNot5\n    }\n    if (x5 === x1) {\n      throw errorNoXRange\n    }\n    this.x1 = x1\n    this.x5 = x5\n    this.y = y\n    this.y3 = y[2]\n    // differences\n    this.a = y[1] - y[0]\n    this.b = y[2] - y[1]\n    this.c = y[3] - y[2]\n    this.d = y[4] - y[3]\n\n    this.e = this.b - this.a\n    this.f = this.c - this.b\n    this.g = this.d - this.c\n\n    this.h = this.f - this.e\n    this.j = this.g - this.f\n\n    this.k = this.j - this.h\n    // other intermediate values\n    this.xSum = x5 + x1\n    this.xDiff = x5 - x1\n    this.interpCoeff = [ // (3.8) p. 28\n      this.y3,\n      (this.b + this.c) / 2 - (this.h + this.j) / 12,\n      this.f / 2 - this.k / 24,\n      (this.h + this.j) / 12,\n      this.k / 24\n    ]\n  }\n\n  /**\n   * InterpolateX interpolates for (a given x value.\n   */\n  interpolateX (x) {\n    const n = (4 * x - 2 * this.xSum) / this.xDiff\n    return this.interpolateN(n)\n  }\n\n  /**\n   * InterpolateXStrict interpolates for a given x value,\n   * restricting x to the range x1 to x5 given to the the constructor NewLen5.\n   */\n  interpolateXStrict (x) {\n    const n = (4 * x - 2 * this.xSum) / this.xDiff\n    const y = this.interpolateNStrict(n)\n    return y\n  }\n\n  /**\n   * InterpolateN interpolates for (a given interpolating factor n.\n   *\n   * The interpolation factor n is x-x3 in units of the tabular x interval.\n   * (See Meeus p. 28.)\n   */\n  interpolateN (n) {\n    return base.horner(n, ...this.interpCoeff)\n  }\n\n  /**\n   * InterpolateNStrict interpolates for (a given interpolating factor n.\n   *\n   * N is restricted to the range [-1..1].  This is only half the range given\n   * to the constructor NewLen5, but is the recommendation given on p. 31.0\n   */\n  interpolateNStrict (n) {\n    if (n < -1 || n > 1) {\n      throw errorNOutOfRange\n    }\n    return base.horner(n, ...this.interpCoeff)\n  }\n\n  /**\n   * Extremum returns the x and y values at the extremum.\n   *\n   * Results are restricted to the range of the table given to the constructor\n   * NewLen5.  (Meeus actually recommends restricting the range to one unit of\n   * the tabular interval, but that seems a little harsh.)\n   */\n  extremum () {\n    // (3.9) p. 29\n    const nCoeff = [\n      6 * (this.b + this.c) - this.h - this.j,\n      0,\n      3 * (this.h + this.j),\n      2 * this.k\n    ]\n    const den = this.k - 12 * this.f\n    if (den === 0) {\n      throw errorExtremumOutside\n    }\n    const [n0, ok] = iterate(0, function (n0) {\n      return base.horner(n0, ...nCoeff) / den\n    })\n    if (!ok) {\n      throw errorNoConverge\n    }\n    if (n0 < -2 || n0 > 2) {\n      throw errorExtremumOutside\n    }\n    const x = 0.5 * this.xSum + 0.25 * this.xDiff * n0\n    const y = base.horner(n0, ...this.interpCoeff)\n    return [x, y]\n  }\n\n  /**\n   * Len5Zero finds a zero of the quartic function represented by the table.\n   *\n   * That is, it returns an x value that yields y=0.\n   *\n   * Argument strong switches between two strategies for the estimation step.\n   * when iterating to converge on the zero.\n   *\n   * Strong=false specifies a quick and dirty estimate that works well\n   * for gentle curves, but can work poorly or fail on more dramatic curves.\n   *\n   * Strong=true specifies a more sophisticated and thus somewhat more\n   * expensive estimate.  However, if the curve has quick changes, This estimate\n   * will converge more reliably and in fewer steps, making it a better choice.\n   *\n   * Results are restricted to the range of the table given to the constructor\n   * NewLen5.\n   */\n  zero (strong) {\n    let f\n    if (strong) {\n      // (3.11), p. 29\n      const M = this.k / 24\n      const N = (this.h + this.j) / 12\n      const P = this.f / 2 - M\n      const Q = (this.b + this.c) / 2 - N\n      const numCoeff = [this.y3, Q, P, N, M]\n      const denCoeff = [Q, 2 * P, 3 * N, 4 * M]\n      f = function (n0) {\n        return n0 -\n          base.horner(n0, ...numCoeff) / base.horner(n0, ...denCoeff)\n      }\n    } else {\n      // (3.10), p. 29\n      const numCoeff = [\n        -24 * this.y3,\n        0,\n        this.k - 12 * this.f,\n        -2 * (this.h + this.j),\n        -this.k\n      ]\n      const den = 12 * (this.b + this.c) - 2 * (this.h + this.j)\n      f = function (n0) {\n        return base.horner(n0, ...numCoeff) / den\n      }\n    }\n    const [n0, ok] = iterate(0, f)\n    if (!ok) {\n      throw errorNoConverge\n    }\n    if (n0 > 2 || n0 < -2) {\n      throw errorZeroOutside\n    }\n    const x = 0.5 * this.xSum + 0.25 * this.xDiff * n0\n    return x\n  }\n}\n\n/**\n * Lagrange performs interpolation with unequally-spaced abscissae.\n *\n * Given a table of X and Y values, interpolate a new y value for argument x.\n *\n * X values in the table do not have to be equally spaced; they do not even\n * have to be in order. They must however, be distinct.\n *\n * @param {Number} x - x-value of interpolation\n * @param {Array} table - `[[x0, y0], ... [xN, yN]]` of x, y values\n * @returns {Number} interpolation result `y` of `x`\n */\nexport function lagrange (x, table) {\n  // method of BASIC program, p. 33.0\n  let sum = 0\n  table.forEach((ti, i) => {\n    const xi = ti[0]\n    let prod = 1.0\n    table.forEach((tj, j) => {\n      if (i !== j) {\n        const xj = tj[0]\n        prod *= (x - xj) / (xi - xj)\n      }\n    })\n    sum += ti[1] * prod\n  })\n  return sum\n}\n\n/**\n * LagrangePoly uses the formula of Lagrange to produce an interpolating\n * polynomial.\n *\n * X values in the table do not have to be equally spaced; they do not even\n * have to be in order.  They must however, be distinct.\n *\n * The returned polynomial will be of degree n-1 where n is the number of rows\n * in the table.  It can be evaluated for x using base.horner.\n *\n * @param {Array} table - `[[x0, y0], ... [xN, yN]]`\n * @returns {Array} - polynomial array\n */\nexport function lagrangePoly (table) {\n  // Method not fully described by Meeus, but needed for (numerical solution\n  // to Example 3.g.\n  const sum = new Array(table.length).fill(0)\n  const prod = new Array(table.length).fill(0)\n  const last = table.length - 1\n  for (let i = 0; i < table.length; i++) {\n    const xi = table[i][0] || table[i].x || 0\n    const yi = table[i][1] || table[i].y || 0\n    prod[last] = 1\n    let den = 1.0\n    let n = last\n    for (let j = 0; j < table.length; j++) {\n      if (i !== j) {\n        const xj = table[j][0] || table[j].x || 0\n        prod[n - 1] = prod[n] * -xj\n        for (let k = n; k < last; k++) {\n          prod[k] -= prod[k + 1] * xj\n        }\n        n--\n        den *= (xi - xj)\n      }\n    }\n    prod.forEach((pj, j) => {\n      sum[j] += yi * pj / den\n    })\n  }\n  return sum\n}\n\n/**\n * Linear Interpolation of x\n */\nexport function linear (x, x1, xN, y) {\n  const interval = (xN - x1) / (y.length - 1)\n  if (interval === 0) {\n    throw errorNoXRange\n  }\n  let nearestX = Math.floor((x - x1) / interval)\n  if (nearestX < 0) {\n    nearestX = 0\n  } else if (nearestX > y.length - 2) {\n    nearestX = y.length - 2\n  }\n  const y2 = y.slice(nearestX, nearestX + 2)\n  const x01 = x1 + nearestX * interval\n  return y2[0] + (y[1] - y[0]) * (x - x01) / interval\n}\n\nexport default {\n  errorNot3,\n  errorNot4,\n  errorNot5,\n  errorNoXRange,\n  errorNOutOfRange,\n  errorNoExtremum,\n  errorExtremumOutside,\n  errorZeroOutside,\n  errorNoConverge,\n  Len3,\n  len3ForInterpolateX,\n  iterate,\n  len4Half,\n  Len5,\n  lagrange,\n  lagrangePoly,\n  linear\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module angle\n */\n/**\n * Angle: Chapter 17: Angular Separation.\n *\n * Functions in this package are useful for Ecliptic, Equatorial, or any\n * similar coordinate frame.  To avoid suggestion of a particular frame,\n * function parameters are specified simply as \"r1, d1\" to correspond to a\n * right ascenscion, declination pair or to a longitude, latitude pair.\n *\n * In function Sep, Meeus recommends 10 arc min as a threshold.  This\n * value is in package base as base.SmallAngle because it has general utility.\n *\n * All angles are in radians.\n */\n\nimport base, { Coord } from './base.js' // eslint-disable-line no-unused-vars\nimport interp from './interpolation.js'\nconst { abs, acos, asin, atan2, cos, hypot, sin, sqrt, tan } = Math\n\n/**\n * `sep` returns the angular separation between two celestial bodies.\n *\n * The algorithm is numerically naïve, and while patched up a bit for\n * small separations, remains unstable for separations near π.\n *\n * @param {Coord} c1 - coordinate of celestial body 1\n * @param {Coord} c2 - coordinate of celestial body 2\n * @return {Number} angular separation between two celestial bodies\n */\nexport function sep (c1, c2) {\n  const [sind1, cosd1] = base.sincos(c1.dec)\n  const [sind2, cosd2] = base.sincos(c2.dec)\n  const cd = sind1 * sind2 + cosd1 * cosd2 * cos(c1.ra - c2.ra) // (17.1) p. 109\n  if (cd < base.CosSmallAngle) {\n    return acos(cd)\n  } else {\n    const cosd = cos((c2.dec + c1.dec) / 2) // average dec of two bodies\n    return hypot((c2.ra - c1.ra) * cosd, c2.dec - c1.dec) // (17.2) p. 109\n  }\n}\n\n/**\n * `minSep` returns the minimum separation between two moving objects.\n *\n * The motion is represented as an ephemeris of three rows, equally spaced\n * in time.  Jd1, jd3 are julian day times of the first and last rows.\n * R1, d1, r2, d2 are coordinates at the three times.  They must each be\n * slices of length 3.0\n *\n * Result is obtained by computing separation at each of the three times\n * and interpolating a minimum.  This may be invalid for sufficiently close\n * approaches.\n *\n * @throws Error\n * @param {Number} jd1 - Julian day - time at cs1[0], cs2[0]\n * @param {Number} jd3 - Julian day - time at cs1[2], cs2[2]\n * @param {Coord[]} cs1 - 3 coordinates of moving object 1\n * @param {Coord[]} cs2 - 3 coordinates of moving object 2\n * @param {function} [fnSep] - alternative `sep` function e.g. `angle.sepPauwels`, `angle.sepHav`\n * @return {Number} angular separation between two celestial bodies\n */\nexport function minSep (jd1, jd3, cs1, cs2, fnSep) {\n  fnSep = fnSep || sep\n  if (cs1.length !== 3 || cs2.length !== 3) {\n    throw interp.errorNot3\n  }\n  const y = new Array(3)\n  cs1.forEach((c, x) => {\n    y[x] = sep(cs1[x], cs2[x])\n  })\n  const d3 = new interp.Len3(jd1, jd3, y)\n  const dMin = d3.extremum()[1]\n  return dMin\n}\n\n/**\n * `minSepRect` returns the minimum separation between two moving objects.\n *\n * Like `minSep`, but using a method of rectangular coordinates that gives\n * accurate results even for close approaches.\n *\n * @throws Error\n * @param {Number} jd1 - Julian day - time at cs1[0], cs2[0]\n * @param {Number} jd3 - Julian day - time at cs1[2], cs2[2]\n * @param {Coord[]} cs1 - 3 coordinates of moving object 1\n * @param {Coord[]} cs2 - 3 coordinates of moving object 2\n * @return {Number} angular separation between two celestial bodies\n */\nexport function minSepRect (jd1, jd3, cs1, cs2) {\n  if (cs1.length !== 3 || cs2.length !== 3) {\n    throw interp.ErrorNot3\n  }\n  const uv = function (c1, c2) {\n    const [sind1, cosd1] = base.sincos(c1.dec)\n    const Δr = c2.ra - c1.ra\n    const tanΔr = tan(Δr)\n    const tanhΔr = tan(Δr / 2)\n    const K = 1 / (1 + sind1 * sind1 * tanΔr * tanhΔr)\n    const sinΔd = sin(c2.dec - c1.dec)\n    const u = -K * (1 - (sind1 / cosd1) * sinΔd) * cosd1 * tanΔr\n    const v = K * (sinΔd + sind1 * cosd1 * tanΔr * tanhΔr)\n    return [u, v]\n  }\n  const us = new Array(3).fill(0)\n  const vs = new Array(3).fill(0)\n  cs1.forEach((c, x) => {\n    [us[x], vs[x]] = uv(cs1[x], cs2[x])\n  })\n  const u3 = new interp.Len3(-1, 1, us) // if line throws then bug not caller's fault.\n  const v3 = new interp.Len3(-1, 1, vs) // if line throws then bug not caller's fault.\n  const up0 = (us[2] - us[0]) / 2\n  const vp0 = (vs[2] - vs[0]) / 2\n  const up1 = us[0] + us[2] - 2 * us[1]\n  const vp1 = vs[0] + vs[2] - 2 * vs[1]\n  const up = up0\n  const vp = vp0\n  let dn = -(us[1] * up + vs[1] * vp) / (up * up + vp * vp)\n  let n = dn\n  let u\n  let v\n  for (let limit = 0; limit < 10; limit++) {\n    u = u3.interpolateN(n)\n    v = v3.interpolateN(n)\n    if (abs(dn) < 1e-5) {\n      return hypot(u, v) // success\n    }\n    const up = up0 + n * up1\n    const vp = vp0 + n * vp1\n    dn = -(u * up + v * vp) / (up * up + vp * vp)\n    n += dn\n  }\n  throw new Error('minSepRect: failure to converge')\n}\n\n/**\n * haversine function (17.5) p. 115\n */\nexport function hav (a) {\n  return 0.5 * (1 - Math.cos(a))\n}\n\n/**\n * `sepHav` returns the angular separation between two celestial bodies.\n *\n * The algorithm uses the haversine function and is superior to the naïve\n * algorithm of the Sep function.\n *\n * @param {Coord} c1 - coordinate of celestial body 1\n * @param {Coord} c2 - coordinate of celestial body 2\n * @return {Number} angular separation between two celestial bodies\n */\nexport function sepHav (c1, c2) {\n  // using (17.5) p. 115\n  return 2 * asin(sqrt(hav(c2.dec - c1.dec) +\n    cos(c1.dec) * cos(c2.dec) * hav(c2.ra - c1.ra)))\n}\n\n/**\n * Same as `minSep` but uses function `sepHav` to return the minimum separation\n * between two moving objects.\n */\nexport function minSepHav (jd1, jd3, cs1, cs2) {\n  return minSep(jd1, jd3, cs1, cs2, sepHav)\n}\n\n/**\n * `sepPauwels` returns the angular separation between two celestial bodies.\n *\n * The algorithm is a numerically stable form of that used in `sep`.\n *\n * @param {Coord} c1 - coordinate of celestial body 1\n * @param {Coord} c2 - coordinate of celestial body 2\n * @return {Number} angular separation between two celestial bodies\n */\nexport function sepPauwels (c1, c2) {\n  const [sind1, cosd1] = base.sincos(c1.dec)\n  const [sind2, cosd2] = base.sincos(c2.dec)\n  const cosdr = cos(c2.ra - c1.ra)\n  const x = cosd1 * sind2 - sind1 * cosd2 * cosdr\n  const y = cosd2 * sin(c2.ra - c1.ra)\n  const z = sind1 * sind2 + cosd1 * cosd2 * cosdr\n  return atan2(hypot(x, y), z)\n}\n\n/**\n * Same as `minSep` but uses function `sepPauwels` to return the minimum\n * separation between two moving objects.\n */\nexport function minSepPauwels (jd1, jd3, cs1, cs2) {\n  return minSep(jd1, jd3, cs1, cs2, sepPauwels)\n}\n\n/**\n * RelativePosition returns the position angle of one body with respect to\n * another.\n *\n * The position angle result `p` is measured counter-clockwise from North.\n * If negative then `p` is in the range of 90° ... 270°\n *\n * ````\n *                  North\n *                    |\n *             (p)  ..|\n *                 .  |\n *                V   |\n *    c1 x------------x c2\n *                    |\n * ````\n *\n * @param {Coord} c1 - coordinate of celestial body 1\n * @param {Coord} c2 - coordinate of celestial body 2\n * @return {Number} position angle (p)\n */\nexport function relativePosition (c1, c2) {\n  const [sinΔr, cosΔr] = base.sincos(c1.ra - c2.ra)\n  const [sind2, cosd2] = base.sincos(c2.dec)\n  const p = atan2(sinΔr, cosd2 * tan(c1.dec) - sind2 * cosΔr)\n  return p\n}\n\nexport default {\n  sep,\n  minSep,\n  minSepRect,\n  hav,\n  sepHav,\n  minSepHav,\n  sepPauwels,\n  minSepPauwels,\n  relativePosition\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module sexagesimal\n */\n/**\n * Sexagesimal functions\n */\n\n/**\n * Angle represents a general purpose angle.\n * Unit is radians.\n */\nexport class Angle {\n  /**\n  * constructs a new Angle value from sign, degree, minute, and second\n  * components.\n  * @param {Number|Boolean} angleOrNeg - angle in radians or sign, true if negative (required to attribute -0°30')\n  * __Four arguments__\n  * @param {Number} [d] - (int) degree\n  * @param {Number} [m] - (int) minute\n  * @param {Number} [s] - (float) second\n  */\n  constructor (angleOrNeg, d, m, s) {\n    if (arguments.length === 1) {\n      this.angle = Number(angleOrNeg)\n    } else {\n      this.setDMS(!!angleOrNeg, d, m, s)\n    }\n  }\n\n  /**\n   * SetDMS sets the value of an FAngle from sign, degree, minute, and second\n   * components.\n   * The receiver is returned as a convenience.\n   * @param {Boolean} neg - sign, true if negative\n   * @param {Number} d - (int) degree\n   * @param {Number} m - (int) minute\n   * @param {Number} s - (float) second\n   * @returns {Angle}\n   */\n  setDMS (neg = false, d = 0, m = 0, s = 0.0) {\n    this.angle = (DMSToDeg(neg, d, m, s) * Math.PI / 180)\n    return this\n  }\n\n  /**\n   * sets angle\n   * @param {Number} angle - (float) angle in radians\n   * @returns {Angle}\n   */\n  setAngle (angle) {\n    this.angle = angle\n    return this\n  }\n\n  /**\n   * Rad returns the angle in radians.\n   * @returns {Number} angle in radians\n   */\n  rad () {\n    return this.angle\n  }\n\n  /**\n   * Deg returns the angle in degrees.\n   * @returns {Number} angle in degree\n   */\n  deg () {\n    return this.angle * 180 / Math.PI\n  }\n\n  /**\n   * toDMS converts to parsed sexagesimal angle component.\n   */\n  toDMS () {\n    return degToDMS(this.deg())\n  }\n\n  /**\n   * Print angle in degree using `d°m´s.ss″`\n   * @param {Number} [precision] - precision of `s.ss`\n   * @returns {String}\n   */\n  toString (precision) {\n    let [neg, d, m, s] = this.toDMS()\n    s = round(s, precision).toString().replace(/^0\\./, '.')\n    const str = (neg ? '-' : '') +\n      (d + '°') +\n      (m + '′') +\n      (s + '″')\n    return str\n  }\n\n  /**\n   * Print angle in degree using `d°.ff`\n   * @param {Number} [precision] - precision of `.ff`\n   * @returns {String}\n   */\n  toDegString (precision) {\n    let [i, s] = modf(this.deg())\n    s = round(s, precision).toString().replace(/^0\\./, '.')\n    const str = (i + '°') + s\n    return str\n  }\n}\n\n/**\n * HourAngle represents an angle corresponding to angular rotation of\n * the Earth in a specified time.\n *\n * Unit is radians.\n */\nexport class HourAngle extends Angle {\n  /**\n   * NewHourAngle constructs a new HourAngle value from sign, hour, minute,\n   * and second components.\n   * @param {Boolean} neg\n   * @param {Number} h - (int)\n   * @param {Number} m - (int)\n   * @param {Number} s - (float)\n   * @constructor\n   */\n\n  /**\n   * SetDMS sets the value of an FAngle from sign, degree, minute, and second\n   * components.\n   * The receiver is returned as a convenience.\n   * @param {Boolean} neg - sign, true if negative\n   * @param {Number} h - (int) hour\n   * @param {Number} m - (int) minute\n   * @param {Number} s - (float) second\n   * @returns {Angle}\n   */\n  setDMS (neg = false, h = 0, m = 0, s = 0.0) {\n    this.angle = (DMSToDeg(neg, h, m, s) * 15 * Math.PI / 180)\n    return this\n  }\n\n  /**\n   * Hour returns the hour angle as hours of time.\n   * @returns hour angle\n   */\n  hour () {\n    return this.angle * 12 / Math.PI // 12 = 180 / 15\n  }\n\n  deg () {\n    return this.hour()\n  }\n\n  /**\n   * Print angle in `HʰMᵐs.ssˢ`\n   * @param {Number} precision - precision of `s.ss`\n   * @returns {String}\n   */\n  toString (precision) {\n    let [neg, h, m, s] = this.toDMS()\n    s = round(s, precision).toString().replace(/^0\\./, '.')\n    const str = (neg ? '-' : '') +\n      (h + 'ʰ') +\n      (m + 'ᵐ') +\n      (s + 'ˢ')\n    return str\n  }\n}\n\n/**\n * DMSToDeg converts from parsed sexagesimal angle components to decimal\n * degrees.\n * @param {Boolean} neg - sign, true if negative\n * @param {Number} d - (int) degree\n * @param {Number} m - (int) minute\n * @param {Number} s - (float) second\n * @returns {Number} angle in degree\n */\nexport function DMSToDeg (neg, d, m, s) {\n  s = (((d * 60 + m) * 60) + s) / 3600\n  if (neg) {\n    return -s\n  }\n  return s\n}\n\n/**\n * DegToDMS converts from decimal degrees to parsed sexagesimal angle component.\n * @param {Number} deg - angle in degree\n * @returns {Array} [neg, d, m, s]\n *  {Boolean} neg - sign, true if negative\n *  {Number} d - (int) degree\n *  {Number} m - (int) minute\n *  {Number} s - (float) second\n */\nexport function degToDMS (deg) {\n  const neg = (deg < 0)\n  deg = Math.abs(deg)\n  let [d, s] = modf(deg % 360)\n  const [m, s1] = modf(s * 60)\n  s = round(s1 * 60) // may introduce an error < 1e13\n  return [neg, d, m, s]\n}\n\nexport class RA extends HourAngle {\n  /**\n   * constructs a new RA value from hour, minute, and second components.\n   * Negative values are not supported, RA wraps values larger than 24\n   * to the range [0,24) hours.\n   * @param {Number} h - (int) hour\n   * @param {Number} m - (int) minute\n   * @param {Number} s - (float) second\n   */\n  constructor (h = 0, m = 0, s = 0) {\n    super(false, h, m, s)\n    const args = [].slice.call(arguments)\n    if (args.length === 1) {\n      this.angle = h\n    } else {\n      const hr = DMSToDeg(false, h, m, s) % 24\n      this.angle = hr * 15 * Math.PI / 180\n    }\n  }\n\n  hour () {\n    const h = this.angle * 12 / Math.PI\n    return (24 + (h % 24)) % 24\n  }\n}\n\n/**\n * Time Angle\n * Unit is time in seconds.\n */\nexport class Time {\n  /**\n   * @param {boolean|number} negOrTimeInSecs - set `true` if negative; if type is number than time in seconds\n   * @param {number} [h] - (int) hour\n   * @param {number} [m] - (int) minute\n   * @param {number} [s] - (float) second\n   * @example\n   * new sexa.Time(SECS_OF_DAY)\n   * new sexa.Time(false, 15, 22, 7)\n   */\n  constructor (negOrTimeInSecs, h, m, s) {\n    if (typeof negOrTimeInSecs === 'number') {\n      this.time = negOrTimeInSecs\n    } else {\n      this.setHMS(negOrTimeInSecs, h, m, s)\n    }\n  }\n\n  setHMS (neg = false, h = 0, m = 0, s = 0) {\n    s += ((h * 60 + m) * 60)\n    if (neg) {\n      s = -s\n    }\n    this.time = s\n  }\n\n  /**\n   * @returns {Number} time in seconds.\n   */\n  sec () {\n    return this.time\n  }\n\n  /**\n   * @returns {Number} time in minutes.\n   */\n  min () {\n    return this.time / 60\n  }\n\n  /**\n   * @returns {Number} time in hours.\n   */\n  hour () {\n    return this.time / 3600\n  }\n\n  /**\n   * @returns {Number} time in days.\n   */\n  day () {\n    return this.time / 3600 / 24\n  }\n\n  /**\n   * @returns {Number} time in radians, where 1 day = 2 Pi radians.\n   */\n  rad () {\n    return this.time * Math.PI / 12 / 3600\n  }\n\n  /**\n   * convert time to HMS\n   * @returns {Array} [neg, h, m, s]\n   *  {Boolean} neg - sign, true if negative\n   *  {Number} h - (int) hour\n   *  {Number} m - (int) minute\n   *  {Number} s - (float) second\n   */\n  toHMS () {\n    let t = this.time\n    const neg = (t < 0)\n    t = (neg ? -t : t)\n    const h = Math.trunc(t / 3600)\n    t = t - (h * 3600)\n    const m = Math.trunc(t / 60)\n    const s = t - (m * 60)\n    return [neg, h, m, s]\n  }\n\n  /**\n   * Print time using `HʰMᵐsˢ.ss`\n   * @param {Number} precision - precision of `.ss`\n   * @returns {String}\n   */\n  toString (precision) {\n    const [neg, h, m, s] = this.toHMS()\n    let [si, sf] = modf(s)\n    if (precision === 0) {\n      si = round(s, 0)\n      sf = 0\n    } else {\n      sf = round(sf, precision).toString().substr(1)\n    }\n    const str = (neg ? '-' : '') +\n      (h + 'ʰ') +\n      (m + 'ᵐ') +\n      (si + 'ˢ') +\n      (sf || '')\n    return str\n  }\n}\n\n// units\nexport const angleFromDeg = (deg) => deg * Math.PI / 180\nexport const angleFromMin = (min) => min / 60 * Math.PI / 180\nexport const angleFromSec = (sec) => sec / 3600 * Math.PI / 180\nexport const degFromAngle = (angle) => angle * 180 / Math.PI\nexport const secFromAngle = (angle) => angle * 3600 * 180 / Math.PI\nexport const secFromHourAngle = (ha) => ha * 240 * 180 / Math.PI\n\n/**\n * separate fix `i` from fraction `f`\n * @private\n * @param {Number} float\n * @returns {Array} [i, f]\n *  {Number} i - (int) fix value\n *  {Number} f - (float) fractional portion; always > 1\n */\nfunction modf (float) {\n  const i = Math.trunc(float)\n  const f = Math.abs(float - i)\n  return [i, f]\n}\n\n/**\n * Rounds `float` value by precision\n * @private\n * @param {Number} float - value to round\n * @param {Number} [precision] - (int) number of post decimal positions\n * @return {Number} rounded `float`\n */\nfunction round (float, precision = 10) {\n  return parseFloat(float.toFixed(precision))\n}\n\nexport default {\n  Angle,\n  HourAngle,\n  DMSToDeg,\n  degToDMS,\n  RA,\n  Time,\n  angleFromDeg,\n  angleFromMin,\n  angleFromSec,\n  degFromAngle,\n  secFromAngle,\n  secFromHourAngle\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module globe\n */\n/**\n * Globe: Chapter 11, The Earth's Globe.\n *\n * Globe contains functions concerning the surface of the Earth idealized as\n * an ellipsoid of revolution.\n */\n\n/**\n * Ellipsoid represents an ellipsoid of revolution. */\nexport class Ellipsoid {\n  /**\n   * @param {number} radius - equatorial radius\n   * @param {number} flat - ellipsiod flattening\n   */\n  constructor (radius, flat) {\n    this.radius = radius\n    this.flat = flat\n  }\n\n  /** A is a common identifier for equatorial radius. */\n  A () {\n    return this.radius\n  }\n\n  /** B is a common identifier for polar radius. */\n  B () {\n    return this.radius * (1 - this.flat)\n  }\n\n  /** eccentricity of a meridian. */\n  eccentricity () {\n    return Math.sqrt((2 - this.flat) * this.flat)\n  }\n\n  /**\n   * parallaxConstants computes parallax constants ρ sin φ′ and ρ cos φ′.\n   *\n   * Arguments are geographic latitude φ in radians and height h\n   * in meters above the ellipsoid.\n   *\n   * @param {number} φ - geographic latitude in radians\n   * @param {number} h - height in meters above the ellipsoid\n   * @return {number[]} [ρ sin φ′, ρ cos φ] parallax constants [ρsφ, ρcφ]\n   */\n  parallaxConstants (φ, h) {\n    const boa = 1 - this.flat\n    const su = Math.sin(Math.atan(boa * Math.tan(φ)))\n    const cu = Math.cos(Math.atan(boa * Math.tan(φ)))\n    const s = Math.sin(φ)\n    const c = Math.cos(φ)\n    const hoa = h * 1e-3 / this.radius\n    // (s, c float)\n    const ρsφ = su * boa + hoa * s\n    const ρcφ = cu + hoa * c\n    return [ρsφ, ρcφ]\n  }\n\n  /**\n   * rho is distance from Earth center to a point on the ellipsoid.\n   *\n   * Result unit is fraction of the equatorial radius.\n   * @param {number} φ - geographic latitude in radians\n   * @returns {number} // TODO\n   */\n  rho (φ) {\n    // Magic numbers...\n    return 0.9983271 + 0.0016764 * Math.cos(2 * φ) - 0.0000035 * Math.cos(4 * φ)\n  }\n\n  /**\n   * radiusAtLatitude returns the radius of the circle that is the parallel of\n   * latitude at φ.\n   *\n   * Result unit is Km.\n   *\n   * @param {number} φ\n   * @return {number} radius in km\n   */\n  radiusAtLatitude (φ) {\n    const s = Math.sin(φ)\n    const c = Math.cos(φ)\n    return this.A() * c / Math.sqrt(1 - (2 - this.flat) * this.flat * s * s)\n  }\n\n  /**\n   * radiusOfCurvature of meridian at latitude φ.\n   *\n   * Result unit is Km.\n   *\n   * @param {number} φ\n   * @return {number} radius in km\n   */\n  radiusOfCurvature (φ) {\n    const s = Math.sin(φ)\n    const e2 = (2 - this.flat) * this.flat\n    return this.A() * (1 - e2) / Math.pow(1 - e2 * s * s, 1.5)\n  }\n\n  /**\n   * distance is distance between two points measured along the surface\n   * of an ellipsoid.\n   *\n   * Accuracy is much better than that of approxAngularDistance or\n   * approxLinearDistance.\n   *\n   * Result unit is Km.\n   *\n   * @param {Coord} c1\n   * @param {Coord} c2\n   * @return {number} radius in km\n   */\n  distance (c1, c2) {\n    // From AA, ch 11, p 84.\n    const [s2f, c2f] = sincos2((c1.lat + c2.lat) / 2)\n    const [s2g, c2g] = sincos2((c1.lat - c2.lat) / 2)\n    const [s2λ, c2λ] = sincos2((c1.lon - c2.lon) / 2)\n    const s = s2g * c2λ + c2f * s2λ\n    const c = c2g * c2λ + s2f * s2λ\n    const ω = Math.atan(Math.sqrt(s / c))\n    const r = Math.sqrt(s * c) / ω\n    const d = 2 * ω * this.radius\n    const h1 = (3 * r - 1) / (2 * c)\n    const h2 = (3 * r + 1) / (2 * s)\n    return d * (1 + this.flat * (h1 * s2f * c2g - h2 * c2f * s2g))\n  }\n}\n\n/** IAU 1976 values.  Radius in Km. */\nexport const Earth76 = new Ellipsoid(6378.14, 1 / 298.257)\n\n/**\n * RotationRate1996_5 is the rotational angular velocity of the Earth\n * with respect to the stars at the epoch 1996.5.\n *\n * Unit is radian/second.\n */\nexport const RotationRate1996_5 = 7.292114992e-5 // eslint-disable-line camelcase\n\n/**\n * oneDegreeOfLongitude returns the length of one degree of longitude.\n *\n * Argument `rp` is the radius in Km of a circle that is a parallel of latitude\n * (as returned by Ellipsoid.radiusAtLatitude.)\n * Result is distance in Km along one degree of the circle.\n *\n * @param {number} rp\n * @return {number} distance in Km\n */\nexport function oneDegreeOfLongitude (rp) {\n  return rp * Math.PI / 180\n}\n\n/**\n * oneDegreeOfLatitude returns the length of one degree of latitude.\n *\n * Argument `rm` is the radius in Km of curvature along a meridian.\n * (as returned by Ellipsoid.radiusOfCurvature.)\n * Result is distance in Km along one degree of the meridian.\n *\n * @param {number} rm\n * @return {number} distance in Km\n */\nexport function oneDegreeOfLatitude (rm) {\n  return rm * Math.PI / 180\n}\n\n/**\n * geocentricLatitudeDifference returns geographic latitude - geocentric\n * latitude (φ - φ′) with given geographic latitude (φ).\n *\n * Units are radians.\n * @param {number} φ\n * @returns {number} difference in Deg\n */\nexport function geocentricLatitudeDifference (φ) {\n  // This appears to be an approximation with hard coded magic numbers.\n  // No explanation is given in the text. The ellipsoid is not specified.\n  // Perhaps the approximation works well enough for all ellipsoids?\n  return (692.73 * Math.sin(2 * φ) - 1.16 * Math.sin(4 * φ)) * Math.PI / (180 * 3600)\n}\n\n/**\n * Coord represents geographic coordinates on the Earth.\n *\n * Longitude is measured positively westward from the Greenwich meridian.\n */\nexport class Coord {\n  /**\n   * @param {number} lat - latitude (φ) in radians\n   * @param {number} lon - longitude (ψ, or L) in radians (measured positively westward)\n   */\n  constructor (lat = 0, lon = 0) {\n    this.lat = lat\n    this.lon = lon\n  }\n}\n\n/**\n * approxAngularDistance returns the cosine of the angle between two points.\n *\n * The accuracy deteriorates at small angles.\n *\n * @param {Coord} p1 - Point 1\n * @param {Coord} p2 - Point 2\n * @returns {number} cosine `cos` of the angle between two points.\n * Use `d = Math.acos(cos)` to obtain geocentric angular distance in radians\n */\nexport function approxAngularDistance (p1, p2) {\n  const s1 = Math.sin(p1.lat)\n  const c1 = Math.cos(p1.lat)\n  const s2 = Math.sin(p2.lat)\n  const c2 = Math.cos(p2.lat)\n  return s1 * s2 + c1 * c2 * Math.cos(p1.lon - p2.lon)\n}\n\n/**\n * approxLinearDistance computes a distance across the surface of the Earth.\n *\n * Approximating the Earth as a sphere, the function takes a geocentric angular\n * distance in radians and returns the corresponding linear distance in Km.\n *\n * @param {number} d - geocentric angular distance in radians\n * @returns linear distance in Km\n */\nexport function approxLinearDistance (d) {\n  return 6371 * d\n}\n\n/**\n * @private\n */\nfunction sincos2 (x) {\n  const s = Math.sin(x)\n  const c = Math.cos(x)\n  return [s * s, c * c]\n}\n\nexport default {\n  Ellipsoid,\n  Earth76,\n  // eslint-disable-next-line camelcase\n  RotationRate1996_5,\n  oneDegreeOfLongitude,\n  oneDegreeOfLatitude,\n  geocentricLatitudeDifference,\n  Coord,\n  approxAngularDistance,\n  approxLinearDistance\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module coord\n */\n/**\n * Coord: Chapter 13, Transformation of Coordinates.\n *\n * Transforms in this package are provided in two forms, function and method.\n * The results of the two forms should be identical.\n *\n * The function forms pass all arguments and results as single values.  These\n * forms are best used when you are transforming a single pair of coordinates\n * and wish to avoid memory allocation.\n *\n * The method forms take and return pointers to structs.  These forms are best\n * used when you are transforming multiple coordinates and can reuse one or\n * more of the structs.  In this case reuse of structs will minimize\n * allocations, and the struct pointers will pass more efficiently on the\n * stack.  These methods transform their arguments, placing the result in\n * the receiver.  The receiver is then returned for convenience.\n *\n * A number of the functions take sine and cosine of the obliquity of the\n * ecliptic.  This becomes an advantage when you doing multiple transformations\n * with the same obliquity.  The efficiency of computing sine and cosine once\n * and reuse these values far outweighs the overhead of passing one number as\n * opposed to two.\n */\n\nimport base from './base.js'\nimport sexa from './sexagesimal.js'\nimport { Coord as GlobeCoord } from './globe.js' // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {object} LonLat\n * @property {Number} lon - Longitude (λ) in radians\n * @property {Number} lat - Latitude (β) in radians\n */\n\n/**\n* Ecliptic coordinates are referenced to the plane of the ecliptic.\n*/\nexport class Ecliptic {\n  /**\n   * IMPORTANT: Longitudes are measured *positively* westwards\n   * e.g. Washington D.C. +77°04; Vienna -16°23'\n   * @param {Number|LonLat} [lon] - Longitude (λ) in radians\n   * @param {Number} [lat] - Latitude (β) in radians\n   */\n  constructor (lon, lat) {\n    if (typeof lon === 'object') {\n      lat = lon.lat\n      lon = lon.lon\n    }\n    this.lon = lon || 0\n    this.lat = lat || 0\n  }\n\n  /**\n   * converts ecliptic coordinates to equatorial coordinates.\n   * @param {Number} ε - Obliquity\n   * @returns {Equatorial}\n   */\n  toEquatorial (ε) {\n    const [εsin, εcos] = base.sincos(ε)\n    const [sβ, cβ] = base.sincos(this.lat)\n    const [sλ, cλ] = base.sincos(this.lon)\n    let ra = Math.atan2(sλ * εcos - (sβ / cβ) * εsin, cλ) // (13.3) p. 93\n    if (ra < 0) {\n      ra += 2 * Math.PI\n    }\n    const dec = Math.asin(sβ * εcos + cβ * εsin * sλ) // (13.4) p. 93\n    return new Equatorial(ra, dec)\n  }\n}\n\n/**\n * Equatorial coordinates are referenced to the Earth's rotational axis.\n */\nexport class Equatorial {\n  /**\n   * @param {Number} ra - (float) Right ascension (α) in radians\n   * @param {Number} dec - (float) Declination (δ) in radians\n   */\n  constructor (ra = 0, dec = 0) {\n    this.ra = ra\n    this.dec = dec\n  }\n\n  /**\n   * EqToEcl converts equatorial coordinates to ecliptic coordinates.\n   * @param {Number} ε - Obliquity\n   * @returns {Ecliptic}\n   */\n  toEcliptic (ε) {\n    const [εsin, εcos] = base.sincos(ε)\n    const [sα, cα] = base.sincos(this.ra)\n    const [sδ, cδ] = base.sincos(this.dec)\n    const lon = Math.atan2(sα * εcos + (sδ / cδ) * εsin, cα) // (13.1) p. 93\n    const lat = Math.asin(sδ * εcos - cδ * εsin * sα) // (13.2) p. 93\n    return new Ecliptic(lon, lat)\n  }\n\n  /**\n   * EqToHz computes Horizontal coordinates from equatorial coordinates.\n   *\n   * Argument g is the location of the observer on the Earth.  Argument st\n   * is the sidereal time at Greenwich.\n   *\n   * Sidereal time must be consistent with the equatorial coordinates.\n   * If coordinates are apparent, sidereal time must be apparent as well.\n   *\n   * @param {GlobeCoord} g - coordinates of observer on Earth\n   * @param {Number} st - sidereal time at Greenwich at time of observation\n   * @returns {Horizontal}\n   */\n  toHorizontal (g, st) {\n    const H = new sexa.Time(st).rad() - g.lon - this.ra\n    const [sH, cH] = base.sincos(H)\n    const [sφ, cφ] = base.sincos(g.lat)\n    const [sδ, cδ] = base.sincos(this.dec)\n    const azimuth = Math.atan2(sH, cH * sφ - (sδ / cδ) * cφ) // (13.5) p. 93\n    const altitude = Math.asin(sφ * sδ + cφ * cδ * cH) // (13.6) p. 93\n    return new Horizontal(azimuth, altitude)\n  }\n\n  /**\n   * EqToGal converts equatorial coordinates to galactic coordinates.\n   *\n   * Equatorial coordinates must be referred to the standard equinox of B1950.0.\n   * For conversion to B1950, see package precess and utility functions in\n   * package \"common\".\n   *\n   * @returns {Galactic}\n   */\n  toGalactic () {\n    const [sdα, cdα] = base.sincos(galacticNorth1950.ra - this.ra)\n    const [sgδ, cgδ] = base.sincos(galacticNorth1950.dec)\n    const [sδ, cδ] = base.sincos(this.dec)\n    const x = Math.atan2(sdα, cdα * sgδ - (sδ / cδ) * cgδ) // (13.7) p. 94\n    // (galactic0Lon1950 + 1.5*math.Pi) = magic number of 303 deg\n    const lon = (galactic0Lon1950 + 1.5 * Math.PI - x) % (2 * Math.PI) // (13.8) p. 94\n    const lat = Math.asin(sδ * sgδ + cδ * cgδ * cdα)\n    return new Galactic(lon, lat)\n  }\n}\n\n/**\n * Horizontal coordinates are referenced to the local horizon of an observer\n * on the surface of the Earth.\n * @param {Number} az - Azimuth (A) in radians\n * @param {Number} alt - Altitude (h) in radians\n */\nexport class Horizontal {\n  constructor (az = 0, alt = 0) {\n    this.az = az\n    this.alt = alt\n  }\n\n  /**\n   * transforms horizontal coordinates to equatorial coordinates.\n   *\n   * Sidereal time must be consistent with the equatorial coordinates.\n   * If coordinates are apparent, sidereal time must be apparent as well.\n   * @param {GlobeCoord} g - coordinates of observer on Earth (lat, lon)\n   * @param {Number} st - sidereal time at Greenwich at time of observation.\n   * @returns {Equatorial} (right ascension, declination)\n   */\n  toEquatorial (g, st) {\n    const [sA, cA] = base.sincos(this.az)\n    const [sh, ch] = base.sincos(this.alt)\n    const [sφ, cφ] = base.sincos(g.lat)\n    const H = Math.atan2(sA, cA * sφ + sh / ch * cφ)\n    const ra = base.pmod(new sexa.Time(st).rad() - g.lon - H, 2 * Math.PI)\n    const dec = Math.asin(sφ * sh - cφ * ch * cA)\n    return new Equatorial(ra, dec)\n  }\n}\n\n/**\n * Galactic coordinates are referenced to the plane of the Milky Way.\n * @param {Number} lon - Longitude (l) in radians\n * @param {Number} lat - Latitude (b) in radians\n */\nexport class Galactic {\n  constructor (lon = 0, lat = 0) {\n    this.lon = lon\n    this.lat = lat\n  }\n\n  /**\n   * GalToEq converts galactic coordinates to equatorial coordinates.\n   *\n   * Resulting equatorial coordinates will be referred to the standard equinox of\n   * B1950.0.  For subsequent conversion to other epochs, see package precess and\n   * utility functions in package meeus.\n   *\n   * @returns {Equatorial} (right ascension, declination)\n   */\n  toEquatorial () {\n    // (-galactic0Lon1950 - math.Pi/2) = magic number of -123 deg\n    const [sdLon, cdLon] = base.sincos(this.lon - galactic0Lon1950 - Math.PI / 2)\n    const [sgδ, cgδ] = base.sincos(galacticNorth1950.dec)\n    const [sb, cb] = base.sincos(this.lat)\n    const y = Math.atan2(sdLon, cdLon * sgδ - (sb / cb) * cgδ)\n    // (galacticNorth1950.RA.Rad() - math.Pi) = magic number of 12.25 deg\n    const ra = base.pmod(y + galacticNorth1950.ra - Math.PI, 2 * Math.PI)\n    const dec = Math.asin(sb * sgδ + cb * cgδ * cdLon)\n    return new Equatorial(ra, dec)\n  }\n}\n\n/**\n* equatorial coords for galactic north\n* IAU B1950.0 coordinates of galactic North Pole\n*/\nexport const galacticNorth = new Equatorial(\n  new sexa.RA(12, 49, 0).rad(),\n  27.4 * Math.PI / 180\n)\nexport const galacticNorth1950 = galacticNorth\n\n/**\n* Galactic Longitude 0°\n* Meeus gives 33 as the origin of galactic longitudes relative to the\n* ascending node of of the galactic equator.  33 + 90 = 123, the IAU\n* value for origin relative to the equatorial pole.\n*/\nexport const galacticLon0 = 33 * Math.PI / 180\nexport const galactic0Lon1950 = galacticLon0\n\nexport default {\n  Ecliptic,\n  Equatorial,\n  Horizontal,\n  Galactic,\n  galacticNorth,\n  galacticNorth1950,\n  galacticLon0,\n  galactic0Lon1950\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module nutation\n */\n/**\n * Nutation: Chapter 22, Nutation and the Obliquity of the Ecliptic.\n */\n\nimport base from './base.js'\nimport sexa from './sexagesimal.js'\n\n// Nutation: Chapter 22, Nutation and the Obliquity of the Ecliptic.\n\n/**\n * Nutation returns nutation in longitude (Δψ) and nutation in obliquity (Δε)\n * for a given JDE.\n *\n * JDE = UT + ΔT, see package.\n *\n * Computation is by 1980 IAU theory, with terms < .0003″ neglected.\n *\n * Result units are radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @return {number[]} [Δψ, Δε] - [longitude, obliquity] in radians\n */\nexport function nutation (jde) {\n  const T = base.J2000Century(jde)\n  // Mean elongation of the Moon from the sun\n  const D = base.horner(T,\n    297.85036, 445267.11148, -0.0019142, 1.0 / 189474) * Math.PI / 180\n  // Mean anomaly of the Sun (Earth)\n  const M = base.horner(T,\n    357.52772, 35999.050340, -0.0001603, -1.0 / 300000) * Math.PI / 180\n  // Mean anomaly of the Moon\n  const N = base.horner(T,\n    134.96298, 477198.867398, 0.0086972, 1.0 / 56250) * Math.PI / 180\n  // Moon's argument of latitude\n  const F = base.horner(T,\n    93.27191, 483202.017538, -0.0036825, 1.0 / 327270) * Math.PI / 180\n  // Longitude of the ascending node of the Moon's mean orbit on the ecliptic, measured from mean equinox of date\n  const Ω = base.horner(T,\n    125.04452, -1934.136261, 0.0020708, 1.0 / 450000) * Math.PI / 180\n  let Δψ = 0\n  let Δε = 0\n  // sum in reverse order to accumulate smaller terms first\n  for (let i = table22A.length - 1; i >= 0; i--) {\n    const row = table22A[i]\n    const arg = row.d * D + row.m * M + row.n * N + row.f * F + row.ω * Ω\n    const [s, c] = base.sincos(arg)\n    Δψ += s * (row.s0 + row.s1 * T)\n    Δε += c * (row.c0 + row.c1 * T)\n  }\n  Δψ *= 0.0001 / 3600 * (Math.PI / 180)\n  Δε *= 0.0001 / 3600 * (Math.PI / 180)\n  return [Δψ, Δε] // (Δψ, Δε float)\n}\n/**\n * ApproxNutation returns a fast approximation of nutation in longitude (Δψ)\n * and nutation in obliquity (Δε) for a given JDE.\n *\n * Accuracy is 0.5″ in Δψ, 0.1″ in Δε.\n *\n * Result units are radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @return {number[]} [Δψ, Δε] - [longitude, obliquity] in radians\n */\nexport function approxNutation (jde) {\n  const T = (jde - base.J2000) / 36525\n  const Ω = (125.04452 - 1934.136261 * T) * Math.PI / 180\n  const L = (280.4665 + 36000.7698 * T) * Math.PI / 180\n  const N = (218.3165 + 481267.8813 * T) * Math.PI / 180\n  const [sΩ, cΩ] = base.sincos(Ω)\n  const [s2L, c2L] = base.sincos(2 * L)\n  const [s2N, c2N] = base.sincos(2 * N)\n  const [s2Ω, c2Ω] = base.sincos(2 * Ω)\n  const Δψ = (-17.2 * sΩ - 1.32 * s2L - 0.23 * s2N + 0.21 * s2Ω) / 3600 * (Math.PI / 180)\n  const Δε = (9.2 * cΩ + 0.57 * c2L + 0.1 * c2N - 0.09 * c2Ω) / 3600 * (Math.PI / 180)\n  return [Δψ, Δε] // (Δψ, Δε float)\n}\n\n/**\n * MeanObliquity returns mean obliquity (ε₀) following the IAU 1980\n * polynomial.\n *\n * Accuracy is 1″ over the range 1000 to 3000 years and 10″ over the range\n * 0 to 4000 years.\n *\n * Result unit is radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @return {number} mean obliquity (ε₀)\n */\nexport function meanObliquity (jde) {\n  // (22.2) p. 147\n  return base.horner(\n    base.J2000Century(jde),\n    new sexa.Angle(false, 23, 26, 21.448).rad(),\n    -46.815 / 3600 * (Math.PI / 180),\n    -0.00059 / 3600 * (Math.PI / 180),\n    0.001813 / 3600 * (Math.PI / 180)\n  )\n}\n\n/**\n * MeanObliquityLaskar returns mean obliquity (ε₀) following the Laskar\n * 1986 polynomial.\n *\n * Accuracy over the range 1000 to 3000 years is .01″.\n *\n * Accuracy over the valid date range of -8000 to +12000 years is\n * \"a few seconds.\"\n *\n * Result unit is radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @return {number} mean obliquity (ε₀)\n */\nexport function meanObliquityLaskar (jde) {\n  // (22.3) p. 147\n  return base.horner(\n    base.J2000Century(jde) * 0.01,\n    new sexa.Angle(false, 23, 26, 21.448).rad(),\n    -4680.93 / 3600 * (Math.PI / 180),\n    -1.55 / 3600 * (Math.PI / 180),\n    1999.25 / 3600 * (Math.PI / 180),\n    -51.38 / 3600 * (Math.PI / 180),\n    -249.67 / 3600 * (Math.PI / 180),\n    -39.05 / 3600 * (Math.PI / 180),\n    7.12 / 3600 * (Math.PI / 180),\n    27.87 / 3600 * (Math.PI / 180),\n    5.79 / 3600 * (Math.PI / 180),\n    2.45 / 3600 * (Math.PI / 180)\n  )\n}\n\n/**\n * NutationInRA returns \"nutation in right ascension\" or \"equation of the\n * equinoxes.\"\n *\n * Result is an angle in radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @return {number} nutation in right ascension\n */\nexport function nutationInRA (jde) {\n  const [Δψ, Δε] = nutation(jde)\n  const ε0 = meanObliquity(jde)\n  return Δψ * Math.cos(ε0 + Δε)\n}\n\nconst table22A = (function () {\n  const PROPS = 'd,m,n,f,ω,s0,s1,c0,c1'.split(',')\n  const tab = [\n    [0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9],\n    [-2, 0, 0, 2, 2, -13187, -1.6, 5736, -3.1],\n    [0, 0, 0, 2, 2, -2274, -0.2, 977, -0.5],\n    [0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5],\n    [0, 1, 0, 0, 0, 1426, -3.4, 54, -0.1],\n    [0, 0, 1, 0, 0, 712, 0.1, -7, 0],\n    [-2, 1, 0, 2, 2, -517, 1.2, 224, -0.6],\n    [0, 0, 0, 2, 1, -386, -0.4, 200, 0],\n    [0, 0, 1, 2, 2, -301, 0, 129, -0.1],\n    [-2, -1, 0, 2, 2, 217, -0.5, -95, 0.3],\n    [-2, 0, 1, 0, 0, -158, 0, 0, 0],\n    [-2, 0, 0, 2, 1, 129, 0.1, -70, 0],\n    [0, 0, -1, 2, 2, 123, 0, -53, 0],\n    [2, 0, 0, 0, 0, 63, 0, 0, 0],\n    [0, 0, 1, 0, 1, 63, 0.1, -33, 0],\n    [2, 0, -1, 2, 2, -59, 0, 26, 0],\n    [0, 0, -1, 0, 1, -58, -0.1, 32, 0],\n    [0, 0, 1, 2, 1, -51, 0, 27, 0],\n    [-2, 0, 2, 0, 0, 48, 0, 0, 0],\n    [0, 0, -2, 2, 1, 46, 0, -24, 0],\n    [2, 0, 0, 2, 2, -38, 0, 16, 0],\n    [0, 0, 2, 2, 2, -31, 0, 13, 0],\n    [0, 0, 2, 0, 0, 29, 0, 0, 0],\n    [-2, 0, 1, 2, 2, 29, 0, -12, 0],\n    [0, 0, 0, 2, 0, 26, 0, 0, 0],\n    [-2, 0, 0, 2, 0, -22, 0, 0, 0],\n    [0, 0, -1, 2, 1, 21, 0, -10, 0],\n    [0, 2, 0, 0, 0, 17, -0.1, 0, 0],\n    [2, 0, -1, 0, 1, 16, 0, -8, 0],\n    [-2, 2, 0, 2, 2, -16, 0.1, 7, 0],\n    [0, 1, 0, 0, 1, -15, 0, 9, 0],\n    [-2, 0, 1, 0, 1, -13, 0, 7, 0],\n    [0, -1, 0, 0, 1, -12, 0, 6, 0],\n    [0, 0, 2, -2, 0, 11, 0, 0, 0],\n    [2, 0, -1, 2, 1, -10, 0, 5, 0],\n    [2, 0, 1, 2, 2, -8, 0, 3, 0],\n    [0, 1, 0, 2, 2, 7, 0, -3, 0],\n    [-2, 1, 1, 0, 0, -7, 0, 0, 0],\n    [0, -1, 0, 2, 2, -7, 0, 3, 0],\n    [2, 0, 0, 2, 1, -7, 0, 3, 0],\n    [2, 0, 1, 0, 0, 6, 0, 0, 0],\n    [-2, 0, 2, 2, 2, 6, 0, -3, 0],\n    [-2, 0, 1, 2, 1, 6, 0, -3, 0],\n    [2, 0, -2, 0, 1, -6, 0, 3, 0],\n    [2, 0, 0, 0, 1, -6, 0, 3, 0],\n    [0, -1, 1, 0, 0, 5, 0, 0, 0],\n    [-2, -1, 0, 2, 1, -5, 0, 3, 0],\n    [-2, 0, 0, 0, 1, -5, 0, 3, 0],\n    [0, 0, 2, 2, 1, -5, 0, 3, 0],\n    [-2, 0, 2, 0, 1, 4, 0, 0, 0],\n    [-2, 1, 0, 2, 1, 4, 0, 0, 0],\n    [0, 0, 1, -2, 0, 4, 0, 0, 0],\n    [-1, 0, 1, 0, 0, -4, 0, 0, 0],\n    [-2, 1, 0, 0, 0, -4, 0, 0, 0],\n    [1, 0, 0, 0, 0, -4, 0, 0, 0],\n    [0, 0, 1, 2, 0, 3, 0, 0, 0],\n    [0, 0, -2, 2, 2, -3, 0, 0, 0],\n    [-1, -1, 1, 0, 0, -3, 0, 0, 0],\n    [0, 1, 1, 0, 0, -3, 0, 0, 0],\n    [0, -1, 1, 2, 2, -3, 0, 0, 0],\n    [2, -1, -1, 2, 2, -3, 0, 0, 0],\n    [0, 0, 3, 2, 2, -3, 0, 0, 0],\n    [2, -1, 0, 2, 2, -3, 0, 0, 0]\n  ]\n\n  return tab.map((row) => {\n    const o = {}\n    PROPS.forEach((p, i) => {\n      o[p] = row[i]\n    })\n    return o\n  })\n})()\n\nexport default {\n  nutation,\n  approxNutation,\n  meanObliquity,\n  meanObliquityLaskar,\n  nutationInRA\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module elementequinox\n */\n/**\n * Elementequinox: Chapter 24, Reduction of Ecliptical Elements\n * from one Equinox to another one.\n *\n * See package precess for the method EclipticPrecessor.ReduceElements and\n * associated example.  The method is described in this chapter but located\n * in package precess so that it can be a method of EclipticPrecessor.\n */\n\nimport base from './base.js'\n\n/**\n * Elements are the orbital elements of a solar system object which change\n * from one equinox to another.\n *\n * @param {Number} inc  - inclination\n * @param {Number} node - longitude of ascending node (Ω)\n * @param {Number} peri - argument of perihelion (ω)\n */\nexport class Elements {\n  constructor (inc, node, peri) {\n    if (typeof inc === 'object') {\n      node = inc.pode\n      peri = inc.peri\n      inc = inc.inc\n    }\n    this.inc = inc || 0\n    this.node = node || 0\n    this.peri = peri || 0\n  }\n}\n\n// (24.4) p. 161\nconst S = 0.0001139788\nconst C = 0.9999999935\n/**\n * ReduceB1950ToJ2000 reduces orbital elements of a solar system body from\n * equinox B1950 to J2000.\n *\n * @param {Elements} eFrom\n * @returns {Elements} eTo\n */\nexport function reduceB1950ToJ2000 (eFrom) {\n  const W = eFrom.node - 174.298782 * Math.PI / 180\n  const [si, ci] = base.sincos(eFrom.inc)\n  const [sW, cW] = base.sincos(W)\n  const A = si * sW\n  const B = C * si * cW - S * ci\n  const eTo = new Elements()\n  eTo.inc = Math.asin(Math.hypot(A, B))\n  eTo.node = base.pmod(174.997194 * Math.PI / 180 + Math.atan2(A, B),\n    2 * Math.PI)\n  eTo.peri = base.pmod(eFrom.peri + Math.atan2(-S * sW, C * si - S * ci * cW),\n    2 * Math.PI)\n  return eTo\n}\n\nconst Lp = 4.50001688 * Math.PI / 180\nconst L = 5.19856209 * Math.PI / 180\nconst J = 0.00651966 * Math.PI / 180\n\n/**\n * ReduceB1950ToJ2000 reduces orbital elements of a solar system body from\n * equinox B1950 in the FK4 system to equinox J2000 in the FK5 system.\n *\n * @param {Elements} eFrom\n * @returns {Elements} eTo\n */\nexport function reduceB1950FK4ToJ2000FK5 (eFrom) {\n  const W = L + eFrom.node\n  const [si, ci] = base.sincos(eFrom.inc)\n  const [sJ, cJ] = base.sincos(J)\n  const [sW, cW] = base.sincos(W)\n  const eTo = new Elements()\n  eTo.inc = Math.acos(ci * cJ - si * sJ * cW)\n  eTo.node = base.pmod(Math.atan2(si * sW, ci * sJ + si * cJ * cW) - Lp,\n    2 * Math.PI)\n  eTo.peri = base.pmod(eFrom.peri + Math.atan2(sJ * sW, si * cJ + ci * sJ * cW),\n    2 * Math.PI)\n  return eTo\n}\n\nexport default {\n  Elements,\n  reduceB1950ToJ2000,\n  reduceB1950FK4ToJ2000FK5\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module precess\n */\n/**\n * Precession: Chapter 21, Precession.\n *\n * Functions in this package take Julian epoch argurments rather than Julian\n * days.  Use base.JDEToJulianYear() to convert.\n *\n * Also in package base are some definitions related to the Besselian and\n * Julian Year.\n *\n * Partial:  Precession from FK4 not implemented.  Meeus gives no test cases.\n * It's a fair amount of code and data, representing significant chances for\n * errors.  And precession from FK4 would seem to be of little interest today.\n *\n * Proper motion units\n *\n * Meeus gives some example annual proper motions in units of seconds of\n * right ascension and seconds of declination.  To make units clear,\n * functions in this package take proper motions with argument types of\n * sexa.HourAngle and sexa.Angle respectively.  Error-prone conversions\n * can be avoided by using the constructors for these base types.\n *\n * For example, given an annual proper motion in right ascension of -0ˢ.03847,\n * rather than\n *\n * mra = -0.03847 / 13751 // as Meeus suggests\n *\n * or\n *\n * mra = -0.03847 * (15/3600) * (pi/180) // less magic\n *\n * use\n *\n * mra = new sexa.HourAngle(false, 0, 0, -0.03847)\n *\n * Unless otherwise indicated, functions in this library expect proper motions\n * to be annual proper motions, so the unit denominator is years.\n * (The code, following Meeus's example, technically treats it as Julian years.)\n */\n\nimport base from './base.js'\nimport { Equatorial, Ecliptic } from './coord.js'\nimport { Elements } from './elementequinox.js'\nimport nutation from './nutation.js'\nimport { HourAngle, Angle } from './sexagesimal.js'\n\n/**\n * approxAnnualPrecession returns approximate annual precision in right\n * ascension and declination.\n *\n * The two epochs should be within a few hundred years.\n * The declinations should not be too close to the poles.\n *\n * @param {Equatorial} eqFrom\n * @param {Number} epochFrom - use `base.JDEToJulianYear(year)` to get epoch\n * @param {Number} epochTo - use `base.JDEToJulianYear(year)` to get epoch\n * @returns {Object}\n *  {sexa.HourAngle} seconds of right ascension\n *  {sexa.Angle} seconds of Declination\n */\nexport function approxAnnualPrecession (eqFrom, epochFrom, epochTo) {\n  const [m, na, nd] = mn(epochFrom, epochTo)\n  const [sa, ca] = base.sincos(eqFrom.ra)\n  // (21.1) p. 132\n  const Δαs = m + na * sa * Math.tan(eqFrom.dec) // seconds of RA\n  const Δδs = nd * ca // seconds of Dec\n  const ra = new HourAngle(false, 0, 0, Δαs).rad()\n  const dec = new Angle(false, 0, 0, Δδs).rad()\n  return { ra, dec }\n}\n\n/**\n * @param {Number} epochFrom - use `base.JDEToJulianYear(year)` to get epoch\n * @param {Number} epochTo - use `base.JDEToJulianYear(year)` to get epoch\n * @returns {Number[]}\n */\nexport function mn (epochFrom, epochTo) {\n  const T = (epochTo - epochFrom) * 0.01\n  const m = 3.07496 + 0.00186 * T\n  const na = 1.33621 - 0.00057 * T\n  const nd = 20.0431 - 0.0085 * T\n  return [m, na, nd]\n}\n\n/**\n * ApproxPosition uses ApproxAnnualPrecession to compute a simple and quick\n * precession while still considering proper motion.\n *\n * @param {Equatorial} eqFrom\n * @param {Number} epochFrom\n * @param {Number} epochTo\n * @param {Number} mα - in radians\n * @param {Number} mδ - in radians\n * @returns {Equatorial} eqTo\n */\nexport function approxPosition (eqFrom, epochFrom, epochTo, mα, mδ) {\n  const { ra, dec } = approxAnnualPrecession(eqFrom, epochFrom, epochTo)\n  const dy = epochTo - epochFrom\n  const eqTo = new Equatorial()\n  eqTo.ra = eqFrom.ra + (ra + mα) * dy\n  eqTo.dec = eqFrom.dec + (dec + mδ) * dy\n  return eqTo\n}\n\n// constants\nconst d = Math.PI / 180\nconst s = d / 3600\n\n// coefficients from (21.2) p. 134\nconst ζT = [2306.2181 * s, 1.39656 * s, -0.000139 * s]\nconst zT = [2306.2181 * s, 1.39656 * s, -0.000139 * s]\nconst θT = [2004.3109 * s, -0.8533 * s, -0.000217 * s]\n// coefficients from (21.3) p. 134\nconst ζt = [2306.2181 * s, 0.30188 * s, 0.017998 * s]\nconst zt = [2306.2181 * s, 1.09468 * s, 0.018203 * s]\nconst θt = [2004.3109 * s, -0.42665 * s, -0.041833 * s]\n\n/**\n * Precessor represents precession from one epoch to another.\n *\n * Construct with NewPrecessor, then call method Precess.\n * After construction, Precess may be called multiple times to precess\n * different coordinates with the same initial and final epochs.\n */\nexport class Precessor {\n  /**\n   * constructs a Precessor object and initializes it to precess\n   * coordinates from epochFrom to epochTo.\n   * @param {Number} epochFrom\n   * @param {Number} epochTo\n   */\n  constructor (epochFrom, epochTo) {\n    // (21.2) p. 134\n    let ζCoeff = ζt\n    let zCoeff = zt\n    let θCoeff = θt\n    if (epochFrom !== 2000) {\n      const T = (epochFrom - 2000) * 0.01\n      ζCoeff = [\n        base.horner(T, ...ζT),\n        0.30188 * s - 0.000344 * s * T,\n        0.017998 * s\n      ]\n      zCoeff = [\n        base.horner(T, ...zT),\n        1.09468 * s + 0.000066 * s * T,\n        0.018203 * s\n      ]\n      θCoeff = [\n        base.horner(T, ...θT),\n        -0.42665 * s - 0.000217 * s * T,\n        -0.041833 * s\n      ]\n    }\n    const t = (epochTo - epochFrom) * 0.01\n    this.ζ = base.horner(t, ...ζCoeff) * t\n    this.z = base.horner(t, ...zCoeff) * t\n    const θ = base.horner(t, ...θCoeff) * t\n    this.sθ = Math.sin(θ)\n    this.cθ = Math.cos(θ)\n  }\n\n  /**\n   * Precess precesses coordinates eqFrom, leaving result in eqTo.\n   *\n   * @param {Equatorial} eqFrom\n   * @returns {Equatorial} eqTo\n   */\n  precess (eqFrom) {\n    // (21.4) p. 134\n    const [sδ, cδ] = base.sincos(eqFrom.dec)\n    const [sαζ, cαζ] = base.sincos(eqFrom.ra + this.ζ)\n    const A = cδ * sαζ\n    const B = this.cθ * cδ * cαζ - this.sθ * sδ\n    const C = this.sθ * cδ * cαζ + this.cθ * sδ\n    const eqTo = new Equatorial()\n    eqTo.ra = Math.atan2(A, B) + this.z\n    if (C < base.CosSmallAngle) {\n      eqTo.dec = Math.asin(C)\n    } else {\n      eqTo.dec = Math.acos(Math.hypot(A, B)) // near pole\n    }\n    return eqTo\n  }\n}\n\n/**\n * Position precesses equatorial coordinates from one epoch to another,\n * including proper motions.\n *\n * If proper motions are not to be considered or are not applicable, pass 0, 0\n * for mα, mδ\n *\n * Both eqFrom and eqTo must be non-nil, although they may point to the same\n * struct.  EqTo is returned for convenience.\n * @param {Equatorial} eqFrom\n * @param {Number} epochFrom\n * @param {Number} epochTo\n * @param {Number} mα - in radians\n * @param {Number} mδ - in radians\n * @returns {Equatorial} [eqTo]\n */\nexport function position (eqFrom, epochFrom, epochTo, mα, mδ) {\n  const p = new Precessor(epochFrom, epochTo)\n  const t = epochTo - epochFrom\n  const eqTo = new Equatorial()\n  eqTo.ra = eqFrom.ra + mα * t\n  eqTo.dec = eqFrom.dec + mδ * t\n  return p.precess(eqTo)\n}\n\n// coefficients from (21.5) p. 136\nconst ηT = [47.0029 * s, -0.06603 * s, 0.000598 * s]\nconst πT = [174.876384 * d, 3289.4789 * s, 0.60622 * s]\nconst pT = [5029.0966 * s, 2.22226 * s, -0.000042 * s]\nconst ηt = [47.0029 * s, -0.03302 * s, 0.000060 * s]\nconst πt = [174.876384 * d, -869.8089 * s, 0.03536 * s]\nconst pt = [5029.0966 * s, 1.11113 * s, -0.000006 * s]\n\n/**\n * EclipticPrecessor represents precession from one epoch to another.\n *\n * Construct with NewEclipticPrecessor, then call method Precess.\n * After construction, Precess may be called multiple times to precess\n * different coordinates with the same initial and final epochs.\n */\nexport class EclipticPrecessor {\n  /**\n   * constructs an EclipticPrecessor object and initializes\n   * it to precess coordinates from epochFrom to epochTo.\n   * @param {Number} epochFrom\n   * @param {Number} epochTo\n   */\n  constructor (epochFrom, epochTo) {\n    // (21.5) p. 136\n    let ηCoeff = ηt\n    let πCoeff = πt\n    let pCoeff = pt\n    if (epochFrom !== 2000) {\n      const T = (epochFrom - 2000) * 0.01\n      ηCoeff = [\n        base.horner(T, ...ηT),\n        -0.03302 * s + 0.000598 * s * T,\n        0.000060 * s\n      ]\n      πCoeff = [\n        base.horner(T, ...πT),\n        -869.8089 * s - 0.50491 * s * T,\n        0.03536 * s\n      ]\n      pCoeff = [\n        base.horner(T, ...pT),\n        1.11113 * s - 0.000042 * s * T,\n        -0.000006 * s\n      ]\n    }\n    const t = (epochTo - epochFrom) * 0.01\n    this.π = base.horner(t, ...πCoeff)\n    this.p = base.horner(t, ...pCoeff) * t\n    const η = base.horner(t, ...ηCoeff) * t\n    this.sη = Math.sin(η)\n    this.cη = Math.cos(η)\n  }\n\n  /**\n   * EclipticPrecess precesses coordinates eclFrom, leaving result in eclTo.\n   *\n   * The same struct may be used for eclFrom and eclTo.\n   * EclTo is returned for convenience.\n   * @param {Ecliptic} eclFrom\n   * @returns {Ecliptic} [eclTo]\n   */\n  precess (eclFrom) {\n    // (21.7) p. 137\n    const [sβ, cβ] = base.sincos(eclFrom.lat)\n    const [sd, cd] = base.sincos(this.π - eclFrom.lon)\n    const A = this.cη * cβ * sd - this.sη * sβ\n    const B = cβ * cd\n    const C = this.cη * sβ + this.sη * cβ * sd\n    const eclTo = new Ecliptic(this.p + this.π - Math.atan2(A, B))\n    if (C < base.CosSmallAngle) {\n      eclTo.lat = Math.asin(C)\n    } else {\n      eclTo.lat = Math.acos(Math.hypot(A, B)) // near pole\n    }\n    return eclTo\n  }\n\n  /**\n   * ReduceElements reduces orbital elements of a solar system body from one\n   * equinox to another.\n   *\n   * This function is described in chapter 24, but is located in this\n   * package so it can be a method of EclipticPrecessor.\n   *\n   * @param {Elements} eFrom\n   * @returns {Elements} eTo\n   */\n  reduceElements (eFrom) {\n    const ψ = this.π + this.p\n    const [si, ci] = base.sincos(eFrom.inc)\n    const [snp, cnp] = base.sincos(eFrom.node - this.π)\n    const eTo = new Elements()\n    // (24.1) p. 159\n    eTo.inc = Math.acos(ci * this.cη + si * this.sη * cnp)\n    // (24.2) p. 159\n    eTo.node = Math.atan2(si * snp, this.cη * si * cnp - this.sη * ci) + ψ\n    // (24.3) p. 159\n    eTo.peri = Math.atan2(-this.sη * snp, si * this.cη - ci * this.sη * cnp) + eFrom.peri\n    return eTo\n  }\n}\n\n/**\n * eclipticPosition precesses ecliptic coordinates from one epoch to another,\n * including proper motions.\n * While eclFrom is given as ecliptic coordinates, proper motions mα, mδ are\n * still expected to be equatorial.  If proper motions are not to be considered\n * or are not applicable, pass 0, 0.\n * Both eclFrom and eclTo must be non-nil, although they may point to the same\n * struct.  EclTo is returned for convenience.\n *\n * @param {Ecliptic} eclFrom,\n * @param {Number} epochFrom\n * @param {HourAngle} [mα]\n * @param {Angle} [mδ]\n * @returns {Ecliptic} eclTo\n */\nexport function eclipticPosition (eclFrom, epochFrom, epochTo, mα, mδ) {\n  const p = new EclipticPrecessor(epochFrom, epochTo)\n\n  if (mα && mδ && (mα.rad() !== 0 || mδ.rad() !== 0)) {\n    const { lon, lat } = properMotion(mα.rad(), mδ.rad(), epochFrom, eclFrom)\n    const t = epochTo - epochFrom\n    eclFrom.lon += lon * t\n    eclFrom.lat += lat * t\n  }\n  return p.precess(eclFrom)\n}\n\n/**\n * @param {Number} mα - anual proper motion (ra)\n * @param {Number} mδ - anual proper motion (dec)\n * @param {Number} epoch\n * @param {Ecliptic} ecl\n * @returns {Ecliptic} {lon, lat}\n */\nexport function properMotion (mα, mδ, epoch, ecl) {\n  const ε = nutation.meanObliquity(base.JulianYearToJDE(epoch))\n  const [εsin, εcos] = base.sincos(ε)\n  const { ra, dec } = ecl.toEquatorial(ε)\n  const [sα, cα] = base.sincos(ra)\n  const [sδ, cδ] = base.sincos(dec)\n  const cβ = Math.cos(ecl.lat)\n  const lon = (mδ * εsin * cα + mα * cδ * (εcos * cδ + εsin * sδ * sα)) / (cβ * cβ)\n  const lat = (mδ * (εcos * cδ + εsin * sδ * sα) - mα * εsin * cα * cδ) / cβ\n  return new Ecliptic(lon, lat)\n}\n\n/**\n * ProperMotion3D takes the 3D equatorial coordinates of an object\n * at one epoch and computes its coordinates at a new epoch, considering\n * proper motion and radial velocity.\n *\n * Radial distance (r) must be in parsecs, radial velocitiy (mr) in\n * parsecs per year.\n *\n * Both eqFrom and eqTo must be non-nil, although they may point to the same\n * struct.  EqTo is returned for convenience.\n *\n * @param {Equatorial} eqFrom,\n * @param {Number} epochFrom\n * @param {Number} r\n * @param {Number} mr\n * @param {HourAngle} mα\n * @param {Angle} mδ\n * @returns {Equatorial} eqTo\n */\nexport function properMotion3D (eqFrom, epochFrom, epochTo, r, mr, mα, mδ) {\n  const [sα, cα] = base.sincos(eqFrom.ra)\n  const [sδ, cδ] = base.sincos(eqFrom.dec)\n  const x = r * cδ * cα\n  const y = r * cδ * sα\n  const z = r * sδ\n  const mrr = mr / r\n  const zmδ = z * mδ.rad()\n  const mx = x * mrr - zmδ * cα - y * mα.rad()\n  const my = y * mrr - zmδ * sα + x * mα.rad()\n  const mz = z * mrr + r * mδ.rad() * cδ\n  const t = epochTo - epochFrom\n  const xp = x + t * mx\n  const yp = y + t * my\n  const zp = z + t * mz\n  const eqTo = new Equatorial()\n  eqTo.ra = Math.atan2(yp, xp)\n  eqTo.dec = Math.atan2(zp, Math.hypot(xp, yp))\n  return eqTo\n}\n\nexport default {\n  approxAnnualPrecession,\n  mn,\n  approxPosition,\n  Precessor,\n  position,\n  EclipticPrecessor,\n  eclipticPosition,\n  properMotion,\n  properMotion3D\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module planetposition\n */\n/**\n * Planetposition: Chapter 32, Positions of the Planets.\n *\n * Incomplete:\n *\n * 1. The package does not implement algorithms that use appendix III,\n * but instead implements a full VSOP87 solution.  I do not have a copy\n * of the supplimentary disk with appendix III in machine readable form\n * and as the appendix is rather large, retyping it by hand is problematic.\n * The full VSOP87 data set on the other hand is freely downloadable from\n * the internet, so I implement here code that can use that data directly.\n *\n * 2. The formula for accuracy of results is not implemented.  It is\n * not needed for full VSOP87 solutions.\n *\n * 3. Polynomial expressions are not implemented.  Again, implementation\n * would involve typing rather large tables of numbers with associated\n * risk of typographical errors.\n */\n\nimport base, { Coord } from './base.js' // eslint-disable-line no-unused-vars\nimport sexa from './sexagesimal.js'\nimport coord from './coord.js'\nimport precess from './precess.js'\n\nfunction sum (t, series) {\n  const coeffs = []\n  Object.keys(series).forEach((x) => {\n    coeffs[x] = 0\n    let y = series[x].length - 1\n    for (y; y >= 0; y--) {\n      const term = {\n        a: series[x][y][0],\n        b: series[x][y][1],\n        c: series[x][y][2]\n      }\n      coeffs[x] += term.a * Math.cos(term.b + term.c * t)\n    }\n  })\n  const res = base.horner(t, ...coeffs)\n  return res\n}\n\nexport class Planet {\n  /**\n   * VSOP87 representation of a Planet\n   * @constructs Planet\n   * @param {object} planet - planet data series\n   * @example\n   * ```js\n   * // for use in browser\n   * import {data} from 'astronomia'\n   * const earth = new planetposition.Planet(data.vsop87Bearth)\n   * ```\n   */\n  constructor (planet) {\n    if (typeof planet !== 'object') throw new TypeError('need planet vsop87 data')\n    this.name = planet.name\n    this.type = planet.type || 'B'\n    this.series = planet\n  }\n\n  /**\n   * Position2000 returns ecliptic position of planets by full VSOP87 theory.\n   *\n   * @param {Number} jde - the date for which positions are desired.\n   * @returns {Coord} Results are for the dynamical equinox and ecliptic J2000.\n   *  {Number} lon - heliocentric longitude in radians.\n   *  {Number} lat - heliocentric latitude in radians.\n   *  {Number} range - heliocentric range in AU.\n   */\n  position2000 (jde) {\n    const T = base.J2000Century(jde)\n    const τ = T * 0.1\n    const lon = base.pmod(sum(τ, this.series.L), 2 * Math.PI)\n    const lat = sum(τ, this.series.B)\n    const range = sum(τ, this.series.R)\n\n    switch (this.type) {\n      case 'B':\n        return new base.Coord(lon, lat, range)\n      case 'D': {\n        const eclFrom = new coord.Ecliptic(lon, lat)\n        const epochFrom = base.JDEToJulianYear(jde)\n        const epochTo = 2000.0\n        const eclTo = precess.eclipticPosition(eclFrom, epochFrom, epochTo)\n        return new base.Coord(eclTo.lon, eclTo.lat, range)\n      }\n    }\n  }\n\n  /**\n   * Position returns ecliptic position of planets at equinox and ecliptic of date.\n   *\n   * @param {Number} jde - the date for which positions are desired.\n   * @returns {Coord} Results are positions consistent with those from Meeus's\n   * Apendix III, that is, at equinox and ecliptic of date.\n   *  {Number} lon - heliocentric longitude in radians.\n   *  {Number} lat - heliocentric latitude in radians.\n   *  {Number} range - heliocentric range in AU.\n   */\n  position (jde) {\n    const T = base.J2000Century(jde)\n    const τ = T * 0.1\n    const lon = base.pmod(sum(τ, this.series.L), 2 * Math.PI)\n    const lat = sum(τ, this.series.B)\n    const range = sum(τ, this.series.R)\n\n    switch (this.type) {\n      case 'B': {\n        const eclFrom = new coord.Ecliptic(lon, lat)\n        const epochFrom = 2000.0\n        const epochTo = base.JDEToJulianYear(jde)\n        const eclTo = precess.eclipticPosition(eclFrom, epochFrom, epochTo)\n        return new base.Coord(eclTo.lon, eclTo.lat, range)\n      }\n      case 'D':\n        return new base.Coord(lon, lat, range)\n    }\n  }\n}\n\n/**\n * ToFK5 converts ecliptic longitude and latitude from dynamical frame to FK5.\n *\n * @param {Number} lon - ecliptic longitude in radians\n * @param {Number} lat - ecliptic latitude in radians\n * @param {Number} jde - Julian ephemeris day\n * @return {Coord}\n *    {Number} lon - FK5 longitude\n *    {Number} lat - FK5 latitude\n */\nexport function toFK5 (lon, lat, jde) {\n  // formula 32.3, p. 219.\n  const T = base.J2000Century(jde)\n  // const Lp = lon - 1.397 * Math.PI / 180 * T - 0.00031 * Math.PI / 180 * T * T\n  const Lp = lon - sexa.angleFromDeg((1.397 + 0.00031 * T) * T)\n  const [sLp, cLp] = base.sincos(Lp)\n  // (32.3) p. 219\n  const L5 = lon + sexa.angleFromSec(-0.09033 + 0.03916 * (cLp + sLp) * Math.tan(lat))\n  const B5 = lat + sexa.angleFromSec(0.03916 * (cLp - sLp))\n  return new base.Coord(L5, B5)\n}\n\nexport default {\n  Planet,\n  toFK5\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module solar\n */\n/**\n * Solar: Chapter 25, Solar Coordinates.\n *\n * Partial implementation:\n *\n * 1. Higher accuracy positions are not computed with Appendix III but with\n * full VSOP87 as implemented in package planetposition.\n *\n * 2. Higher accuracy correction for aberration (using the formula for\n * variation Δλ on p. 168) is not implemented.  Results for example 25.b\n * already match the full VSOP87 values on p. 165 even with the low accuracy\n * correction for aberration, thus there are no more significant digits that\n * would check a more accurate result.  Also the size of the formula presents\n * significant chance of typographical error.\n */\n\nimport base, { Coord } from './base.js'\nimport { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\nimport coord from './coord.js'\nimport nutation from './nutation.js'\n\n/**\n * True returns true geometric longitude and anomaly of the sun referenced to the mean equinox of date.\n *\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\n * @returns {Object}\n *   {Number} lon = true geometric longitude, ☉, in radians\n *   {Number} ano = true anomaly in radians\n */\nexport function trueLongitude (T) {\n  // (25.2) p. 163\n  const L0 = base.horner(T, 280.46646, 36000.76983, 0.0003032) *\n    Math.PI / 180\n  const m = meanAnomaly(T)\n  const C = (base.horner(T, 1.914602, -0.004817, -0.000014) *\n    Math.sin(m) +\n    (0.019993 - 0.000101 * T) * Math.sin(2 * m) +\n    0.000289 * Math.sin(3 * m)) * Math.PI / 180\n  const lon = base.pmod(L0 + C, 2 * Math.PI)\n  const ano = base.pmod(m + C, 2 * Math.PI)\n  return { lon, ano }\n}\n\n/**\n * meanAnomaly returns the mean anomaly of Earth at the given T.\n *\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\n * @returns {Number} Result is in radians and is not normalized to the range 0..2π.\n */\nexport function meanAnomaly (T) {\n  // (25.3) p. 163\n  return base.horner(T, 357.52911, 35999.05029, -0.0001537) * Math.PI / 180\n}\n\n/**\n * eccentricity returns eccentricity of the Earth's orbit around the sun.\n *\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\n * @returns {Number} eccentricity of the Earth's orbit around the sun.\n */\nexport function eccentricity (T) {\n  // (25.4) p. 163\n  return base.horner(T, 0.016708634, -0.000042037, -0.0000001267)\n}\n\n/**\n * Radius returns the Sun-Earth distance in AU.\n *\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\n * @returns {Number} Sun-Earth distance in AU\n */\nexport function radius (T) {\n  const {lon, ano} = trueLongitude(T) // eslint-disable-line\n  const e = eccentricity(T)\n  // (25.5) p. 164\n  return 1.000001018 * (1 - e * e) / (1 + e * Math.cos(ano))\n}\n\n/**\n * ApparentLongitude returns apparent longitude of the Sun referenced to the true equinox of date.\n * Result includes correction for nutation and aberration.  Unit is radians.\n *\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\n * @returns {Number} apparent longitude of the Sun referenced to the true equinox of date.\n */\nexport function apparentLongitude (T) {\n  const Ω = node(T)\n  const {lon, ano} = trueLongitude(T) // eslint-disable-line\n  return lon - 0.00569 * Math.PI / 180 - 0.00478 * Math.PI / 180 * Math.sin(Ω)\n}\n\n/**\n * @private\n */\nfunction node (T) {\n  return 125.04 * Math.PI / 180 - 1934.136 * Math.PI / 180 * T\n}\n\n/**\n * true2000 returns true geometric longitude and anomaly of the sun referenced to equinox J2000.\n * Results are accurate to .01 degree for years 1900 to 2100.\n *\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\n * @returns {Object}\n *   {Number} lon - true geometric longitude, ☉, in radians\n *   {Number} ano - true anomaly in radians\n */\nexport function true2000 (T) {\n  let { lon, ano } = trueLongitude(T)\n  lon -= 0.01397 * Math.PI / 180 * T * 100\n  return { lon, ano }\n}\n\n/**\n * trueEquatorial returns the true geometric position of the Sun as equatorial coordinates.\n *\n * @param {Number} jde - Julian ephemeris day\n * @returns {Coord}\n *   {Number} ra - right ascension in radians\n *   {Number} dec - declination in radians\n */\nexport function trueEquatorial (jde) {\n  const {lon, ano} = trueLongitude(base.J2000Century(jde)) // eslint-disable-line\n  const ε = nutation.meanObliquity(jde)\n  const [ss, cs] = base.sincos(lon)\n  const [sε, cε] = base.sincos(ε)\n  // (25.6, 25.7) p. 165\n  const ra = Math.atan2(cε * ss, cs)\n  const dec = sε * ss\n  return new base.Coord(ra, dec)\n}\n\n/**\n * apparentEquatorial returns the apparent position of the Sun as equatorial coordinates.\n *\n * @param {Number} jde - Julian ephemeris day\n * @returns {Coord}\n *   {Number} ra - right ascension in radians\n *   {Number} dec - declination in radians\n */\nexport function apparentEquatorial (jde) {\n  const T = base.J2000Century(jde)\n  const λ = apparentLongitude(T)\n  const ε = nutation.meanObliquity(jde)\n  const [sλ, cλ] = base.sincos(λ)\n  // (25.8) p. 165\n  const [sε, cε] = base.sincos(ε + 0.00256 * Math.PI / 180 * Math.cos(node(T)))\n  const ra = Math.atan2(cε * sλ, cλ)\n  const dec = Math.asin(sε * sλ)\n  return new base.Coord(ra, dec)\n}\n\n/**\n * trueVSOP87 returns the true geometric position of the sun as ecliptic coordinates.\n *\n * Result computed by full VSOP87 theory.  Result is at equator and equinox\n * of date in the FK5 frame.  It does not include nutation or aberration.\n *\n * @param {Planet} planet\n * @param {Number} jde - Julian ephemeris day\n * @returns {Object}\n *   {Number} lon - ecliptic longitude in radians\n *   {Number} lat - ecliptic latitude in radians\n *   {Number} range - range in AU\n */\nexport function trueVSOP87 (planet, jde) {\n  let { lon, lat, range } = planet.position(jde)\n  const s = lon + Math.PI\n  // FK5 correction.\n  const λp = base.horner(base.J2000Century(jde),\n    s, -1.397 * Math.PI / 180, -0.00031 * Math.PI / 180)\n  const [sλp, cλp] = base.sincos(λp)\n  const Δβ = 0.03916 / 3600 * Math.PI / 180 * (cλp - sλp)\n  // (25.9) p. 166\n  lon = base.pmod(s - 0.09033 / 3600 * Math.PI / 180, 2 * Math.PI)\n  lat = Δβ - lat\n  return new base.Coord(lon, lat, range)\n}\n\n/**\n * apparentVSOP87 returns the apparent position of the sun as ecliptic coordinates.\n *\n * Result computed by VSOP87, at equator and equinox of date in the FK5 frame,\n * and includes effects of nutation and aberration.\n *\n * @param {Planet} planet\n * @param {Number} jde - Julian ephemeris day\n * @returns {Coord}\n *   {Number} lon - ecliptic longitude in radians\n *   {Number} lat - ecliptic latitude in radians\n *   {Number} range - range in AU\n */\nexport function apparentVSOP87 (planet, jde) {\n  // note: see duplicated code in ApparentEquatorialVSOP87.\n  let { lon, lat, range } = trueVSOP87(planet, jde)\n  const Δψ = nutation.nutation(jde)[0]\n  const a = aberration(range)\n  lon = lon + Δψ + a\n  return new base.Coord(lon, lat, range)\n}\n\n/**\n * apparentEquatorialVSOP87 returns the apparent position of the sun as equatorial coordinates.\n *\n * Result computed by VSOP87, at equator and equinox of date in the FK5 frame,\n * and includes effects of nutation and aberration.\n *\n * @param {Planet} planet\n * @param {Number} jde - Julian ephemeris day\n * @returns {Coord}\n *   {Number} ra - right ascension in radians\n *   {Number} dec - declination in radians\n *   {Number} range - range in AU\n */\nexport function apparentEquatorialVSOP87 (planet, jde) {\n  // note: duplicate code from ApparentVSOP87 so we can keep Δε.\n  // see also duplicate code in time.E().\n  const { lon, lat, range } = trueVSOP87(planet, jde)\n  const [Δψ, Δε] = nutation.nutation(jde)\n  const a = aberration(range)\n  const λ = lon + Δψ + a\n  const ε = nutation.meanObliquity(jde) + Δε\n  const { ra, dec } = new coord.Ecliptic(λ, lat).toEquatorial(ε)\n  return new Coord(ra, dec, range)\n}\n\n/**\n * Low precision formula.  The high precision formula is not implemented\n * because the low precision formula already gives position results to the\n * accuracy given on p. 165.  The high precision formula represents lots\n * of typing with associated chance of typos, and no way to test the result.\n * @param {Number} range\n * @returns {Number} aberation\n */\nexport function aberration (range) {\n  // (25.10) p. 167\n  return -20.4898 / 3600 * Math.PI / 180 / range\n}\n\nexport default {\n  trueLongitude,\n  true: trueLongitude, // BACKWARDS-COMPATIBILITY\n  meanAnomaly,\n  eccentricity,\n  radius,\n  apparentLongitude,\n  true2000,\n  trueEquatorial,\n  apparentEquatorial,\n  trueVSOP87,\n  apparentVSOP87,\n  apparentEquatorialVSOP87,\n  aberration\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module apparent\n */\n/**\n * Apparent: Chapter 23, Apparent Place of a Star\n */\n\nimport base from './base.js'\nimport coord from './coord.js'\nimport _nutation from './nutation.js'\nimport precess from './precess.js'\nimport solar from './solar.js'\nconst { cos, tan } = Math\n\n/**\n * Nutation returns corrections due to nutation for equatorial coordinates\n * of an object.\n *\n * Results are invalid for objects very near the celestial poles.\n * @param {Number} α - right ascension\n * @param {Number} δ - declination\n * @param {Number} jd - Julian Day\n * @return {Number[]} [Δα1, Δδ1] -\n*/\nexport function nutation (α, δ, jd) { // (α, δ, jd float64)  (Δα1, Δδ1 float64)\n  const ε = _nutation.meanObliquity(jd)\n  const [sinε, cosε] = base.sincos(ε)\n  const [Δψ, Δε] = _nutation.nutation(jd)\n  const [sinα, cosα] = base.sincos(α)\n  const tanδ = tan(δ)\n  // (23.1) p. 151\n  const Δα1 = (cosε + sinε * sinα * tanδ) * Δψ - cosα * tanδ * Δε\n  const Δδ1 = sinε * cosα * Δψ + sinα * Δε\n  return [Δα1, Δδ1]\n}\n\n/**\n * κ is the constant of aberration in radians.\n */\nconst κ = 20.49552 * Math.PI / 180 / 3600\n\n/**\n * longitude of perihelian of Earth's orbit.\n */\nexport function perihelion (T) { // (T float64)  float64\n  return base.horner(T, 102.93735, 1.71946, 0.00046) * Math.PI / 180\n}\n\n/**\n * EclipticAberration returns corrections due to aberration for ecliptic\n * coordinates of an object.\n */\nexport function eclipticAberration (λ, β, jd) { // (λ, β, jd float64)  (Δλ, Δβ float64)\n  const T = base.J2000Century(jd)\n  const { lon, ano } = solar.trueLongitude(T) // eslint-disable-line no-unused-vars\n  const e = solar.eccentricity(T)\n  const π = perihelion(T)\n  const [sβ, cβ] = base.sincos(β)\n  const [ssλ, csλ] = base.sincos(lon - λ)\n  const [sinπλ, cosπλ] = base.sincos(π - λ)\n  // (23.2) p. 151\n  const Δλ = κ * (e * cosπλ - csλ) / cβ\n  const Δβ = -κ * sβ * (ssλ - e * sinπλ)\n  return [Δλ, Δβ]\n}\n\n/**\n * Aberration returns corrections due to aberration for equatorial\n * coordinates of an object.\n */\nexport function aberration (α, δ, jd) { // (α, δ, jd float64)  (Δα2, Δδ2 float64)\n  const ε = _nutation.meanObliquity(jd)\n  const T = base.J2000Century(jd)\n  const { lon, ano } = solar.trueLongitude(T) // eslint-disable-line no-unused-vars\n  const e = solar.eccentricity(T)\n  const π = perihelion(T)\n  const [sinα, cosα] = base.sincos(α)\n  const [sinδ, cosδ] = base.sincos(δ)\n  const [sins, coss] = base.sincos(lon)\n  const [sinπ, cosπ] = base.sincos(π)\n  const cosε = cos(ε)\n  const q1 = cosα * cosε\n  // (23.3) p. 152\n  const Δα2 = κ * (e * (q1 * cosπ + sinα * sinπ) - (q1 * coss + sinα * sins)) / cosδ\n  const q2 = cosε * (tan(ε) * cosδ - sinα * sinδ)\n  const q3 = cosα * sinδ\n  const Δδ2 = κ * (e * (cosπ * q2 + sinπ * q3) - (coss * q2 + sins * q3))\n  return [Δα2, Δδ2]\n}\n\n/**\n * Position computes the apparent position of an object.\n *\n * Position is computed for equatorial coordinates in eqFrom, considering\n * proper motion, precession, nutation, and aberration.  Result is in\n * eqTo.  EqFrom and eqTo must be non-nil, but may point to the same struct.\n */\nexport function position (eqFrom, epochFrom, epochTo, mα, mδ) { // (eqFrom, eqTo *coord.Equatorial, epochFrom, epochTo float64, mα sexa.HourAngle, mδ sexa.Angle)  *coord.Equatorial\n  const eqTo = precess.position(eqFrom, epochFrom, epochTo, mα, mδ)\n  const jd = base.JulianYearToJDE(epochTo)\n  const [Δα1, Δδ1] = nutation(eqTo.ra, eqTo.dec, jd)\n  const [Δα2, Δδ2] = aberration(eqTo.ra, eqTo.dec, jd)\n  eqTo.ra += Δα1 + Δα2\n  eqTo.dec += Δδ1 + Δδ2\n  return eqTo\n}\n\n/**\n * AberrationRonVondrak uses the Ron-Vondrák expression to compute corrections\n * due to aberration for equatorial coordinates of an object.\n */\nexport function aberrationRonVondrak (α, δ, jd) { // (α, δ, jd float64)  (Δα, Δδ float64)\n  const T = base.J2000Century(jd)\n  const r = {\n    T,\n    L2: 3.1761467 + 1021.3285546 * T,\n    L3: 1.7534703 + 628.3075849 * T,\n    L4: 6.2034809 + 334.0612431 * T,\n    L5: 0.5995465 + 52.9690965 * T,\n    L6: 0.8740168 + 21.3299095 * T,\n    L7: 5.4812939 + 7.4781599 * T,\n    L8: 5.3118863 + 3.8133036 * T,\n    Lp: 3.8103444 + 8399.6847337 * T,\n    D: 5.1984667 + 7771.3771486 * T,\n    Mp: 2.3555559 + 8328.6914289 * T,\n    F: 1.6279052 + 8433.4661601 * T\n  }\n  let Xp = 0\n  let Yp = 0\n  let Zp = 0\n  // sum smaller terms first\n  for (let i = 35; i >= 0; i--) {\n    const [x, y, z] = rvTerm[i](r)\n    Xp += x\n    Yp += y\n    Zp += z\n  }\n  const [sinα, cosα] = base.sincos(α)\n  const [sinδ, cosδ] = base.sincos(δ)\n  // (23.4) p. 156\n  return [(Yp * cosα - Xp * sinα) / (c * cosδ), -((Xp * cosα + Yp * sinα) * sinδ - Zp * cosδ) / c]\n}\n\nconst c = 17314463350 // unit is 1e-8 AU / day\n\n// r = {T, L2, L3, L4, L5, L6, L7, L8, Lp, D, Mp, F}\nconst rvTerm = [\n  function (r) { // 1\n    const [sinA, cosA] = base.sincos(r.L3)\n    return [(-1719914 - 2 * r.T) * sinA - 25 * cosA,\n      (25 - 13 * r.T) * sinA + (1578089 + 156 * r.T) * cosA,\n      (10 + 32 * r.T) * sinA + (684185 - 358 * r.T) * cosA\n    ]\n  },\n  function (r) { // 2\n    const [sinA, cosA] = base.sincos(2 * r.L3)\n    return [(6434 + 141 * r.T) * sinA + (28007 - 107 * r.T) * cosA,\n      (25697 - 95 * r.T) * sinA + (-5904 - 130 * r.T) * cosA,\n      (11141 - 48 * r.T) * sinA + (-2559 - 55 * r.T) * cosA\n    ]\n  },\n  function (r) { // 3\n    const [sinA, cosA] = base.sincos(r.L5)\n    return [715 * sinA, 6 * sinA - 657 * cosA, -15 * sinA - 282 * cosA]\n  },\n  function (r) { // 4\n    const [sinA, cosA] = base.sincos(r.Lp)\n    return [715 * sinA, -656 * cosA, -285 * cosA]\n  },\n  function (r) { // 5\n    const [sinA, cosA] = base.sincos(3 * r.L3)\n    return [(486 - 5 * r.T) * sinA + (-236 - 4 * r.T) * cosA,\n      (-216 - 4 * r.T) * sinA + (-446 + 5 * r.T) * cosA, -94 * sinA - 193 * cosA\n    ]\n  },\n  function (r) { // 6\n    const [sinA, cosA] = base.sincos(r.L6)\n    return [159 * sinA, 2 * sinA - 147 * cosA, -6 * sinA - 61 * cosA]\n  },\n  function (r) { // 7\n    const cosA = Math.cos(r.F)\n    return [0, 26 * cosA, -59 * cosA]\n  },\n  function (r) { // 8\n    const [sinA, cosA] = base.sincos(r.Lp + r.Mp)\n    return [39 * sinA, -36 * cosA, -16 * cosA]\n  },\n  function (r) { // 9\n    const [sinA, cosA] = base.sincos(2 * r.L5)\n    return [33 * sinA - 10 * cosA, -9 * sinA - 30 * cosA, -5 * sinA - 13 * cosA]\n  },\n  function (r) { // 10\n    const [sinA, cosA] = base.sincos(2 * r.L3 - r.L5)\n    return [31 * sinA + cosA, sinA - 28 * cosA, -12 * cosA]\n  },\n  function (r) { // 11\n    const [sinA, cosA] = base.sincos(3 * r.L3 - 8 * r.L4 + 3 * r.L5)\n    return [8 * sinA - 28 * cosA, 25 * sinA + 8 * cosA, 11 * sinA + 3 * cosA]\n  },\n  function (r) { // 12\n    const [sinA, cosA] = base.sincos(5 * r.L3 - 8 * r.L4 + 3 * r.L5)\n    return [8 * sinA - 28 * cosA, -25 * sinA - 8 * cosA, -11 * sinA + -3 * cosA]\n  },\n  function (r) { // 13\n    const [sinA, cosA] = base.sincos(2 * r.L2 - r.L3)\n    return [21 * sinA, -19 * cosA, -8 * cosA]\n  },\n  function (r) { // 14\n    const [sinA, cosA] = base.sincos(r.L2)\n    return [-19 * sinA, 17 * cosA, 8 * cosA]\n  },\n  function (r) { // 15\n    const [sinA, cosA] = base.sincos(r.L7)\n    return [17 * sinA, -16 * cosA, -7 * cosA]\n  },\n  function (r) { // 16\n    const [sinA, cosA] = base.sincos(r.L3 - 2 * r.L5)\n    return [16 * sinA, 15 * cosA, sinA + 7 * cosA]\n  },\n  function (r) { // 17\n    const [sinA, cosA] = base.sincos(r.L8)\n    return [16 * sinA, sinA - 15 * cosA, -3 * sinA - 6 * cosA]\n  },\n  function (r) { // 18\n    const [sinA, cosA] = base.sincos(r.L3 + r.L5)\n    return [11 * sinA - cosA, -sinA - 10 * cosA, -sinA - 5 * cosA]\n  },\n  function (r) { // 19\n    const [sinA, cosA] = base.sincos(2 * r.L2 - 2 * r.L3)\n    return [-11 * cosA, -10 * sinA, -4 * sinA]\n  },\n  function (r) { // 20\n    const [sinA, cosA] = base.sincos(r.L3 - r.L5)\n    return [-11 * sinA - 2 * cosA, -2 * sinA + 9 * cosA, -sinA + 4 * cosA]\n  },\n  function (r) { // 21\n    const [sinA, cosA] = base.sincos(4 * r.L3)\n    return [-7 * sinA - 8 * cosA, -8 * sinA + 6 * cosA, -3 * sinA + 3 * cosA]\n  },\n  function (r) { // 22\n    const [sinA, cosA] = base.sincos(3 * r.L3 - 2 * r.L5)\n    return [-10 * sinA, 9 * cosA, 4 * cosA]\n  },\n  function (r) { // 23\n    const [sinA, cosA] = base.sincos(r.L2 - 2 * r.L3)\n    return [-9 * sinA, -9 * cosA, -4 * cosA]\n  },\n  function (r) { // 24\n    const [sinA, cosA] = base.sincos(2 * r.L2 - 3 * r.L3)\n    return [-9 * sinA, -8 * cosA, -4 * cosA]\n  },\n  function (r) { // 25\n    const [sinA, cosA] = base.sincos(2 * r.L6)\n    return [-9 * cosA, -8 * sinA, -3 * sinA]\n  },\n  function (r) { // 26\n    const [sinA, cosA] = base.sincos(2 * r.L2 - 4 * r.L3)\n    return [-9 * cosA, 8 * sinA, 3 * sinA]\n  },\n  function (r) { // 27\n    const [sinA, cosA] = base.sincos(3 * r.L3 - 2 * r.L4)\n    return [8 * sinA, -8 * cosA, -3 * cosA]\n  },\n  function (r) { // 28\n    const [sinA, cosA] = base.sincos(r.Lp + 2 * r.D - r.Mp)\n    return [8 * sinA, -7 * cosA, -3 * cosA]\n  },\n  function (r) { // 29\n    const [sinA, cosA] = base.sincos(8 * r.L2 - 12 * r.L3)\n    return [-4 * sinA - 7 * cosA, -6 * sinA + 4 * cosA, -3 * sinA + 2 * cosA]\n  },\n  function (r) { // 30\n    const [sinA, cosA] = base.sincos(8 * r.L2 - 14 * r.L3)\n    return [-4 * sinA - 7 * cosA, 6 * sinA - 4 * cosA, 3 * sinA - 2 * cosA]\n  },\n  function (r) { // 31\n    const [sinA, cosA] = base.sincos(2 * r.L4)\n    return [-6 * sinA - 5 * cosA, -4 * sinA + 5 * cosA, -2 * sinA + 2 * cosA]\n  },\n  function (r) { // 32\n    const [sinA, cosA] = base.sincos(3 * r.L2 - 4 * r.L3)\n    return [-sinA - cosA, -2 * sinA - 7 * cosA, sinA - 4 * cosA]\n  },\n  function (r) { // 33\n    const [sinA, cosA] = base.sincos(2 * r.L3 - 2 * r.L5)\n    return [4 * sinA - 6 * cosA, -5 * sinA - 4 * cosA, -2 * sinA - 2 * cosA]\n  },\n  function (r) { // 34\n    const [sinA, cosA] = base.sincos(3 * r.L2 - 3 * r.L3)\n    return [-7 * cosA, -6 * sinA, -3 * sinA]\n  },\n  function (r) { // 35\n    const [sinA, cosA] = base.sincos(2 * r.L3 - 2 * r.L4)\n    return [5 * sinA - 5 * cosA, -4 * sinA - 5 * cosA, -2 * sinA - 2 * cosA]\n  },\n  function (r) { // 36\n    const [sinA, cosA] = base.sincos(r.Lp - 2 * r.D)\n    return [5 * sinA, -5 * cosA, -2 * cosA]\n  }\n]\n\n/**\n * PositionRonVondrak computes the apparent position of an object using\n * the Ron-Vondrák expression for aberration.\n *\n * Position is computed for equatorial coordinates in eqFrom, considering\n * proper motion, aberration, precession, and _nutation.  Result is in\n * eqTo.  EqFrom and eqTo must be non-nil, but may point to the same struct.\n *\n * Note the Ron-Vondrák expression is only valid for the epoch J2000.\n * EqFrom must be coordinates at epoch J2000.\n */\nexport function positionRonVondrak (eqFrom, epochTo, mα, mδ) { // (eqFrom, eqTo *coord.Equatorial, epochTo float64, mα sexa.HourAngle, mδ sexa.Angle)  *coord.Equatorial\n  const t = epochTo - 2000\n  let eqTo = new coord.Equatorial()\n  eqTo.ra = eqFrom.ra + mα.rad() * t\n  eqTo.dec = eqFrom.dec + mδ.rad() * t\n  const jd = base.JulianYearToJDE(epochTo)\n  const [Δα, Δδ] = aberrationRonVondrak(eqTo.ra, eqTo.dec, jd)\n  eqTo.ra += Δα\n  eqTo.dec += Δδ\n  eqTo = precess.position(eqTo, 2000, epochTo, 0, 0)\n  const [Δα1, Δδ1] = nutation(eqTo.ra, eqTo.dec, jd)\n  eqTo.ra += Δα1\n  eqTo.dec += Δδ1\n  return eqTo\n}\n\nexport default {\n  nutation,\n  perihelion,\n  eclipticAberration,\n  aberration,\n  position,\n  aberrationRonVondrak,\n  positionRonVondrak\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module apsis\n */\n/**\n * Apsis: Chapter 50, Perigee and apogee of the Moon\n */\n\nimport base from './base.js'\nconst { sin, cos } = Math\n\n/**\n * conversion factor from k to T, given in (50.3) p. 356\n */\nconst ck = 1 / 1325.55\nconst D2R = Math.PI / 180\n\n// from http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\nexport const EARTH_RADIUS = 6378.137 // km\n// from http://nssdc.gsfc.nasa.gov/planetary/factsheet/moonfact.html\nexport const MOON_RADIUS = 1738.1 // km\n\n/**\n * mean time of perigee or apogee\n * (50.1) p. 355\n */\nconst mean = function (T) {\n  return base.horner(T, 2451534.6698, 27.55454989 / ck,\n    -0.0006691, -0.000001098, 0.0000000052)\n}\n\n/**\n * snap returns k at half h nearest year y.\n */\nconst snap = function (y, h) {\n  const k = (y - 1999.97) * 13.2555 // (50.2) p. 355\n  return Math.floor(k - h + 0.5) + h\n}\n\n/**\n * meanPerigee returns the jde of the mean perigee of the Moon nearest the given date.\n *\n * @param {Number} year - is a decimal year specifying a date.\n * @return {Number} jde - Julian ephemeris day\n */\nexport function meanPerigee (year) {\n  return mean(snap(year, 0) * ck)\n}\n\n/**\n * perigee returns the jde of perigee of the Moon nearest the given date.\n *\n * @param {Number} year - is a decimal year specifying a date.\n * @return {Number} jde - Julian ephemeris day\n */\nexport function perigee (year) {\n  const l = new La(year, 0)\n  return mean(l.T) + l.perigeeCorr()\n}\n\n/**\n * meanApogee returns the jde of the mean apogee of the Moon nearest the given date.\n *\n * @param {Number} year - is a decimal year specifying a date.\n * @return {Number} jde - Julian ephemeris day\n */\nexport function meanApogee (year) { // (year float64)  float64\n  return mean(snap(year, 0.5) * ck)\n}\n\n/**\n * apogee returns the jde of apogee of the Moon nearest the given date.\n *\n * @param {Number} year - is a decimal year specifying a date.\n * @return {Number} jde - Julian ephemeris day\n */\nexport function apogee (year) {\n  const l = new La(year, 0.5)\n  return mean(l.T) + l.apogeeCorr()\n}\n\n/**\n * apogeeParallax returns equatorial horizontal parallax of the Moon at the Apogee nearest the given date.\n *\n * @param {Number} year - is a decimal year specifying a date.\n * @return {Number} equatorial horizontal parallax in radians\n */\nexport function apogeeParallax (year) {\n  return new La(year, 0.5).apogeeParallax()\n}\n\n/**\n * perigeeParallax returns equatorial horizontal parallax of the Moon at the Apogee nearest the given date.\n *\n * @param {Number} year - is a decimal year specifying a date.\n * @return {Number} equatorial horizontal parallax in radians\n */\nexport function perigeeParallax (year) {\n  return new La(year, 0).perigeeParallax()\n}\n\n/**\n * Calculate the distance earth - moon (center to center) using the parallax angle in radians\n *\n * @param {Number} parallax - parallax angle in radians\n * @return {Number} distance in `km`\n */\nexport function distance (parallax) {\n  return EARTH_RADIUS / sin(parallax)\n}\n\nclass La {\n  constructor (y, h) {\n    this.k = snap(y, h)\n    this.T = this.k * ck // (50.3) p. 350\n    this.D = base.horner(this.T, 171.9179 * D2R, 335.9106046 * D2R / ck,\n      -0.0100383 * D2R, -0.00001156 * D2R, 0.000000055 * D2R)\n    this.M = base.horner(this.T, 347.3477 * D2R, 27.1577721 * D2R / ck,\n      -0.000813 * D2R, -0.000001 * D2R)\n    this.F = base.horner(this.T, 316.6109 * D2R, 364.5287911 * D2R / ck,\n      -0.0125053 * D2R, -0.0000148 * D2R)\n    return this\n  }\n\n  /**\n   * perigee correction\n   */\n  perigeeCorr () {\n    const l = this\n    return -1.6769 * sin(2 * l.D) +\n    0.4589 * sin(4 * l.D) +\n    -0.1856 * sin(6 * l.D) +\n    0.0883 * sin(8 * l.D) +\n    (-0.0773 + 0.00019 * l.T) * sin(2 * l.D - l.M) +\n    (0.0502 - 0.00013 * l.T) * sin(l.M) +\n    -0.046 * sin(10 * l.D) +\n    (0.0422 - 0.00011 * l.T) * sin(4 * l.D - l.M) +\n    -0.0256 * sin(6 * l.D - l.M) +\n    0.0253 * sin(12 * l.D) +\n    0.0237 * sin(l.D) +\n    0.0162 * sin(8 * l.D - l.M) +\n    -0.0145 * sin(14 * l.D) +\n    0.0129 * sin(2 * l.F) +\n    -0.0112 * sin(3 * l.D) +\n    -0.0104 * sin(10 * l.D - l.M) +\n    0.0086 * sin(16 * l.D) +\n    0.0069 * sin(12 * l.D - l.M) +\n    0.0066 * sin(5 * l.D) +\n    -0.0053 * sin(2 * (l.D + l.F)) +\n    -0.0052 * sin(18 * l.D) +\n    -0.0046 * sin(14 * l.D - l.M) +\n    -0.0041 * sin(7 * l.D) +\n    0.004 * sin(2 * l.D + l.M) +\n    0.0032 * sin(20 * l.D) +\n    -0.0032 * sin(l.D + l.M) +\n    0.0031 * sin(16 * l.D - l.M) +\n    -0.0029 * sin(4 * l.D + l.M) +\n    0.0027 * sin(9 * l.D) +\n    0.0027 * sin(4 * l.D + 2 * l.F) +\n    -0.0027 * sin(2 * (l.D - l.M)) +\n    0.0024 * sin(4 * l.D - 2 * l.M) +\n    -0.0021 * sin(6 * l.D - 2 * l.M) +\n    -0.0021 * sin(22 * l.D) +\n    -0.0021 * sin(18 * l.D - l.M) +\n    0.0019 * sin(6 * l.D + l.M) +\n    -0.0018 * sin(11 * l.D) +\n    -0.0014 * sin(8 * l.D + l.M) +\n    -0.0014 * sin(4 * l.D - 2 * l.F) +\n    -0.0014 * sin(6 * l.D + 2 * l.F) +\n    0.0014 * sin(3 * l.D + l.M) +\n    -0.0014 * sin(5 * l.D + l.M) +\n    0.0013 * sin(13 * l.D) +\n    0.0013 * sin(20 * l.D - l.M) +\n    0.0011 * sin(3 * l.D + 2 * l.M) +\n    -0.0011 * sin(2 * (2 * l.D + l.F - l.M)) +\n    -0.001 * sin(l.D + 2 * l.M) +\n    -0.0009 * sin(22 * l.D - l.M) +\n    -0.0008 * sin(4 * l.F) +\n    0.0008 * sin(6 * l.D - 2 * l.F) +\n    0.0008 * sin(2 * (l.D - l.F) + l.M) +\n    0.0007 * sin(2 * l.M) +\n    0.0007 * sin(2 * l.F - l.M) +\n    0.0007 * sin(2 * l.D + 4 * l.F) +\n    -0.0006 * sin(2 * (l.F - l.M)) +\n    -0.0006 * sin(2 * (l.D - l.F + l.M)) +\n    0.0006 * sin(24 * l.D) +\n    0.0005 * sin(4 * (l.D - l.F)) +\n    0.0005 * sin(2 * (l.D + l.M)) +\n    -0.0004 * sin(l.D - l.M)\n  }\n\n  /**\n   * apogee correction\n   */\n  apogeeCorr () {\n    const l = this\n    return 0.4392 * sin(2 * l.D) +\n    0.0684 * sin(4 * l.D) +\n    (0.0456 - 0.00011 * l.T) * sin(l.M) +\n    (0.0426 - 0.00011 * l.T) * sin(2 * l.D - l.M) +\n    0.0212 * sin(2 * l.F) +\n    -0.0189 * sin(l.D) +\n    0.0144 * sin(6 * l.D) +\n    0.0113 * sin(4 * l.D - l.M) +\n    0.0047 * sin(2 * (l.D + l.F)) +\n    0.0036 * sin(l.D + l.M) +\n    0.0035 * sin(8 * l.D) +\n    0.0034 * sin(6 * l.D - l.M) +\n    -0.0034 * sin(2 * (l.D - l.F)) +\n    0.0022 * sin(2 * (l.D - l.M)) +\n    -0.0017 * sin(3 * l.D) +\n    0.0013 * sin(4 * l.D + 2 * l.F) +\n    0.0011 * sin(8 * l.D - l.M) +\n    0.001 * sin(4 * l.D - 2 * l.M) +\n    0.0009 * sin(10 * l.D) +\n    0.0007 * sin(3 * l.D + l.M) +\n    0.0006 * sin(2 * l.M) +\n    0.0005 * sin(2 * l.D + l.M) +\n    0.0005 * sin(2 * (l.D + l.M)) +\n    0.0004 * sin(6 * l.D + 2 * l.F) +\n    0.0004 * sin(6 * l.D - 2 * l.M) +\n    0.0004 * sin(10 * l.D - l.M) +\n    -0.0004 * sin(5 * l.D) +\n    -0.0004 * sin(4 * l.D - 2 * l.F) +\n    0.0003 * sin(2 * l.F + l.M) +\n    0.0003 * sin(12 * l.D) +\n    0.0003 * sin(2 * l.D + 2 * l.F - l.M) +\n    -0.0003 * sin(l.D - l.M)\n  }\n\n  /**\n   * apogee parallax\n   */\n  apogeeParallax () {\n    const s = Math.PI / 180 / 3600\n    const l = this\n    return 3245.251 * s +\n    -9.147 * s * cos(2 * l.D) +\n    -0.841 * s * cos(l.D) +\n    0.697 * s * cos(2 * l.F) +\n    (-0.656 * s + 0.0016 * s * l.T) * cos(l.M) +\n    0.355 * s * cos(4 * l.D) +\n    0.159 * s * cos(2 * l.D - l.M) +\n    0.127 * s * cos(l.D + l.M) +\n    0.065 * s * cos(4 * l.D - l.M) +\n    0.052 * s * cos(6 * l.D) +\n    0.043 * s * cos(2 * l.D + l.M) +\n    0.031 * s * cos(2 * (l.D + l.F)) +\n    -0.023 * s * cos(2 * (l.D - l.F)) +\n    0.022 * s * cos(2 * (l.D - l.M)) +\n    0.019 * s * cos(2 * (l.D + l.M)) +\n    -0.016 * s * cos(2 * l.M) +\n    0.014 * s * cos(6 * l.D - l.M) +\n    0.01 * s * cos(8 * l.D)\n  }\n\n  /**\n   * perigee parallax\n   */\n  perigeeParallax () {\n    const s = Math.PI / 180 / 3600\n    const l = this\n    return 3629.215 * s +\n      63.224 * s * cos(2 * l.D) +\n      -6.990 * s * cos(4 * l.D) +\n      (2.834 * s - 0.0071 * l.T * s) * cos(2 * l.D - l.M) +\n      1.927 * s * cos(6 * l.D) +\n      -1.263 * s * cos(l.D) +\n      -0.702 * s * cos(8 * l.D) +\n      (0.696 * s - 0.0017 * l.T * s) * cos(l.M) +\n      -0.690 * s * cos(2 * l.F) +\n      (-0.629 * s + 0.0016 * l.T * s) * cos(4 * l.D - l.M) +\n      -0.392 * s * cos(2 * (l.D - l.F)) +\n      0.297 * s * cos(10 * l.D) +\n      0.260 * s * cos(6 * l.D - l.M) +\n      0.201 * s * cos(3 * l.D) +\n      -0.161 * s * cos(2 * l.D + l.M) +\n      0.157 * s * cos(l.D + l.M) +\n      -0.138 * s * cos(12 * l.D) +\n      -0.127 * s * cos(8 * l.D - l.M) +\n      0.104 * s * cos(2 * (l.D + l.F)) +\n      0.104 * s * cos(2 * (l.D - l.M)) +\n      -0.079 * s * cos(5 * l.D) +\n      0.068 * s * cos(14 * l.D) +\n      0.067 * s * cos(10 * l.D - l.M) +\n      0.054 * s * cos(4 * l.D + l.M) +\n      -0.038 * s * cos(12 * l.D - l.M) +\n      -0.038 * s * cos(4 * l.D - 2 * l.M) +\n      0.037 * s * cos(7 * l.D) +\n      -0.037 * s * cos(4 * l.D + 2 * l.F) +\n      -0.035 * s * cos(16 * l.D) +\n      -0.030 * s * cos(3 * l.D + l.M) +\n      0.029 * s * cos(l.D - l.M) +\n      -0.025 * s * cos(6 * l.D + l.M) +\n      0.023 * s * cos(2 * l.M) +\n      0.023 * s * cos(14 * l.D - l.M) +\n      -0.023 * s * cos(2 * (l.D + l.M)) +\n      0.022 * s * cos(6 * l.D - 2 * l.M) +\n      -0.021 * s * cos(2 * l.D - 2 * l.F - l.M) +\n      -0.020 * s * cos(9 * l.D) +\n      0.019 * s * cos(18 * l.D) +\n      0.017 * s * cos(6 * l.D + 2 * l.F) +\n      0.014 * s * cos(2 * l.F - l.M) +\n      -0.014 * s * cos(16 * l.D - l.M) +\n      0.013 * s * cos(4 * l.D - 2 * l.F) +\n      0.012 * s * cos(8 * l.D + l.M) +\n      0.011 * s * cos(11 * l.D) +\n      0.010 * s * cos(5 * l.D + l.M) +\n      -0.010 * s * cos(20 * l.D)\n  }\n}\n\nexport default {\n  EARTH_RADIUS,\n  MOON_RADIUS,\n  meanPerigee,\n  perigee,\n  meanApogee,\n  apogee,\n  apogeeParallax,\n  perigeeParallax,\n  distance\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module binary\n */\n/**\n * Binary: Chapter 57, Binary Stars\n */\nimport base from './base.js'\nconst { atan, atan2, cos, sqrt, tan } = Math\n\n/**\n * computes mean anomaly for the given date.\n *\n * @param {Number} year - is a decimal year specifying the date\n * @param {Number} T - is time of periastron, as a decimal year\n * @param {Number} P - is period of revolution in mean solar years\n * @returns {Number} mean anomaly in radians.\n */\nexport function meanAnomaly (year, T, P) { // (year, T, P float64)  float64\n  const n = 2 * Math.PI / P\n  return base.pmod(n * (year - T), 2 * Math.PI)\n}\n\n/**\n * Position computes apparent position angle and angular distance of\n * components of a binary star.\n *\n * @param {Number} a - is apparent semimajor axis in arc seconds\n * @param {Number} e - is eccentricity of the true orbit\n * @param {Number} i - is inclination relative to the line of sight\n * @param {Number} Ω - is position angle of the ascending node\n * @param {Number} ω - is longitude of periastron\n * @param {Number} E - is eccentric anomaly, computed for example with package kepler\n *  and the mean anomaly as returned by function M in this package.\n * @returns {Number[]} [θ, ρ]\n *  {Number} θ -is the apparent position angle in radians,\n *  {Number} ρ is the angular distance in arc seconds.\n */\nexport function position (a, e, i, Ω, ω, E) { // (a, e, i, Ω, ω, E float64)  (θ, ρ float64)\n  const r = a * (1 - e * cos(E))\n  const ν = 2 * atan(sqrt((1 + e) / (1 - e)) * tan(E / 2))\n  const [sinνω, cosνω] = base.sincos(ν + ω)\n  const cosi = cos(i)\n  const num = sinνω * cosi\n  let θ = atan2(num, cosνω) + Ω\n  if (θ < 0) {\n    θ += 2 * Math.PI\n  }\n  const ρ = r * sqrt(num * num + cosνω * cosνω)\n  return [θ, ρ]\n}\n\n/**\n * ApparentEccentricity returns apparent eccenticity of a binary star\n * given true orbital elements.\n *\n * @param {Number} e - is eccentricity of the true orbit\n * @param {Number} i - is inclination relative to the line of sight\n * @param {Number} ω - is longitude of periastron\n * @returns {Number} apparent eccenticity of a binary star\n */\nexport function apparentEccentricity (e, i, ω) { // (e, i, ω float64)  float64\n  const cosi = cos(i)\n  const [sinω, cosω] = base.sincos(ω)\n  const A = (1 - e * e * cosω * cosω) * cosi * cosi\n  const B = e * e * sinω * cosω * cosi\n  const C = 1 - e * e * sinω * sinω\n  const d = A - C\n  const sqrtD = sqrt(d * d + 4 * B * B)\n  return sqrt(2 * sqrtD / (A + C + sqrtD))\n}\n\nexport default {\n  meanAnomaly,\n  position,\n  apparentEccentricity\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module conjunction\n */\n/**\n * Conjunction: Chapter 18: Planetary Conjunctions.\n */\n\nimport { Coord } from './base.js' // eslint-disable-line no-unused-vars\nimport interp from './interpolation.js'\n\n/**\n * Planetary computes a conjunction between two moving objects, such as planets.\n *\n * Conjunction is found with interpolation against length 5 ephemerides.\n *\n * t1, t5 are times of first and last rows of ephemerides.  The scale is\n * arbitrary.\n *\n * cs1 is the ephemeris of the first object. The columns may be celestial\n * coordinates in right ascension and declination or ecliptic coordinates in\n * longitude and latitude.\n *\n * cs2 is the ephemeris of the second object, in the same frame as the first.\n *\n * Return value t is time of conjunction in the scale of t1, t5.\n *\n * @param {Number} t1 - julian ephemeris day of first row\n * @param {Number} t5 - julian ephemeris day of fifth row\n * @param {Coord[]} cs1 - ephemeris of first moving object\n * @param {Coord[]} cs2 - ephemeris of decond moving object\n * @return {Array}\n *    {Number} t - time of conjunction in JDE\n *    {Number} Δd - is the amount that object 2 was \"above\" object 1 at the time of conjunction.\n */\nexport function planetary (t1, t5, cs1, cs2) {\n  if (cs1.length !== 5 || cs2.length !== 5) {\n    throw new Error('Five rows required in ephemerides')\n  }\n  const dr = new Array(5)\n  const dd = new Array(5)\n  cs1.forEach((r, i) => {\n    dr[i] = cs2[i].ra - cs1[i].ra\n    dd[i] = cs2[i].dec - cs1[i].dec\n  })\n  return conj(t1, t5, dr, dd)\n}\n\n/**\n * Stellar computes a conjunction between a moving and non-moving object.\n *\n * Arguments and return values same as with Planetary, except the non-moving\n * object is c1.  The ephemeris of the moving object is cs2.\n *\n * @param {Number} t1 - julian ephemeris day of first row\n * @param {Number} t5 - julian ephemeris day of fifth row\n * @param {Coord} c1 - ephemeris of non-moving object\n * @param {Coord[]} cs2 - ephemeris of moving object\n * @return {Array}\n *    {Number} t - time of conjunction in JDE\n *    {Number} Δd - is the amount that object 2 was \"above\" object 1 at the time of conjunction.\n */\nexport function stellar (t1, t5, c1, cs2) {\n  if (cs2.length !== 5) {\n    throw new Error('Five rows required in ephemerides')\n  }\n  const dr = new Array(5)\n  const dd = new Array(5)\n  cs2.forEach((r, i) => {\n    dr[i] = cs2[i].ra - c1.ra\n    dd[i] = cs2[i].dec - c1.dec\n  })\n  return conj(t1, t5, dr, dd)\n}\n\nconst conj = function (t1, t5, dr, dd) { // (t1, t5 float64, dr, dd []float64)  (t, Δd float64, err error)\n  let l5 = new interp.Len5(t1, t5, dr)\n  const t = l5.zero(true)\n  l5 = new interp.Len5(t1, t5, dd)\n  const Δd = l5.interpolateXStrict(t)\n  return [t, Δd]\n}\n\nexport default {\n  planetary,\n  stellar\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module circle\n */\n/**\n * Circle: Chapter 20, Smallest Circle containing three Celestial Bodies.\n */\n\nimport { Coord } from './base.js' // eslint-disable-line no-unused-vars\n\n/**\n * Smallest finds the smallest circle containing three points.\n *\n * Arguments should represent coordinates in right ascension and declination\n * or longitude and latitude.  Result Δ is the diameter of the circle, typeI\n * is true if solution is of type I.\n *\n * @param {Coord} c1 - ra, dec point 1\n * @param {Coord} c2 - ra, dec point 2\n * @param {Coord} c3 - ra, dec point 3\n * @returns {Array} [Δ, typeI]\n *  {Number} Δ - diameter of the circle\n *  {Number} typeI - true - Two points on circle, one interior.\n *                   false - All three points on circle.\n */\nexport function smallest (c1, c2, c3) {\n  // Using haversine formula\n  const cd1 = Math.cos(c1.dec)\n  const cd2 = Math.cos(c2.dec)\n  const cd3 = Math.cos(c3.dec)\n  let a = 2 * Math.asin(Math.sqrt(hav(c2.dec - c1.dec) + cd1 * cd2 * hav(c2.ra - c1.ra)))\n  let b = 2 * Math.asin(Math.sqrt(hav(c3.dec - c2.dec) + cd2 * cd3 * hav(c3.ra - c2.ra)))\n  let c = 2 * Math.asin(Math.sqrt(hav(c1.dec - c3.dec) + cd3 * cd1 * hav(c1.ra - c3.ra)))\n  if (b > a) {\n    [a, b] = noswap(b, a)\n  }\n  if (c > a) {\n    [a, c] = noswap(c, a)\n  }\n  if (a * a >= b * b + c * c) {\n    return [a, true]\n  }\n  // (20.1) p. 128\n  return [2 * a * b * c / Math.sqrt((a + b + c) * (a + b - c) * (b + c - a) * (a + c - b)), false]\n}\n\nconst noswap = function (a, b) {\n  return [a, b]\n}\n\n/**\n * haversine function (17.5) p. 115\n */\nconst hav = function (a) {\n  return 0.5 * (1 - Math.cos(a))\n}\n\nexport default {\n  smallest\n}\n", "/**\n * DO NOT EDIT MANUALLY\n * Use `scripts/deltat.js` to generate file.\n * Datasets are from <https://maia.usno.navy.mil/ser7> and\n * <ftp://ftp.iers.org/products/eop/rapid/standard>\n */\nconst m = {\n  historic: {\n    table: [44, 43, 43, 41, 40, 39, 38, 37, 37, 36, 36, 36, 37, 37, 38, 37, 36, 36, 35, 35, 34, 33, 33, 32, 32, 31, 31, 30, 30, 29, 29, 29, 29, 29, 28, 28, 27, 27, 26, 26, 25, 25, 25, 26, 26, 26, 26, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21.1, 21, 21, 21, 20.9, 20.8, 20.7, 20.6, 20.4, 20.2, 20, 19.7, 19.4, 19.1, 18.7, 18.3, 17.8, 17.4, 17, 16.8, 16.6, 16.4, 16.1, 15.9, 15.7, 15.5, 15.3, 15, 14.7, 14.5, 14.3, 14.2, 14.1, 14.1, 14.1, 13.9, 13.7, 13.6, 13.5, 13.5, 13.5, 13.5, 13.4, 13.4, 13.4, 13.4, 13.3, 13.3, 13.2, 13.2, 13.2, 13.1, 13.1, 13.1, 13, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14, 14.1, 14.1, 14.1, 14.1, 14.2, 14.3, 14.4, 14.4, 14.5, 14.6, 14.6, 14.7, 14.7, 14.7, 14.8, 14.8, 14.9, 14.9, 15, 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.6, 15.6, 15.8, 15.9, 15.9, 15.9, 15.8, 15.7, 15.8, 15.7, 15.7, 15.7, 15.8, 15.9, 16.1, 16.1, 16, 15.9, 15.9, 15.7, 15.4, 15.3, 15.4, 15.5, 15.6, 15.6, 15.6, 15.6, 15.6, 15.6, 15.6, 15.5, 15.5, 15.4, 15.3, 15.2, 15.1, 14.9, 14.8, 14.6, 14.4, 14.3, 14.2, 14.1, 14.2, 14.2, 13.9, 13.7, 13.5, 13.3, 13.1, 13, 13.2, 13.2, 13.1, 13.1, 13.2, 13.3, 13.5, 13.5, 13.4, 13.2, 13.2, 13.1, 13.1, 13, 12.8, 12.6, 12.7, 12.6, 12.3, 12, 11.9, 11.8, 11.6, 11.4, 11.2, 11.1, 11.1, 11.1, 11.1, 11.1, 11.2, 11.1, 11.1, 11.2, 11.4, 11.5, 11.3, 11.2, 11.4, 11.7, 11.9, 11.9, 11.9, 11.8, 11.7, 11.8, 11.8, 11.8, 11.7, 11.6, 11.6, 11.5, 11.5, 11.4, 11.4, 11.3, 11.3, 11.13, 11.16, 10.94, 10.72, 10.29, 10.04, 9.94, 9.91, 9.88, 9.86, 9.72, 9.67, 9.66, 9.64, 9.51, 9.4, 9.21, 9, 8.6, 8.29, 7.95, 7.73, 7.59, 7.49, 7.36, 7.26, 7.1, 7, 6.89, 6.82, 6.73, 6.64, 6.39, 6.28, 6.25, 6.27, 6.25, 6.27, 6.22, 6.24, 6.22, 6.27, 6.3, 6.36, 6.35, 6.37, 6.32, 6.33, 6.33, 6.37, 6.37, 6.41, 6.4, 6.44, 6.46, 6.51, 6.48, 6.51, 6.53, 6.58, 6.55, 6.61, 6.69, 6.8, 6.84, 6.94, 7.03, 7.13, 7.15, 7.22, 7.26, 7.3, 7.23, 7.22, 7.21, 7.2, 6.99, 6.98, 7.19, 7.36, 7.35, 7.39, 7.41, 7.45, 7.36, 7.18, 6.95, 6.72, 6.45, 6.24, 5.92, 5.59, 5.15, 4.67, 4.11, 3.52, 2.94, 2.47, 1.97, 1.52, 1.04, 0.6, 0.11, -0.34, -0.82, -1.25, -1.7, -2.08, -2.48, -2.82, -3.19, -3.5, -3.84, -4.14, -4.43, -4.59, -4.79, -4.92, -5.09, -5.24, -5.36, -5.34, -5.37, -5.32, -5.34, -5.33, -5.4, -5.47, -5.58, -5.66, -5.74, -5.68, -5.69, -5.65, -5.67, -5.68, -5.73, -5.72, -5.78, -5.79, -5.86, -5.89, -6.01, -6.13, -6.28, -6.41, -6.53, -6.49, -6.5, -6.45, -6.41, -6.26, -6.11, -5.9, -5.63, -5.13, -4.68, -4.19, -3.72, -3.21, -2.7, -2.09, -1.48, -0.75, -0.08, 0.62, 1.26, 1.95, 2.59, 3.28, 3.92, 4.61, 5.2, 5.73, 6.29, 7, 7.68, 8.45, 9.13, 9.78, 10.38, 10.99, 11.64, 12.47, 13.23, 14, 14.69, 15.38, 16, 16.64, 17.19, 17.72, 18.19, 18.67, 19.13, 19.69, 20.14, 20.54, 20.86, 21.14, 21.41, 21.78, 22.06, 22.3, 22.51, 22.79, 23.01, 23.29, 23.46, 23.55, 23.63, 23.8, 23.95, 24.25, 24.39, 24.42, 24.34, 24.22, 24.1, 24.08, 24.02, 24.04, 23.98, 23.91, 23.89, 23.95, 23.93, 23.92, 23.88, 23.94, 23.91, 23.82, 23.76, 23.87, 23.91, 23.95, 23.96, 24, 24.04, 24.2, 24.35, 24.61, 24.82, 25.09, 25.3, 25.56, 25.77, 26.05, 26.27, 26.54, 26.76, 27.04, 27.27, 27.55, 27.77, 28.03, 28.25, 28.5, 28.7, 28.95, 29.15, 29.38, 29.57, 29.8, 29.97, 30.19, 30.36, 30.57, 30.72, 30.93, 31.07, 31.24, 31.349, 31.516, 31.677, 31.923, 32.166, 32.449, 32.671, 32.919, 33.15, 33.397, 33.584, 33.804, 33.992, 34.24, 34.466, 34.731, 35.03, 35.4, 35.738, 36.147, 36.546, 36.995, 37.429, 37.879, 38.291, 38.753, 39.204, 39.707, 40.182, 40.706, 41.17, 41.686, 42.227, 42.825, 43.373, 43.959, 44.486, 44.997, 45.477, 45.983, 46.458, 46.997, 47.521, 48.034, 48.535, 49.099, 49.589, 50.102, 50.54, 50.975, 51.382, 51.81, 52.168, 52.572, 52.957, 53.434, 53.789, 54.087],\n    first: 1657,\n    last: 1984.5\n  },\n  data: {\n    table: [43.4724372, 43.5648351, 43.6736863, 43.7782156, 43.8763273, 43.9562443, 44.0314956, 44.1131788, 44.1982187, 44.2951747, 44.3936471, 44.4840562, 44.5646335, 44.6425099, 44.7385767, 44.8370135, 44.9302138, 44.9986146, 45.0583549, 45.1283911, 45.2063835, 45.2980068, 45.3897017, 45.476138, 45.5632485, 45.6450189, 45.7374593, 45.8283721, 45.9132976, 45.9819705, 46.0407484, 46.1067084, 46.1825041, 46.2788561, 46.3713351, 46.4567207, 46.544486, 46.6310899, 46.7302231, 46.8283588, 46.9247443, 46.9969757, 47.0709148, 47.1450515, 47.2361542, 47.3413241, 47.4319364, 47.5213815, 47.6049313, 47.6837388, 47.7781381, 47.8770756, 47.9687104, 48.0348257, 48.0942021, 48.1608205, 48.2460028, 48.3438529, 48.4355405, 48.5344163, 48.6324506, 48.7293718, 48.8365414, 48.9353232, 49.0318781, 49.1013205, 49.1590844, 49.2285534, 49.3069683, 49.4017939, 49.4945263, 49.5861495, 49.6804907, 49.7602264, 49.8555805, 49.9489224, 50.0346777, 50.1018531, 50.1621723, 50.2260014, 50.2967905, 50.3831254, 50.4598772, 50.5387068, 50.6160484, 50.6865941, 50.7658362, 50.8453698, 50.918672, 50.9761148, 51.0278017, 51.084323, 51.1537928, 51.2318645, 51.306308, 51.3807849, 51.4526292, 51.5160394, 51.5985479, 51.680924, 51.7572854, 51.8133335, 51.8532385, 51.9014358, 51.9603433, 52.0328072, 52.0984957, 52.1667826, 52.2316418, 52.2938376, 52.3679897, 52.4465221, 52.5179552, 52.5751485, 52.6178012, 52.666816, 52.7340036, 52.8055792, 52.8792189, 52.9564838, 53.0444971, 53.126769, 53.2196749, 53.3024139, 53.3746645, 53.4335399, 53.4778015, 53.5299937, 53.5845392, 53.6522628, 53.7255844, 53.7882418, 53.8366625, 53.8829665, 53.9442904, 54.0042478, 54.0536342, 54.085644, 54.1084122, 54.1462942, 54.1913988, 54.2452023, 54.2957622, 54.3427024, 54.3910864, 54.4319877, 54.4897699, 54.545636, 54.597741, 54.6354962, 54.6532352, 54.677594, 54.7173643, 54.7740957, 54.8253023, 54.8712512, 54.916146, 54.9580535, 54.9997186, 55.047571, 55.0911778, 55.1132386, 55.132774, 55.1532423, 55.1898003, 55.2415531, 55.283803, 55.3222105, 55.3612676, 55.406262, 55.4628719, 55.5110909, 55.5523777, 55.5811877, 55.6004372, 55.626202, 55.6656271, 55.7167999, 55.7698097, 55.8196609, 55.8615028, 55.9129883, 55.9663474, 56.0220102, 56.0700015, 56.0939035, 56.110463, 56.1313736, 56.1610839, 56.2068432, 56.2582503, 56.3000349, 56.339902, 56.3789995, 56.4282839, 56.4803947, 56.5352164, 56.5697487, 56.5983102, 56.6328326, 56.6738814, 56.7332116, 56.7971596, 56.8552701, 56.9111378, 56.9754725, 57.0470772, 57.1136128, 57.173831, 57.2226068, 57.259731, 57.3072742, 57.3643368, 57.4334281, 57.5015747, 57.5653127, 57.6333396, 57.6972844, 57.7710774, 57.8407427, 57.9057801, 57.9575663, 57.9974929, 58.0425517, 58.1043319, 58.1679128, 58.2389092, 58.3091659, 58.3833021, 58.4536748, 58.5401438, 58.6227714, 58.6916662, 58.7409628, 58.7836189, 58.8405543, 58.898579, 58.9713678, 59.043837, 59.1218414, 59.2002687, 59.274737, 59.3574134, 59.4433827, 59.5242416, 59.5849787, 59.6343497, 59.6927827, 59.758805, 59.8386448, 59.9110567, 59.9844537, 60.056435, 60.123065, 60.2042185, 60.2803745, 60.3530352, 60.4011891, 60.4439959, 60.4900257, 60.5578054, 60.6324446, 60.7058569, 60.7853482, 60.8663504, 60.9386672, 61.0276757, 61.1103448, 61.1870458, 61.2453891, 61.2881024, 61.3377799, 61.4036165, 61.4760366, 61.5524599, 61.6286593, 61.6845819, 61.743306, 61.8132425, 61.8823203, 61.9496762, 61.9968743, 62.0342938, 62.0714108, 62.1202315, 62.1809508, 62.2382046, 62.2950486, 62.3506479, 62.3995381, 62.475395, 62.5463091, 62.6136031, 62.6570739, 62.6941742, 62.7383271, 62.7926305, 62.8566986, 62.9145607, 62.9658689, 63.0216632, 63.0807052, 63.1461718, 63.2052946, 63.2599441, 63.2844088, 63.2961369, 63.3126092, 63.3421622, 63.3871303, 63.4339302, 63.4673369, 63.4978642, 63.5319327, 63.5679441, 63.6104432, 63.6444291, 63.6641815, 63.6739403, 63.692603, 63.7147066, 63.7518055, 63.792717, 63.8285221, 63.8556871, 63.8803854, 63.9075025, 63.9392787, 63.9690744, 63.9798604, 63.9833077, 63.9938011, 64.0093384, 64.0399621, 64.0670429, 64.0907881, 64.1068077, 64.1282125, 64.1584211, 64.1832722, 64.2093975, 64.2116628, 64.2073173, 64.2115565, 64.2222858, 64.2499625, 64.2760973, 64.2998037, 64.3191858, 64.345013, 64.3734584, 64.3943291, 64.4151156, 64.4132064, 64.4118464, 64.4096536, 64.4167832, 64.43292, 64.4510529, 64.4734276, 64.4893377, 64.5053342, 64.5269189, 64.5470942, 64.5596729, 64.5512293, 64.5370906, 64.5359472, 64.5414947, 64.5543634, 64.5654298, 64.5736111, 64.5891142, 64.6014759, 64.6176147, 64.6374397, 64.6548674, 64.6530021, 64.6379271, 64.637161, 64.6399614, 64.6543152, 64.6723164, 64.6876311, 64.7051905, 64.7313433, 64.7575312, 64.7811143, 64.8000929, 64.7994561, 64.7876424, 64.783095, 64.7920604, 64.8096421, 64.8310888, 64.8451826, 64.8597013, 64.8849929, 64.9174991, 64.9480298, 64.9793881, 64.9894772, 65.0028155, 65.0138193, 65.0371432, 65.0772597, 65.112197, 65.1464034, 65.1832638, 65.2145358, 65.2493713, 65.2920645, 65.3279403, 65.3413366, 65.3451881, 65.34964, 65.3711307, 65.3971998, 65.4295547, 65.4573487, 65.486752, 65.5152012, 65.5449916, 65.5780768, 65.612728, 65.6287505, 65.6370091, 65.6493375, 65.6759928, 65.7096966, 65.746092, 65.7768362, 65.8024614, 65.8236695, 65.8595036, 65.8973008, 65.932291, 65.950911, 65.9534105, 65.962833, 65.9838647, 66.0146733, 66.042049, 66.0699217, 66.0961343, 66.1310116, 66.1682713, 66.2071627, 66.2355846, 66.2408549, 66.2335423, 66.2349107, 66.2441095, 66.2751123, 66.3054334, 66.3245568, 66.3405713, 66.3624433, 66.3957101, 66.428903, 66.4618675, 66.4748837, 66.4751281, 66.4828678, 66.5056165, 66.5382912, 66.5705628, 66.6030198, 66.6339689, 66.6569117, 66.6925011, 66.7288729, 66.7578719, 66.7707625, 66.7740427, 66.7846288, 66.810324, 66.840048, 66.8778601, 66.9069091, 66.944259, 66.9762508, 67.0258126, 67.0716286, 67.1100184, 67.1266401, 67.1331391, 67.145797, 67.17174, 67.2091069, 67.2459812, 67.2810383, 67.3136452, 67.3456968, 67.389003, 67.4318433, 67.4666209, 67.4858459, 67.4989147, 67.5110936, 67.5352658, 67.571103, 67.6070253, 67.6439167, 67.6765272, 67.7116693, 67.7590634, 67.8011542, 67.840213, 67.8606318, 67.8821576, 67.9120101, 67.9546462, 68.0054839, 68.051412, 68.1024205, 68.1577127, 68.2043653, 68.2664507, 68.3188171, 68.3703564, 68.3964356, 68.4094472, 68.4304611, 68.4629791, 68.507818, 68.5537018, 68.5927179, 68.6298107, 68.6670627, 68.7135208, 68.7622755, 68.8032843, 68.8244838, 68.8373427, 68.847693, 68.8688567, 68.9005814, 68.9354999, 68.9676423, 68.9875354, 69.0175527, 69.0499081, 69.0823433, 69.1070034, 69.1134027, 69.1141898, 69.1207203, 69.1355578, 69.16459, 69.1964228, 69.2201632, 69.2451564, 69.2732758, 69.3031979, 69.3325675, 69.3540507, 69.3581722, 69.3441594, 69.3376329, 69.3377424, 69.3432191, 69.3540144, 69.3611554, 69.3751703, 69.3889904, 69.4091639, 69.4264662, 69.4386335, 69.4241335, 69.3921241, 69.3693422, 69.3574782, 69.3593242, 69.3630244, 69.359334, 69.3510133, 69.3537917, 69.3582217, 69.367306, 69.3678649, 69.3514228, 69.3273414, 69.3033273, 69.2892463, 69.2880419, 69.2908014, 69.2944974, 69.2913953, 69.286149, 69.2835153, 69.2815422, 69.2806375, 69.2553511, 69.2125426, 69.1847287, 69.17207, 69.1691531, 69.173303, 69.1698064, 69.1589095, 69.1556275, 69.1672253, 69.1771384],\n    first: 1973.0849315068492,\n    firstYM: [1973, 2],\n    last: 2023.3287671232877,\n    lastYM: [2023, 5]\n  },\n  prediction: {\n    table: [67.87818, 67.96817999999999, 68.02817999999999, 68.04818, 68.12818, 68.21817999999999, 68.26818, 68.28818, 68.36818, 68.44818, 68.50818, 68.51818, 68.59818, 68.68818, 68.73818, 68.74817999999999, 68.82818, 68.91817999999999, 68.96817999999999, 68.98818, 69.06818, 69.14818, 69.20818, 69.22818, 69.30818, 69.39818, 69.46817999999999, 69.48818, 69.57818, 69.66817999999999, 69.73818, 69.75818, 69.85817999999999, 69.95818, 70.02817999999999, 70.05818, 70.15818, 70.25818, 70.33818, 70.36818, 70.46817999999999],\n    first: 2022,\n    last: 2032\n  }\n};\nexport default m;\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module deltat\n */\n/**\n * DeltaT: Chapter 10, Dynamical Time and Universal Time.\n *\n * This package uses no functions from the Chapter. Polynoms are from\n * <http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html>, data sets are from\n * <http://maia.usno.navy.mil/ser7/>\n *\n * Functions in this package compute ΔT for various ranges of dates.\n *\n * ΔT = TD - UT1\n *\n * TD = \"Dynamical Time\", which is related to:\n *   ET \"Ephermis Time\", an older term.\n *   TDB \"Barycentric Dynamical Time\", very close to TD.\n *   TDT \"Terrestrial Dynamical Time\", a more correct term.\n *   TT \"Terrestrial Time\", a newer and more correct term.\n *\n * UT = \"Universal Time\", which is related (if ambiguously) to GMT \"Greenwich\n * Mean Time\".\n *\n * Terrestrial Time is effectively equal to International Atomic Time (TAI)\n * plus 32.184 seconds exactly: TT = TAI + 32.184\n * The epoch designated \"J2000.0\" is specified as Julian date 2451545.0 TT,\n * or 2000 January 1, 12h TT. This epoch can also be expressed as\n * 2000 January 1, 11:59:27.816 TAI or 2000 January 1, 11:58:55.816 UTC.\n */\n\nimport base from './base.js'\nimport interp from './interpolation.js'\nimport deltat from '../data/deltat.js'\n\n// avoids ciclic import { LeapYearGregorian } from './julian.js'\nfunction LeapYearGregorian (y) {\n  return (y % 4 === 0 && y % 100 !== 0) || y % 400 === 0\n}\n\n/**\n * deltaT returns the difference ΔT = TD - UT between Dynamical Time TD and\n * Univeral Time (GMT+12) in seconds\n *\n * Polynoms are from <http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html>\n * and <http://www.staff.science.uu.nl/~gent0113/deltat/deltat_old.htm>\n *\n * @param {Number} dyear - decimal year\n * @returns {Number} ΔT in seconds.\n */\nexport function deltaT (dyear) {\n  let ΔT\n  if (dyear < -500) {\n    ΔT = base.horner((dyear - 1820) * 0.01, -20, 0, 32)\n  } else if (dyear < 500) {\n    ΔT = base.horner(dyear * 0.01,\n      10583.6, -1014.41, 33.78311, -5.952053, -0.1798452, 0.022174192, 0.0090316521\n    )\n  } else if (dyear < 1600) {\n    ΔT = base.horner((dyear - 1000) * 0.01,\n      1574.2, -556.01, 71.23472, 0.319781, -0.8503463, -0.005050998, 0.0083572073\n    )\n  } else if (dyear < deltat.historic.first) {\n    ΔT = base.horner((dyear - 1600), 120, -0.9808, -0.01532, 1 / 7129)\n  } else if (dyear < deltat.data.first) {\n    ΔT = interpolate(dyear, deltat.historic)\n  } else if (dyear < deltat.data.last - 0.25) { // -0.25 ~= do not consider last 3 months in dataset\n    ΔT = interpolateData(dyear, deltat.data)\n  } else if (dyear < deltat.prediction.last) {\n    ΔT = interpolate(dyear, deltat.prediction)\n  } else if (dyear < 2050) {\n    ΔT = base.horner((dyear - 2000) / 100, 62.92, 32.217, 55.89)\n  } else if (dyear < 2150) {\n    ΔT = base.horner((dyear - 1820) / 100, -205.72, 56.28, 32)\n  } else {\n    const u = (dyear - 1820) / 100\n    ΔT = -20 + 32 * u * u\n  }\n  return ΔT\n}\n\n/**\n * interpolation of dataset\n * @private\n * @param {Number} dyear - julian year\n * @returns {Number} ΔT in seconds.\n */\nfunction interpolate (dyear, data) {\n  const d3 = interp.len3ForInterpolateX(dyear,\n    data.first, data.last, data.table\n  )\n  return d3.interpolateX(dyear)\n}\n\n/**\n * interpolation of dataset from finals2000A with is one entry per month\n * linear interpolation over whole dataset is inaccurate as points per month\n * are not equidistant. Therefore points are approximated using 2nd diff. interpolation\n * from current month using the following two points\n *\n * @private\n * @param {Number} dyear - julian year\n * @returns {Number} ΔT in seconds.\n */\nfunction interpolateData (dyear, data) {\n  const [fyear, fmonth] = data.firstYM\n  const { year, month, first, last } = monthOfYear(dyear)\n  const pos = 12 * (year - fyear) + (month - fmonth)\n  const table = data.table.slice(pos, pos + 3)\n  const d3 = new interp.Len3(first, last, table)\n  return d3.interpolateX(dyear)\n}\n\n/**\n * Get month of Year from fraction. Fraction differs at leap years.\n * @private\n * @param {Number} dyear - decimal year\n * @return {Object} `{year: Number, month: Number, first: Number, last}`\n */\nfunction monthOfYear (dyear) {\n  // if (!monthOfYear.data) { // memoize yearly fractions per month\n  //   monthOfYear.data = { 0: [], 1: [] }\n  //   for (let m = 0; m <= 12; m++) {\n  //     monthOfYear.data[0][m] = new Calendar(1999, m, 1).toYear() - 1999 // non leap year\n  //     monthOfYear.data[1][m] = new Calendar(2000, m, 1).toYear() - 2000 // leap year\n  //   }\n  // }\n  // console.log(monthOfYear)\n  const year = dyear | 0\n  const f = dyear - year\n  const d = LeapYearGregorian(year) ? 1 : 0\n  const data = monthOfYear.data[d]\n\n  let month = 12 // TODO loop could be improved\n  while (month > 0 && data[month] > f) {\n    month--\n  }\n  const first = year + data[month]\n  const last = month < 11 ? year + data[month + 2] : year + 1 + data[(month + 2) % 12]\n  return { year, month, first, last }\n}\n/**\n  monthOfYear.data[0][m] = new Calendar(1999, m, 1).toYear() - 1999 // non leap year\n  monthOfYear.data[1][m] = new Calendar(2000, m, 1).toYear() - 2000 // leap year\n */\nmonthOfYear.data = [\n  [ // non leap year\n    0,\n    0,\n    0.08493150684921602,\n    0.16164383561635987,\n    0.24657534246580326,\n    0.3287671232876619,\n    0.4136986301368779,\n    0.4958904109589639,\n    0.5808219178081799,\n    0.6657534246576233,\n    0.747945205479482,\n    0.832876712328698,\n    0.915068493150784\n  ],\n  [ // leap year\n    0,\n    0,\n    0.08743169398917416,\n    0.1639344262296163,\n    0.24863387978143692,\n    0.3306010928961314,\n    0.4153005464481794,\n    0.49726775956287383,\n    0.5819672131146945,\n    0.6666666666667425,\n    0.7486338797814369,\n    0.8333333333332575,\n    0.9153005464481794\n  ]\n]\n\nexport default {\n  deltaT\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module iterate\n */\n/**\n * Iterate: Chapter 5, Iteration.\n *\n * This package is best considered illustrative.  While the functions are\n * usable, they are minimal in showing the points of the chapter text.  More\n * robust functions would handle more cases of overflow, loss of precision,\n * and divergence.\n */\n\n/**\n * decimalPlaces iterates to a fixed number of decimal places.\n *\n * Inputs are an improvement function, a starting value, the number of\n * decimal places desired in the result, and an iteration limit.\n *\n * @throws Error\n * @param {Function} better\n * @param {Number} start - (float)\n * @param {Number} places - (int)\n * @param {Number} maxIterations - (int)\n * @returns {Number}\n */\nexport function decimalPlaces (better, start, places, maxIterations) {\n  const d = Math.pow(10, -places)\n  for (let i = 0; i < maxIterations; i++) {\n    const n = better(start)\n    if (Math.abs(n - start) < d) {\n      return n\n    }\n    start = n\n  }\n  throw new Error('Maximum iterations reached')\n}\n\n/**\n * fullPrecison iterates to (nearly) the full precision of a float64.\n *\n * To allow for a little bit of floating point jitter, FullPrecision iterates\n * to 15 significant figures, which is the maximum number of full significant\n * figures representable in a float64, but still a couple of bits shy of the\n * full representable precision.\n *\n * @throws Error\n * @param {Function} better\n * @param {Number} start - (float)\n * @param {Number} maxIterations - (int)\n * @returns {Number}\n */\nexport function fullPrecision (better, start, maxIterations) {\n  for (let i = 0; i < maxIterations; i++) {\n    const n = better(start)\n    if (Math.abs((n - start) / n) < 1e-15) {\n      return n\n    }\n    start = n\n  }\n  throw new Error('Maximum iterations reached')\n}\n\n/**\n * binaryRoot finds a root between given bounds by binary search.\n *\n * Inputs are a function on x and the bounds on x.  A root must exist between\n * the given bounds, otherwise the result is not meaningful.\n *\n * @param {Function} f - root function\n * @param {Number} lower - (float)\n * @param {Number} upper - (float)\n * @returns {Number}\n */\nexport function binaryRoot (f, lower, upper) {\n  let yLower = f(lower)\n  let mid = 0\n  for (let j = 0; j < 52; j++) {\n    mid = (lower + upper) / 2\n    const yMid = f(mid)\n    if (yMid === 0) {\n      break\n    }\n    if (signbit(yLower) === signbit(yMid)) {\n      lower = mid\n      yLower = yMid\n    } else {\n      upper = mid\n    }\n  }\n  return mid\n}\n\nfunction signbit (v) {\n  return (v < 0)\n}\n\nexport default {\n  decimalPlaces,\n  fullPrecision,\n  binaryRoot\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module kepler\n */\n/**\n * Kepler: Chapter 30, Equation of Kepler.\n */\n\nimport base from './base.js'\nimport iterate from './iterate.js'\n\n/**\n * True returns true anomaly ν for given eccentric anomaly E.\n *\n * @param {number} e - eccentricity\n * @param {number} E - eccentric anomaly in radians.\n * @return true anomaly ν in radians.\n */\nexport function trueAnomaly (E, e) {\n  // (30.1) p. 195\n  return 2 * Math.atan(Math.sqrt((1 + e) / (1 - e)) * Math.tan(E * 0.5))\n}\n\n/**\n * Radius returns radius distance r for given eccentric anomaly E.\n *\n * Result unit is the unit of semimajor axis a (typically AU.)\n *\n * @param {number} e - eccentricity\n * @param {number} E - eccentric anomaly in radians\n * @param {number} a - semimajor axis\n * @return {number} radius distance in unit of `a`\n */\nexport function radius (E, e, a) { // (E, e, a float64)  float64\n  // (30.2) p. 195\n  return a * (1 - e * Math.cos(E))\n}\n\n/**\n * Kepler1 solves Kepler's equation by iteration.\n *\n * The iterated formula is\n *\n *  E1 = m + e * sin(E0)\n *\n * For some vaues of e and M it will fail to converge and the\n * function will return an error.\n *\n * @throws Error\n * @param {number} e - eccentricity\n * @param {number} m - mean anomaly in radians\n * @param {number} places - (int) desired number of decimal places in the result\n * @return {number} eccentric anomaly `E` in radians.\n */\nexport function kepler1 (e, m, places) {\n  const f = function (E0) {\n    return m + e * Math.sin(E0) // (30.5) p. 195\n  }\n  return iterate.decimalPlaces(f, m, places, places * 5)\n}\n\n/**\n * Kepler2 solves Kepler's equation by iteration.\n *\n * The iterated formula is\n *\n *  E1 = E0 + (m + e * sin(E0) - E0) / (1 - e * cos(E0))\n *\n * The function converges over a wider range of inputs than does Kepler1\n * but it also fails to converge for some values of e and M.\n *\n * @throws Error\n * @param {number} e - eccentricity\n * @param {number} m - mean anomaly in radians\n * @param {number} places - (int) desired number of decimal places in the result\n * @return {number} eccentric anomaly `E` in radians.\n */\nexport function kepler2 (e, m, places) { // (e, M float64, places int)  (E float64, err error)\n  const f = function (E0) {\n    const [se, ce] = base.sincos(E0)\n    return E0 + (m + e * se - E0) / (1 - e * ce) // (30.7) p. 199\n  }\n  return iterate.decimalPlaces(f, m, places, places)\n}\n\n/**\n * Kepler2a solves Kepler's equation by iteration.\n *\n * The iterated formula is the same as in Kepler2 but a limiting function\n * avoids divergence.\n *\n * @throws Error\n * @param {number} e - eccentricity\n * @param {number} m - mean anomaly in radians\n * @param {number} places - (int) desired number of decimal places in the result\n * @return {number} eccentric anomaly `E` in radians.\n */\nexport function kepler2a (e, m, places) { // (e, M float64, places int)  (E float64, err error)\n  const f = function (E0) {\n    const [se, ce] = base.sincos(E0)\n    // method of Leingärtner, p. 205\n    return E0 + Math.asin(Math.sin((m + e * se - E0) / (1 - e * ce)))\n  }\n  return iterate.decimalPlaces(f, m, places, places * 5)\n}\n\n/**\n * Kepler2b solves Kepler's equation by iteration.\n *\n * The iterated formula is the same as in Kepler2 but a (different) limiting\n * function avoids divergence.\n *\n * @throws Error\n * @param {number} e - eccentricity\n * @param {number} m - mean anomaly in radians\n * @param {number} places - (int) desired number of decimal places in the result\n * @return {number} eccentric anomaly `E` in radians.\n */\nexport function kepler2b (e, m, places) { // (e, M float64, places int)  (E float64, err error)\n  const f = function (E0) {\n    const [se, ce] = base.sincos(E0)\n    let d = (m + e * se - E0) / (1 - e * ce)\n    // method of Steele, p. 205\n    if (d > 0.5) {\n      d = 0.5\n    } else if (d < -0.5) {\n      d = -0.5\n    }\n    return E0 + d\n  }\n  return iterate.decimalPlaces(f, m, places, places)\n}\n\n/**\n * Kepler3 solves Kepler's equation by binary search.\n *\n * @throws Error\n * @param {number} e - eccentricity\n * @param {number} m - mean anomaly in radians\n * @return {number} eccentric anomaly `E` in radians.\n */\nexport function kepler3 (e, m) { // (e, m float64)  (E float64)\n  // adapted from BASIC, p. 206\n  m = base.pmod(m, 2 * Math.PI)\n  let f = 1\n  if (m > Math.PI) {\n    f = -1\n    m = 2 * Math.PI - m\n  }\n  let E0 = Math.PI * 0.5\n  let d = Math.PI * 0.25\n  for (let i = 0; i < 53; i++) {\n    const M1 = E0 - e * Math.sin(E0)\n    if (m - M1 < 0) {\n      E0 -= d\n    } else {\n      E0 += d\n    }\n    d *= 0.5\n  }\n  if (f < 0) {\n    return -E0\n  }\n  return E0\n}\n\n/**\n * Kepler4 returns an approximate solution to Kepler's equation.\n *\n * It is valid only for small values of e.\n *\n * @param {number} e - eccentricity\n * @param {number} m - mean anomaly in radians\n * @return {number} eccentric anomaly `E` in radians.\n */\nexport function kepler4 (e, m) { // (e, m float64)  (E float64)\n  const [sm, cm] = base.sincos(m)\n  return Math.atan2(sm, cm - e) // (30.8) p. 206\n}\n\nexport default {\n  trueAnomaly,\n  true: trueAnomaly, // BACKWARDS-COMPATIBILITY\n  radius,\n  kepler1,\n  kepler2,\n  kepler2a,\n  kepler2b,\n  kepler3,\n  kepler4\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module solarxyz\n */\n/**\n * Solarxyz: Chapter 26, Rectangular Coordinates of the Sun.\n */\nimport base from './base.js'\nimport nutation from './nutation.js'\nimport solar from './solar.js'\n\n/**\n * Position returns rectangular coordinates referenced to the mean equinox of date.\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\n * @param {Number} jde - Julian ephemeris day\n * @return {object} rectangular coordinates\n *   {Number} x\n *   {Number} y\n *   {Number} z\n */\nexport function position (earth, jde) { // (e *pp.V87Planet, jde float64)  (x, y, z float64)\n  // (26.1) p. 171\n  const { lon, lat, range } = solar.trueVSOP87(earth, jde)\n  const [sε, cε] = base.sincos(nutation.meanObliquity(jde))\n  const [ss, cs] = base.sincos(lon)\n  const sβ = Math.sin(lat)\n  const x = range * cs\n  const y = range * (ss * cε - sβ * sε)\n  const z = range * (ss * sε + sβ * cε)\n  return { x, y, z }\n}\n\n/**\n * LongitudeJ2000 returns geometric longitude referenced to equinox J2000.\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\n * @param {Number} jde - Julian ephemeris day\n * @return {Number} geometric longitude referenced to equinox J2000.\n */\nexport function longitudeJ2000 (earth, jde) {\n  const lon = earth.position2000(jde).lon\n  return base.pmod(lon + Math.PI - 0.09033 / 3600 * Math.PI / 180, 2 * Math.PI)\n}\n\n/**\n * PositionJ2000 returns rectangular coordinates referenced to equinox J2000.\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\n * @param {Number} jde - Julian ephemeris day\n * @return {object} rectangular coordinates\n *   {Number} x\n *   {Number} y\n *   {Number} z\n */\nexport function positionJ2000 (earth, jde) {\n  const { x, y, z } = xyz(earth, jde)\n  // (26.3) p. 174\n  return {\n    x: x + 0.00000044036 * y - 0.000000190919 * z,\n    y: -0.000000479966 * x + 0.917482137087 * y - 0.397776982902 * z,\n    z: 0.397776982902 * y + 0.917482137087 * z\n  }\n}\n\nexport function xyz (earth, jde) {\n  const { lon, lat, range } = earth.position2000(jde)\n  const s = lon + Math.PI\n  const β = -lat\n  const [ss, cs] = base.sincos(s)\n  const [sβ, cβ] = base.sincos(β)\n  // (26.2) p. 172\n  const x = range * cβ * cs\n  const y = range * cβ * ss\n  const z = range * sβ\n  return { x, y, z }\n}\n\n/**\n * PositionB1950 returns rectangular coordinates referenced to B1950.\n *\n * Results are referenced to the mean equator and equinox of the epoch B1950\n * in the FK5 system, not FK4.\n *\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\n * @param {Number} jde - Julian ephemeris day\n * @return {object} rectangular coordinates\n *   {Number} x\n *   {Number} y\n *   {Number} z\n */\nexport function positionB1950 (earth, jde) { // (e *pp.V87Planet, jde float64)  (x, y, z float64)\n  const { x, y, z } = xyz(earth, jde)\n  return {\n    x: 0.999925702634 * x + 0.012189716217 * y + 0.000011134016 * z,\n    y: -0.011179418036 * x + 0.917413998946 * y - 0.397777041885 * z,\n    z: -0.004859003787 * x + 0.397747363646 * y + 0.917482111428 * z\n  }\n}\n\nconst ζt = [2306.2181, 0.30188, 0.017998]\nconst zt = [2306.2181, 1.09468, 0.018203]\nconst θt = [2004.3109, -0.42665, -0.041833]\n\n/**\n * PositionEquinox returns rectangular coordinates referenced to an arbitrary epoch.\n *\n * Position will be computed for given Julian day \"jde\" but referenced to mean\n * equinox \"epoch\" (year).\n *\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\n * @param {Number} jde - Julian ephemeris day\n * @param {Number} epoch\n * @return {object} rectangular coordinates\n *   {Number} x\n *   {Number} y\n *   {Number} z\n */\nexport function positionEquinox (earth, jde, epoch) {\n  const xyz = positionJ2000(earth, jde)\n  const x0 = xyz.x\n  const y0 = xyz.y\n  const z0 = xyz.z\n  const t = (epoch - 2000) * 0.01\n  const ζ = base.horner(t, ζt) * t * Math.PI / 180 / 3600\n  const z = base.horner(t, zt) * t * Math.PI / 180 / 3600\n  const θ = base.horner(t, θt) * t * Math.PI / 180 / 3600\n  const [sζ, cζ] = base.sincos(ζ)\n  const [sz, cz] = base.sincos(z)\n  const [sθ, cθ] = base.sincos(θ)\n  const xx = cζ * cz * cθ - sζ * sz\n  const xy = sζ * cz + cζ * sz * cθ\n  const xz = cζ * sθ\n  const yx = -cζ * sz - sζ * cz * cθ\n  const yy = cζ * cz - sζ * sz * cθ\n  const yz = -sζ * sθ\n  const zx = -cz * sθ\n  const zy = -sz * sθ\n  const zz = cθ\n  return {\n    x: xx * x0 + yx * y0 + zx * z0,\n    y: xy * x0 + yy * y0 + zy * z0,\n    z: xz * x0 + yz * y0 + zz * z0\n  }\n}\n\nexport default {\n  position,\n  longitudeJ2000,\n  positionJ2000,\n  xyz,\n  positionB1950,\n  positionEquinox\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module elliptic\n */\n/**\n * Elliptic: Chapter 33, Elliptic Motion.\n *\n * Partial: Various formulas and algorithms are unimplemented for lack of\n * examples or test cases.\n */\nimport apparent from './apparent.js'\nimport base from './base.js'\nimport coord from './coord.js'\nimport kepler from './kepler.js'\nimport nutation from './nutation.js'\nimport planetposition from './planetposition.js'\nimport solarxyz from './solarxyz.js'\n\n/**\n * Position returns observed equatorial coordinates of a planet at a given time.\n *\n * Argument p must be a valid V87Planet object for the observed planet.\n * Argument earth must be a valid V87Planet object for Earth.\n *\n * Results are right ascension and declination, α and δ in radians.\n */\nexport function position (planet, earth, jde) { // (p, earth *pp.V87Planet, jde float64)  (α, δ float64)\n  let x = 0\n  let y = 0\n  let z = 0\n  const posEarth = earth.position(jde)\n  const [L0, B0, R0] = [posEarth.lon, posEarth.lat, posEarth.range]\n  const [sB0, cB0] = base.sincos(B0)\n  const [sL0, cL0] = base.sincos(L0)\n\n  function pos (τ = 0) {\n    const pos = planet.position(jde - τ)\n    const [L, B, R] = [pos.lon, pos.lat, pos.range]\n    const [sB, cB] = base.sincos(B)\n    const [sL, cL] = base.sincos(L)\n    x = R * cB * cL - R0 * cB0 * cL0\n    y = R * cB * sL - R0 * cB0 * sL0\n    z = R * sB - R0 * sB0\n  }\n\n  pos()\n  const Δ = Math.sqrt(x * x + y * y + z * z) // (33.4) p. 224\n  const τ = base.lightTime(Δ)\n  // repeating with jde-τ\n  pos(τ)\n\n  let λ = Math.atan2(y, x) // (33.1) p. 223\n  let β = Math.atan2(z, Math.hypot(x, y)) // (33.2) p. 223\n  const [Δλ, Δβ] = apparent.eclipticAberration(λ, β, jde)\n  const fk5 = planetposition.toFK5(λ + Δλ, β + Δβ, jde)\n  λ = fk5.lon\n  β = fk5.lat\n  const [Δψ, Δε] = nutation.nutation(jde)\n  λ += Δψ\n  const ε = nutation.meanObliquity(jde) + Δε\n  return new coord.Ecliptic(λ, β).toEquatorial(ε)\n  // Meeus gives a formula for elongation but doesn't spell out how to\n  // obtaion term λ0 and doesn't give an example solution.\n}\n\n/**\n * Elements holds keplerian elements.\n */\nexport class Elements {\n  /*\n  Axis  float64 // Semimajor axis, a, in AU\n  Ecc   float64 // Eccentricity, e\n  Inc   float64 // Inclination, i, in radians\n  ArgP  float64 // Argument of perihelion, ω, in radians\n  Node  float64 // Longitude of ascending node, Ω, in radians\n  TimeP float64 // Time of perihelion, T, as jde\n  */\n  constructor (axis, ecc, inc, argP, node, timeP) {\n    let o = {}\n    if (typeof axis === 'object') {\n      o = axis\n    }\n    this.axis = o.axis || axis\n    this.ecc = o.ecc || ecc\n    this.inc = o.inc || inc\n    this.argP = o.argP || argP\n    this.node = o.node || node\n    this.timeP = o.timeP || timeP\n  }\n\n  /**\n   * Position returns observed equatorial coordinates of a body with Keplerian elements.\n   *\n   * Argument e must be a valid V87Planet object for Earth.\n   *\n   * Results are right ascension and declination α and δ, and elongation ψ,\n   * all in radians.\n   */\n  position (jde, earth) { // (α, δ, ψ float64) {\n    // (33.6) p. 227\n    const n = base.K / this.axis / Math.sqrt(this.axis)\n    const sε = base.SOblJ2000\n    const cε = base.COblJ2000\n    const [sΩ, cΩ] = base.sincos(this.node)\n    const [si, ci] = base.sincos(this.inc)\n    // (33.7) p. 228\n    const F = cΩ\n    const G = sΩ * cε\n    const H = sΩ * sε\n    const P = -sΩ * ci\n    const Q = cΩ * ci * cε - si * sε\n    const R = cΩ * ci * sε + si * cε\n    // (33.8) p. 229\n    const A = Math.atan2(F, P)\n    const B = Math.atan2(G, Q)\n    const C = Math.atan2(H, R)\n    const a = Math.hypot(F, P)\n    const b = Math.hypot(G, Q)\n    const c = Math.hypot(H, R)\n\n    const f = (jde) => { // (x, y, z float64) {\n      const M = n * (jde - this.timeP)\n      let E\n      try {\n        E = kepler.kepler2b(this.ecc, M, 15)\n      } catch (e) {\n        E = kepler.kepler3(this.ecc, M)\n      }\n      const ν = kepler.trueAnomaly(E, this.ecc)\n      const r = kepler.radius(E, this.ecc, this.axis)\n      // (33.9) p. 229\n      const x = r * a * Math.sin(A + this.argP + ν)\n      const y = r * b * Math.sin(B + this.argP + ν)\n      const z = r * c * Math.sin(C + this.argP + ν)\n      return { x, y, z }\n    }\n    return astrometricJ2000(f, jde, earth)\n  }\n}\n\n/**\n * AstrometricJ2000 is a utility function for computing astrometric coordinates.\n *\n * It is used internally and only exported so that it can be used from\n * multiple packages.  It is not otherwise expected to be used.\n *\n * Argument f is a function that returns J2000 equatorial rectangular\n * coodinates of a body.\n *\n * Results are J2000 right ascention, declination, and elongation.\n */\nexport function astrometricJ2000 (f, jde, earth) { // (f func(float64)  (x, y, z float64), jde float64, e *pp.V87Planet) (α, δ, ψ float64)\n  const sol = solarxyz.positionJ2000(earth, jde)\n  const [X, Y, Z] = [sol.x, sol.y, sol.z]\n  let ξ = 0\n  let η = 0\n  let ζ = 0\n  let Δ = 0\n\n  function fn (τ = 0) {\n    // (33.10) p. 229\n    const { x, y, z } = f(jde - τ)\n    ξ = X + x\n    η = Y + y\n    ζ = Z + z\n    Δ = Math.sqrt(ξ * ξ + η * η + ζ * ζ)\n  }\n\n  fn()\n  const τ = base.lightTime(Δ)\n  fn(τ)\n\n  let α = Math.atan2(η, ξ)\n  if (α < 0) {\n    α += 2 * Math.PI\n  }\n  const δ = Math.asin(ζ / Δ)\n  const R0 = Math.sqrt(X * X + Y * Y + Z * Z)\n  const ψ = Math.acos((ξ * X + η * Y + ζ * Z) / R0 / Δ)\n  return new base.Coord(α, δ, undefined, ψ)\n}\n\n/**\n * Velocity returns instantaneous velocity of a body in elliptical orbit around the Sun.\n *\n * Argument a is the semimajor axis of the body, r is the instaneous distance\n * to the Sun, both in AU.\n *\n * Result is in Km/sec.\n */\nexport function velocity (a, r) { // (a, r float64)  float64\n  return 42.1219 * Math.sqrt(1 / r - 0.5 / a)\n}\n\n/**\n * Velocity returns the velocity of a body at aphelion.\n *\n * Argument a is the semimajor axis of the body in AU, e is eccentricity.\n *\n * Result is in Km/sec.\n */\nexport function vAphelion (a, e) { // (a, e float64)  float64\n  return 29.7847 * Math.sqrt((1 - e) / (1 + e) / a)\n}\n\n/**\n * Velocity returns the velocity of a body at perihelion.\n *\n * Argument a is the semimajor axis of the body in AU, e is eccentricity.\n *\n * Result is in Km/sec.\n */\nexport function vPerihelion (a, e) { // (a, e float64)  float64\n  return 29.7847 * Math.sqrt((1 + e) / (1 - e) / a)\n}\n\n/**\n * Length1 returns Ramanujan's approximation for the length of an elliptical\n * orbit.\n *\n * Argument a is semimajor axis, e is eccentricity.\n *\n * Result is in units used for semimajor axis, typically AU.\n */\nexport function length1 (a, e) { // (a, e float64)  float64\n  const b = a * Math.sqrt(1 - e * e)\n  return Math.PI * (3 * (a + b) - Math.sqrt((a + 3 * b) * (3 * a + b)))\n}\n\n/**\n * Length2 returns an alternate approximation for the length of an elliptical\n * orbit.\n *\n * Argument a is semimajor axis, e is eccentricity.\n *\n * Result is in units used for semimajor axis, typically AU.\n */\nexport function length2 (a, e) { // (a, e float64)  float64\n  const b = a * Math.sqrt(1 - e * e)\n  const s = a + b\n  const p = a * b\n  const A = s * 0.5\n  const G = Math.sqrt(p)\n  const H = 2 * p / s\n  return Math.PI * (21 * A - 2 * G - 3 * H) * 0.125\n}\n\n/**\n * Length3 returns the length of an elliptical orbit.\n *\n * Argument a is semimajor axis, e is eccentricity.\n *\n * Result is exact, and in units used for semimajor axis, typically AU.\n */\n/* As Meeus notes, Length4 converges faster.  There is no reason to use\nthis function\nexport function length3 (a, e) { // (a, e float64)  float64\n  const sum0 = 1.0\n  const e2 = e * e\n  const term = e2 * 0.25\n  const sum1 = 1.0 - term\n  const nf = 1.0\n  const df = 2.0\n  while (sum1 !== sum0) {\n    term *= nf\n    nf += 2\n    df += 2\n    term *= nf * e2 / (df * df)\n    sum0 = sum1\n    sum1 -= term\n  }\n  return 2 * Math.PI * a * sum0\n} */\n\n/**\n * Length4 returns the length of an elliptical orbit.\n *\n * Argument a is semimajor axis, e is eccentricity.\n *\n * Result is exact, and in units used for semimajor axis, typically AU.\n */\nexport function length4 (a, e) { // (a, e float64)  float64\n  const b = a * Math.sqrt(1 - e * e)\n  const m = (a - b) / (a + b)\n  const m2 = m * m\n  let sum0 = 1.0\n  let term = m2 * 0.25\n  let sum1 = 1.0 + term\n  let nf = -1.0\n  let df = 2.0\n  while (sum1 !== sum0) {\n    nf += 2\n    df += 2\n    term *= nf * nf * m2 / (df * df)\n    sum0 = sum1\n    sum1 += term\n  }\n  return 2 * Math.PI * a * sum0 / (1 + m)\n}\n\nexport default {\n  position,\n  Elements,\n  astrometricJ2000,\n  velocity,\n  vAphelion,\n  vPerihelion,\n  length1,\n  length2,\n  // length3,\n  length4\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module moonphase\n */\n/**\n * Moonphase: Chapter 49, Phases of the Moon\n */\n\nimport base from './base.js'\n\nconst { sin, cos } = Math\nconst ck = 1 / 1236.85\nconst D2R = Math.PI / 180\n\n/**\n * mean synodial lunar month\n */\nexport const meanLunarMonth = 29.530588861\n\n// (49.1) p. 349\nfunction mean (T) {\n  return base.horner(T, 2451550.09766, 29.530588861 / ck,\n    0.00015437, -0.00000015, 0.00000000073)\n}\n\n/** snap returns k at specified quarter q nearest year y. */\nfunction snap (y, q) {\n  const k = (y - 2000) * 12.3685 // (49.2) p. 350\n  return Math.floor(k - q + 0.5) + q\n}\n\n/**\n * MeanNew returns the jde of the mean New Moon nearest the given datthis.\n * The mean date is within 0.5 day of the true date of New Moon.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function meanNew (year) {\n  return mean(snap(year, 0) * ck)\n}\n\n/**\n * MeanFirst returns the jde of the mean First Quarter Moon nearest the given datthis.\n * The mean date is within 0.5 day of the true date of First Quarter Moon.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function meanFirst (year) {\n  return mean(snap(year, 0.25) * ck)\n}\n\n/**\n * MeanFull returns the jde of the mean Full Moon nearest the given datthis.\n * The mean date is within 0.5 day of the true date of Full Moon.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function meanFull (year) {\n  return mean(snap(year, 0.5) * ck)\n}\n\n/**\n * MeanLast returns the jde of the mean Last Quarter Moon nearest the given datthis.\n * The mean date is within 0.5 day of the true date of Last Quarter Moon.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function meanLast (year) {\n  return mean(snap(year, 0.75) * ck)\n}\n\n/**\n * New returns the jde of New Moon nearest the given date.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function newMoon (year) {\n  const m = new Mp(year, 0)\n  return mean(m.T) + m.nfc(nc) + m.a()\n}\n\n/**\n * First returns the jde of First Quarter Moon nearest the given datthis.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function first (year) {\n  const m = new Mp(year, 0.25)\n  return mean(m.T) + m.flc() + m.w() + m.a()\n}\n\n/**\n * Full returns the jde of Full Moon nearest the given datthis.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function full (year) {\n  const m = new Mp(year, 0.5)\n  return mean(m.T) + m.nfc(fc) + m.a()\n}\n\n/**\n * Last returns the jde of Last Quarter Moon nearest the given datthis.\n *\n * @param {Number} year - decimal year\n * @returns {Number} jde\n */\nexport function last (year) {\n  const m = new Mp(year, 0.75)\n  return mean(m.T) + m.flc() - m.w() + m.a()\n}\n\nclass Mp {\n  constructor (y, q) {\n    this.A = new Array(14)\n    const k = this.k = snap(y, q)\n    const T = this.T = this.k * ck // (49.3) p. 350\n    this.E = base.horner(T, 1, -0.002516, -0.0000074)\n    this.M = base.horner(T, 2.5534 * D2R, 29.1053567 * D2R / ck,\n      -0.0000014 * D2R, -0.00000011 * D2R)\n    this.M_ = base.horner(T, 201.5643 * D2R, 385.81693528 * D2R / ck,\n      0.0107582 * D2R, 0.00001238 * D2R, -0.000000058 * D2R)\n    this.F = base.horner(T, 160.7108 * D2R, 390.67050284 * D2R / ck,\n      -0.0016118 * D2R, -0.00000227 * D2R, 0.000000011 * D2R)\n    this.Ω = base.horner(T, 124.7746 * D2R, -1.56375588 * D2R / ck,\n      0.0020672 * D2R, 0.00000215 * D2R)\n    this.A[0] = 299.7 * D2R + 0.107408 * D2R * k - 0.009173 * T * T\n    this.A[1] = 251.88 * D2R + 0.016321 * D2R * k\n    this.A[2] = 251.83 * D2R + 26.651886 * D2R * k\n    this.A[3] = 349.42 * D2R + 36.412478 * D2R * k\n    this.A[4] = 84.66 * D2R + 18.206239 * D2R * k\n    this.A[5] = 141.74 * D2R + 53.303771 * D2R * k\n    this.A[6] = 207.17 * D2R + 2.453732 * D2R * k\n    this.A[7] = 154.84 * D2R + 7.30686 * D2R * k\n    this.A[8] = 34.52 * D2R + 27.261239 * D2R * k\n    this.A[9] = 207.19 * D2R + 0.121824 * D2R * k\n    this.A[10] = 291.34 * D2R + 1.844379 * D2R * k\n    this.A[11] = 161.72 * D2R + 24.198154 * D2R * k\n    this.A[12] = 239.56 * D2R + 25.513099 * D2R * k\n    this.A[13] = 331.55 * D2R + 3.592518 * D2R * k\n  }\n\n  // new or full corrections\n  nfc (c) {\n    const { M, M_, E, F, Ω } = this\n    return c[0] * sin(M_) +\n      c[1] * sin(M) * E +\n      c[2] * sin(2 * M_) +\n      c[3] * sin(2 * F) +\n      c[4] * sin(M_ - M) * E +\n      c[5] * sin(M_ + M) * E +\n      c[6] * sin(2 * M) * E * E +\n      c[7] * sin(M_ - 2 * F) +\n      c[8] * sin(M_ + 2 * F) +\n      c[9] * sin(2 * M_ + M) * E +\n      c[10] * sin(3 * M_) +\n      c[11] * sin(M + 2 * F) * E +\n      c[12] * sin(M - 2 * F) * E +\n      c[13] * sin(2 * M_ - M) * E +\n      c[14] * sin(Ω) +\n      c[15] * sin(M_ + 2 * M) +\n      c[16] * sin(2 * (M_ - F)) +\n      c[17] * sin(3 * M) +\n      c[18] * sin(M_ + M - 2 * F) +\n      c[19] * sin(2 * (M_ + F)) +\n      c[20] * sin(M_ + M + 2 * F) +\n      c[21] * sin(M_ - M + 2 * F) +\n      c[22] * sin(M_ - M - 2 * F) +\n      c[23] * sin(3 * M_ + M) +\n      c[24] * sin(4 * M_)\n  }\n\n  // first or last corrections\n  flc () {\n    const { M, M_, E, F, Ω } = this\n    return -0.62801 * sin(M_) +\n      0.17172 * sin(M) * E +\n      -0.01183 * sin(M_ + M) * E +\n      0.00862 * sin(2 * M_) +\n      0.00804 * sin(2 * F) +\n      0.00454 * sin(M_ - M) * E +\n      0.00204 * sin(2 * M) * E * E +\n      -0.0018 * sin(M_ - 2 * F) +\n      -0.0007 * sin(M_ + 2 * F) +\n      -0.0004 * sin(3 * M_) +\n      -0.00034 * sin(2 * M_ - M) * E +\n      0.00032 * sin(M + 2 * F) * E +\n      0.00032 * sin(M - 2 * F) * E +\n      -0.00028 * sin(M_ + 2 * M) * E * E +\n      0.00027 * sin(2 * M_ + M) * E +\n      -0.00017 * sin(Ω) +\n      -0.00005 * sin(M_ - M - 2 * F) +\n      0.00004 * sin(2 * M_ + 2 * F) +\n      -0.00004 * sin(M_ + M + 2 * F) +\n      0.00004 * sin(M_ - 2 * M) +\n      0.00003 * sin(M_ + M - 2 * F) +\n      0.00003 * sin(3 * M) +\n      0.00002 * sin(2 * M_ - 2 * F) +\n      0.00002 * sin(M_ - M + 2 * F) +\n      -0.00002 * sin(3 * M_ + M)\n  }\n\n  w () {\n    const { M, M_, E, F } = this\n    return 0.00306 -\n      0.00038 * E * cos(M) +\n      0.00026 * cos(M_) -\n      0.00002 * (cos(M_ - M) -\n        cos(M_ + M) -\n        cos(2 * F)\n      )\n  }\n\n  // additional corrections\n  a () {\n    let a = 0\n    ac.forEach((c, i) => {\n      a += c * sin(this.A[i])\n    })\n    return a\n  }\n}\n\n// new coefficients\nconst nc = [\n  -0.4072, 0.17241, 0.01608, 0.01039, 0.00739,\n  -0.00514, 0.00208, -0.00111, -0.00057, 0.00056,\n  -0.00042, 0.00042, 0.00038, -0.00024, -0.00017,\n  -0.00007, 0.00004, 0.00004, 0.00003, 0.00003,\n  -0.00003, 0.00003, -0.00002, -0.00002, 0.00002\n]\n\n// full coefficients\nconst fc = [\n  -0.40614, 0.17302, 0.01614, 0.01043, 0.00734,\n  -0.00515, 0.00209, -0.00111, -0.00057, 0.00056,\n  -0.00042, 0.00042, 0.00038, -0.00024, -0.00017,\n  -0.00007, 0.00004, 0.00004, 0.00003, 0.00003,\n  -0.00003, 0.00003, -0.00002, -0.00002, 0.00002\n]\n\n// additional corrections\nconst ac = [\n  0.000325, 0.000165, 0.000164, 0.000126, 0.00011,\n  0.000062, 0.00006, 0.000056, 0.000047, 0.000042,\n  0.000040, 0.000037, 0.000035, 0.000023\n]\n\nexport default {\n  meanLunarMonth,\n  meanNew,\n  meanFirst,\n  meanFull,\n  meanLast,\n  newMoon,\n  new: newMoon, // BACKWARDS-COMPATIBILITY\n  first,\n  full,\n  last\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module eclipse\n */\n/**\n * Eclipse: Chapter 54, Eclipses.\n */\nimport base from './base.js'\nimport moonphase from './moonphase.js'\n\n/**\n * @private\n */\nconst g = function (k, jm, c1, c2) { // (k, jm, c1, c2 float64)  (eclipse bool, jdeMax, γ, u, Mʹ float64)\n  const ck = 1 / 1236.85\n  const p = Math.PI / 180\n  const T = k * ck\n  const F = base.horner(T, 160.7108 * p, 390.67050284 * p / ck,\n    -0.0016118 * p, -0.00000227 * p, 0.000000011 * p)\n  if (Math.abs(Math.sin(F)) > 0.36) {\n    return [false] // no eclipse\n  }\n  const eclipse = true\n  const E = base.horner(T, 1, -0.002516, -0.0000074)\n  const M = base.horner(T, 2.5534 * p, 29.1053567 * p / ck,\n    -0.0000014 * p, -0.00000011 * p)\n  const Mʹ = base.horner(T, 201.5643 * p, 385.81693528 * p / ck,\n    0.0107582 * p, 0.00001238 * p, -0.000000058 * p)\n  const Ω = base.horner(T, 124.7746 * p, -1.56375588 * p / ck,\n    0.0020672 * p, 0.00000215 * p)\n  const sΩ = Math.sin(Ω)\n  const F1 = F - 0.02665 * p * sΩ\n  const A1 = base.horner(T, 299.77 * p, 0.107408 * p / ck, -0.009173 * p)\n  // (54.1) p. 380\n  const jdeMax = jm +\n    c1 * Math.sin(Mʹ) +\n    c2 * Math.sin(M) * E +\n    0.0161 * Math.sin(2 * Mʹ) +\n    -0.0097 * Math.sin(2 * F1) +\n    0.0073 * Math.sin(Mʹ - M) * E +\n    -0.005 * Math.sin(Mʹ + M) * E +\n    -0.0023 * Math.sin(Mʹ - 2 * F1) +\n    0.0021 * Math.sin(2 * M) * E +\n    0.0012 * Math.sin(Mʹ + 2 * F1) +\n    0.0006 * Math.sin(2 * Mʹ + M) * E +\n    -0.0004 * Math.sin(3 * Mʹ) +\n    -0.0003 * Math.sin(M + 2 * F1) * E +\n    0.0003 * Math.sin(A1) +\n    -0.0002 * Math.sin(M - 2 * F1) * E +\n    -0.0002 * Math.sin(2 * Mʹ - M) * E +\n    -0.0002 * sΩ\n  const P = 0.207 * Math.sin(M) * E +\n    0.0024 * Math.sin(2 * M) * E +\n    -0.0392 * Math.sin(Mʹ) +\n    0.0116 * Math.sin(2 * Mʹ) +\n    -0.0073 * Math.sin(Mʹ + M) * E +\n    0.0067 * Math.sin(Mʹ - M) * E +\n    0.0118 * Math.sin(2 * F1)\n  const Q = 5.2207 +\n    -0.0048 * Math.cos(M) * E +\n    0.002 * Math.cos(2 * M) * E +\n    -0.3299 * Math.cos(Mʹ) +\n    -0.006 * Math.cos(Mʹ + M) * E +\n    0.0041 * Math.cos(Mʹ - M) * E\n  const [sF1, cF1] = base.sincos(F1)\n  const W = Math.abs(cF1)\n  const γ = (P * cF1 + Q * sF1) * (1 - 0.0048 * W)\n  const u = 0.0059 +\n    0.0046 * Math.cos(M) * E +\n    -0.0182 * Math.cos(Mʹ) +\n    0.0004 * Math.cos(2 * Mʹ) +\n    -0.0005 * Math.cos(M + Mʹ)\n  return [eclipse, jdeMax, γ, u, Mʹ] // (eclipse bool, jdeMax, γ, u, Mʹ float64)\n}\n\n/**\n * Eclipse type identifiers returned from Solar and Lunar.\n */\nexport const TYPE = {\n  None: 0,\n  Partial: 1, // for solar eclipses\n  Annular: 2, // solar\n  AnnularTotal: 3, // solar\n  Penumbral: 4, // for lunar eclipses\n  Umbral: 5, // lunar\n  Total: 6 // solar or lunar\n}\n\n/**\n * Snap returns k at specified quarter q nearest year y.\n * Cut and paste from moonphase.  Time corresponding to k needed in these\n * algorithms but otherwise not meaningful enough to export from moonphase.\n */\nconst snap = function (y, q) { // (y, q float64)  float64\n  const k = (y - 2000) * 12.3685 // (49.2) p. 350\n  return Math.floor(k - q + 0.5) + q\n}\n\n/**\n * Solar computes quantities related to solar eclipses.\n *\n * Argument year is a decimal year specifying a date.\n *\n * eclipseType will be None, Partial, Annular, AnnularTotal, or Total.\n * If None, none of the other return values may be meaningful.\n *\n * central is true if the center of the eclipse shadow touches the Earth.\n *\n * jdeMax is the jde when the center of the eclipse shadow is closest to the\n * Earth center, in a plane through the center of the Earth.\n *\n * γ is the distance from the eclipse shadow center to the Earth center\n * at time jdeMax.\n *\n * u is the radius of the Moon's umbral cone in the plane of the Earth.\n *\n * p is the radius of the penumbral cone.\n *\n * mag is eclipse magnitude for partial eclipses.  It is not valid for other\n * eclipse types.\n *\n * γ, u, and p are in units of equatorial Earth radii.\n */\nexport function solar (year) { // (year float64)  (eclipseType int, central bool, jdeMax, γ, u, p, mag float64)\n  let eclipseType = TYPE.None\n  let mag\n\n  const [e, jdeMax, γ, u, _] = g(snap(year, 0), moonphase.meanNew(year), -0.4075, 0.1721) // eslint-disable-line no-unused-vars\n\n  const p = u + 0.5461\n  if (!e) {\n    return { type: eclipseType } // no eclipse\n  }\n  const aγ = Math.abs(γ)\n  if (aγ > 1.5433 + u) {\n    return { type: eclipseType } // no eclipse\n  }\n  const central = aγ < 0.9972 // eclipse center touches Earth\n\n  if (!central) {\n    eclipseType = TYPE.Partial // most common case\n    if (aγ < 1.026) { // umbral cone may touch earth\n      if (aγ < 0.9972 + Math.abs(u)) { // total or annular\n        eclipseType = TYPE.Total // report total in both cases\n      }\n    }\n  } else if (u < 0) {\n    eclipseType = TYPE.Total\n  } else if (u > 0.0047) {\n    eclipseType = TYPE.Annular\n  } else {\n    const ω = 0.00464 * Math.sqrt(1 - γ * γ)\n    if (u < ω) {\n      eclipseType = TYPE.AnnularTotal\n    } else {\n      eclipseType = TYPE.Annular\n    }\n  }\n\n  if (eclipseType === TYPE.Partial) {\n    // (54.2) p. 382\n    mag = (1.5433 + u - aγ) / (0.5461 + 2 * u)\n  }\n\n  return {\n    type: eclipseType,\n    central,\n    jdeMax,\n    magnitude: mag,\n    distance: γ,\n    umbral: u,\n    penumbral: p\n  }\n}\n\n/**\n * Lunar computes quantities related to lunar eclipses.\n *\n * Argument year is a decimal year specifying a date.\n *\n * eclipseType will be None, Penumbral, Umbral, or Total.\n * If None, none of the other return values may be meaningful.\n *\n * jdeMax is the jde when the center of the eclipse shadow is closest to the\n * Moon center, in a plane through the center of the Moon.\n *\n * γ is the distance from the eclipse shadow center to the moon center\n * at time jdeMax.\n *\n * σ is the radius of the umbral cone in the plane of the Moon.\n *\n * ρ is the radius of the penumbral cone.\n *\n * mag is eclipse magnitude.\n *\n * sd- return values are semidurations of the phases of the eclipse, in days.\n *\n * γ, σ, and ρ are in units of equatorial Earth radii.\n */\nexport function lunar (year) { // (year float64)  (eclipseType int, jdeMax, γ, ρ, σ, mag, sdTotal, sdPartial, sdPenumbral float64)\n  let eclipseType = TYPE.None\n  let mag\n  let sdTotal\n  let sdPartial\n  let sdPenumbral\n\n  const [e, jdeMax, γ, u, Mʹ] = g(snap(year, 0.5),\n    moonphase.meanFull(year), -0.4065, 0.1727)\n  if (!e) {\n    return { type: eclipseType } // no eclipse\n  }\n  const ρ = 1.2848 + u\n  const σ = 0.7403 - u\n  const aγ = Math.abs(γ)\n  mag = (1.0128 - u - aγ) / 0.545 // (54.3) p. 382\n\n  if (mag > 1) {\n    eclipseType = TYPE.Total\n  } else if (mag > 0) {\n    eclipseType = TYPE.Umbral\n  } else {\n    mag = (1.5573 + u - aγ) / 0.545 // (54.4) p. 382\n    if (mag < 0) {\n      return { type: eclipseType } // no eclipse\n    }\n    eclipseType = TYPE.Penumbral\n  }\n\n  const p = 1.0128 - u\n  const t = 0.4678 - u\n  const n = 0.5458 + 0.04 * Math.cos(Mʹ)\n  const γ2 = γ * γ\n\n  /* eslint-disable no-fallthrough */\n  switch (eclipseType) {\n    case TYPE.Total: {\n      sdTotal = Math.sqrt(t * t - γ2) / n / 24\n    }\n    case TYPE.Umbral: {\n      sdPartial = Math.sqrt(p * p - γ2) / n / 24\n    }\n    default: {\n      const h = 1.5573 + u\n      sdPenumbral = Math.sqrt(h * h - γ2) / n / 24\n    }\n  }\n  /* eslint-enable */\n\n  return {\n    type: eclipseType,\n    jdeMax,\n    magnitude: mag,\n    distance: γ,\n    umbral: σ,\n    penumbral: ρ,\n    sdTotal,\n    sdPartial,\n    sdPenumbral\n  }\n}\n\nexport default {\n  TYPE,\n  solar,\n  lunar\n}\n", "/**\n * @copyright 2020 mdmunir\n * @copyright 2020 commenthol\n * @license MIT\n * @module elp\n */\n\n/**\n * Elp Mpp02\n * source ftp://cyrano-se.obspm.fr/pub/2_lunar_solutions/2_elpmpp02/elpmpp02.pdf\n */\n\nimport base, { Coord } from './base.js'\n\nconst SEC2RAD = 1 / 3600 * Math.PI / 180\n\nfunction sum (T, series) {\n  const coeffs = []\n  Object.keys(series).forEach((x) => {\n    coeffs[x] = 0.0\n    let y = series[x].length - 1\n    for (y; y >= 0; y--) {\n      // A, t0, t1, t2, t3, t4\n      const row = series[x][y]\n      const φ = base.horner(T, row.slice(1))\n      coeffs[x] += row[0] * Math.sin(φ)\n    }\n  })\n  return base.horner(T, ...coeffs)\n}\n\n/**\n *\n */\nexport class Moon {\n  /**\n   * ELP representation of a Moon\n   * @constructs Moon\n   * @param {object} data - elp data series\n   * @example\n   * ```js\n   * // for use in browser\n   * import {data} from 'astronomia.js'\n   * const moon = new elp.Moon(data.elpMppDe)\n   * ```\n   */\n  constructor (data) {\n    if (typeof data !== 'object') throw new TypeError('need Elp data')\n    this.series = data\n  }\n\n  _calcLBR (T) {\n    const L = base.horner(T, this.series.W1) + sum(T, this.series.L) * SEC2RAD\n    const B = sum(T, this.series.B) * SEC2RAD\n    const R = sum(T, this.series.R)\n    return { L: base.pmod(L, 2 * Math.PI), B, R }\n  }\n\n  /**\n   * Position returns rectangular coordinates referred to the inertial mean ecliptic and equinox of J2000.\n   * @param {Number} jde - Julian ephemeris day\n   * @return {object} rectangular coordinates\n   *   {Number} x\n   *   {Number} y\n   *   {Number} z\n   */\n  positionXYZ (jde) {\n    const T = base.J2000Century(jde)\n    const { L, B, R } = this._calcLBR(T)\n\n    const x = R * Math.cos(L) * Math.cos(B)\n    const y = R * Math.sin(L) * Math.cos(B)\n    const z = R * Math.sin(B)\n\n    const P = base.horner(T, 0, 0.10180391e-4, 0.47020439e-6, -0.5417367e-9, -0.2507948e-11, 0.463486e-14)\n    const Q = base.horner(T, 0, -0.113469002e-3, 0.12372674e-6, 0.12654170e-8, -0.1371808e-11, -0.320334e-14)\n    const sq = Math.sqrt(1 - P * P - Q * Q)\n    const p11 = 1 - 2 * P * P\n    const p12 = 2 * P * Q\n    const p13 = 2 * P * sq\n    const p21 = 2 * P * Q\n    const p22 = 1 - 2 * Q * Q\n    const p23 = -2 * Q * sq\n    const p31 = -2 * P * sq\n    const p32 = 2 * Q * sq\n    const p33 = 1 - 2 * P * P - 2 * Q * Q\n\n    const result = {\n      x: p11 * x + p12 * y + p13 * z,\n      y: p21 * x + p22 * y + p23 * z,\n      z: p31 * x + p32 * y + p33 * z\n    }\n    return result\n  }\n\n  /**\n   * Delay effect of light time\n   *\n   * @param {Number} jde - Julian ephemeris day\n   * @returns {Number} Delay time in days\n   */\n  lightTime (jde) {\n    const T = base.J2000Century(jde)\n    const R = sum(T, this.series.R)\n    return base.lightTime(R / base.AU)\n  }\n\n  /**\n   * Position returns ecliptic position of moon at equinox and ecliptic of date.\n   *\n   * @param {Number} jde - the date for which positions are desired.\n   * @returns {Coord} Results are positions consistent with those elp data,\n   * that is, at equinox and ecliptic of date.\n   *  {Number} lon - geocentric longitude in radians.\n   *  {Number} lat - geocentric latitude in radians.\n   *  {Number} range - geocentric range in KM.\n   */\n  position (jde) {\n    const T = base.J2000Century(jde)\n    const { L, B, R } = this._calcLBR(T)\n\n    // precession\n    const pA = base.horner(T, 0, 5029.0966 - 0.29965, 1.1120, 0.000077, -0.00002353) * SEC2RAD\n    return new Coord(\n      base.pmod(L + pA, 2 * Math.PI),\n      B,\n      R)\n  }\n}\n\n/**\n * Position returns the true geometric position of the moon as ecliptic coordinates.\n *\n * Result computed by Elp theory.  Result is at equator and equinox\n * of date in the FK5 frame.  It does not include nutation or aberration.\n *\n * @param {Object} elpData\n * @param {Number} jde - Julian ephemeris day\n * @returns {Object}\n *   {Number} lon - ecliptic longitude in radians\n *   {Number} lat - ecliptic latitude in radians\n *   {Number} range - range in KM\n */\nexport function position (elpData, jde) {\n  const moon = new Moon(elpData)\n  return moon.position(jde)\n}\n\nexport default {\n  Moon,\n  position\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module eqtime\n */\n/**\n * Eqtime: Chapter 28, Equation of time.\n */\n\nimport base from './base.js'\nimport coord from './coord.js'\nimport nutation from './nutation.js'\nimport solar from './solar.js'\nconst { cos, sin, tan } = Math\n\n/**\n * e computes the \"equation of time\" for the given JDE.\n *\n * Parameter planet must be a planetposition.Planet object for Earth obtained\n * with `new planetposition.Planet('earth')`.\n *\n * @param {Number} jde - Julian ephemeris day\n * @param {planetposition.Planet} earth - VSOP87 planet\n * @returns {Number} equation of time as an hour angle in radians.\n */\nexport function e (jde, earth) {\n  const τ = base.J2000Century(jde) * 0.1\n  const L0 = l0(τ)\n  // code duplicated from solar.ApparentEquatorialVSOP87 so that\n  // we can keep Δψ and cε\n  const { lon, lat, range } = solar.trueVSOP87(earth, jde)\n  const [Δψ, Δε] = nutation.nutation(jde)\n  const a = -20.4898 / 3600 * Math.PI / 180 / range\n  const λ = lon + Δψ + a\n  const ε = nutation.meanObliquity(jde) + Δε\n  const eq = new coord.Ecliptic(λ, lat).toEquatorial(ε)\n  // (28.1) p. 183\n  const E = L0 - 0.0057183 * Math.PI / 180 - eq.ra + Δψ * cos(ε)\n  return base.pmod(E + Math.PI, 2 * Math.PI) - Math.PI\n}\n\n/**\n * (28.2) p. 183\n */\nconst l0 = function (τ) {\n  return base.horner(τ, 280.4664567, 360007.6982779, 0.03032028,\n    1.0 / 49931, -1.0 / 15300, -1.0 / 2000000) * Math.PI / 180\n}\n\n/**\n * eSmart computes the \"equation of time\" for the given JDE.\n *\n * Result is less accurate that e() but the function has the advantage\n * of not requiring the V87Planet object.\n *\n * @param {Number} jde - Julian ephemeris day\n * @returns {Number} equation of time as an hour angle in radians.\n */\nexport function eSmart (jde) {\n  const ε = nutation.meanObliquity(jde)\n  const t = tan(ε * 0.5)\n  const y = t * t\n  const T = base.J2000Century(jde)\n  const L0 = l0(T * 0.1)\n  const e = solar.eccentricity(T)\n  const M = solar.meanAnomaly(T)\n  const [sin2L0, cos2L0] = base.sincos(2 * L0)\n  const sinM = sin(M)\n  // (28.3) p. 185\n  return y * sin2L0 - 2 * e * sinM + 4 * e * y * sinM * cos2L0 -\n    y * y * sin2L0 * cos2L0 - 1.25 * e * e * sin(2 * M)\n}\n\nexport default {\n  e,\n  eSmart\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module fit\n */\n/**\n * Fit: Chapter 4, Curve Fitting.\n */\n\n/**\n * Linear fits a line to sample data.\n *\n * Argument p is a list of data points.  Results a and b are coefficients\n * of the best fit line y = ax + b.\n */\nexport function linear (points) { // (p []struct{ X, Y float64 })  (a, b float64)\n  let sx = 0\n  let sy = 0\n  let sx2 = 0\n  let sxy = 0\n  for (const p of points) {\n    const x = p.x\n    const y = p.y\n    sx += x\n    sy += y\n    sx2 += x * x\n    sxy += x * y\n  }\n  const n = points.length\n  const d = n * sx2 - sx * sx\n  // (4.2) p. 36\n  const a = (n * sxy - sx * sy) / d\n  const b = (sy * sx2 - sx * sxy) / d\n  return [a, b]\n}\n\n/**\n * CorrelationCoefficient returns a correlation coefficient for sample data.\n */\nexport function correlationCoefficient (points) { // (p []struct{ X, Y float64 })  float64\n  let sx = 0\n  let sy = 0\n  let sx2 = 0\n  let sy2 = 0\n  let sxy = 0\n  for (const p of points) {\n    const x = p.x\n    const y = p.y\n    sx += x\n    sy += y\n    sx2 += x * x\n    sy2 += y * y\n    sxy += x * y\n  }\n  const n = points.length\n  // (4.3) p. 38\n  return (n * sxy - sx * sy) / (Math.sqrt(n * sx2 - sx * sx) * Math.sqrt(n * sy2 - sy * sy))\n}\n\n/**\n * Quadratic fits y = ax² + bx + c to sample data.\n *\n * Argument p is a list of data points.  Results a, b, and c are coefficients\n * of the best fit quadratic y = ax² + bx + c.\n */\nexport function quadratic (points) {\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  for (const p of points) {\n    const x = p.x\n    const y = p.y\n    const x2 = x * x\n    P += x\n    Q += x2\n    R += x * x2\n    S += x2 * x2\n    T += y\n    U += x * y\n    V += x2 * y\n  }\n  const N = points.length\n  // (4.5) p. 43\n  const D = N * Q * S + 2 * P * Q * R - Q * Q * Q - P * P * S - N * R * R\n  // (4.6) p. 43\n  const a = (N * Q * V + P * R * T + P * Q * U - Q * Q * T - P * P * V - N * R * U) / D\n  const b = (N * S * U + P * Q * V + Q * R * T - Q * Q * U - P * S * T - N * R * V) / D\n  const c = (Q * S * T + Q * R * U + P * R * V - Q * Q * V - P * S * U - R * R * T) / D\n  return [a, b, c]\n}\n\n/**\n * Func3 implements multiple linear regression for a linear combination\n * of three functions.\n *\n * Given sample data and three functions in x, Func3 returns coefficients\n * a, b, and c fitting y = aƒ₀(x) + bƒ₁(x) + cƒ₂(x) to sample data.\n */\nexport function func3 (points, f0, f1, f2) {\n  let M = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  for (const p of points) {\n    const x = p.x\n    const y = p.y\n    const y0 = f0(x)\n    const y1 = f1(x)\n    const y2 = f2(x)\n    M += y0 * y0\n    P += y0 * y1\n    Q += y0 * y2\n    R += y1 * y1\n    S += y1 * y2\n    T += y2 * y2\n    U += y * y0\n    V += y * y1\n    W += y * y2\n  }\n  // (4.7) p. 44\n  const D = M * R * T + 2 * P * Q * S - M * S * S - R * Q * Q - T * P * P\n  const a = (U * (R * T - S * S) + V * (Q * S - P * T) + W * (P * S - Q * R)) / D\n  const b = (U * (S * Q - P * T) + V * (M * T - Q * Q) + W * (P * Q - M * S)) / D\n  const c = (U * (P * S - R * Q) + V * (P * Q - M * S) + W * (M * R - P * P)) / D\n  return [a, b, c]\n}\n\n/**\n * Func1 fits a linear multiple of a function to sample data.\n *\n * Given sample data and a function in x, Func1 returns coefficient\n * a fitting y = aƒ(x).\n */\nexport function func1 (points, f) {\n  let syf = 0\n  let sf2 = 0\n  // (4.8) p. 45\n  for (const p of points) {\n    const fx = f(p.x)\n    const y = p.y\n    syf += y * fx\n    sf2 += fx * fx\n  }\n  return syf / sf2\n}\n\nexport default {\n  linear,\n  correlationCoefficient,\n  quadratic,\n  func3,\n  func1\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module illum\n */\n/**\n * Illum: Chapter 41, Illuminated Fraction of the Disk and Magnitude of a Planet.\n *\n * Also see functions `illuminated` and `limb` in package base.  While this\n * chapter title includes \"illumnated fraction,\" the function for computing\n * illuminated fraction given a phase angle is `base.illuminated`.\n * `base.limb` is the function mentioned at the bottom of p. 283.0\n */\n\nimport base from './base.js'\n\nconst { toDeg } = base\nconst D2R = Math.PI / 180\n\n/**\n * PhaseAngle computes the phase angle of a planet.\n *\n * Argument r is planet's distance to Sun, Δ its distance to Earth, and R\n * the distance from Sun to Earth.  All distances in AU.\n *\n * Result in radians.\n */\nexport function phaseAngle (r, Δ, R) { // (r, Δ, R float64)  float64\n  return Math.acos((r * r + Δ * Δ - R * R) / (2 * r * Δ))\n}\n\n/**\n * Fraction computes the illuminated fraction of the disk of a planet.\n *\n * Argument r is planet's distance to Sun, Δ its distance to Earth, and R\n * the distance from Sun to Earth.  All distances in AU.\n */\nexport function fraction (r, Δ, R) { // (r, Δ, R float64)  float64\n  // (41.2) p. 283\n  const s = r + Δ\n  return (s * s - R * R) / (4 * r * Δ)\n}\n\n/**\n * PhaseAngle2 computes the phase angle of a planet.\n *\n * Arguments L, B, R are heliocentric ecliptical coordinates of the planet.\n * L0, R0 are longitude and radius for Earth, Δ is distance from Earth to\n * the planet.  All distances in AU, angles in radians.\n *\n * The phase angle result is in radians.\n */\nexport function phaseAngle2 (L, B, R, L0, R0, Δ) { // (L, B, R, L0, R0, Δ float64)  float64\n  // (41.3) p. 283\n  return Math.acos((R - R0 * Math.cos(B) * Math.cos(L - L0)) / Δ)\n}\n\n/**\n * PhaseAngle3 computes the phase angle of a planet.\n *\n * Arguments L, B are heliocentric ecliptical longitude and latitude of the\n * planet.  x, y, z are cartesian coordinates of the planet, Δ is distance\n * from Earth to the planet.  All distances in AU, angles in radians.\n *\n * The phase angle result is in radians.\n */\nexport function phaseAngle3 (L, B, x, y, z, Δ) { // (L, B, x, y, z, Δ float64)  float64\n  // (41.4) p. 283\n  const [sL, cL] = base.sincos(L)\n  const [sB, cB] = base.sincos(B)\n  return Math.acos((x * cB * cL + y * cB * sL + z * sB) / Δ)\n}\n\n/**\n * FractionVenus computes an approximation of the illumanted fraction of Venus.\n */\nexport function fractionVenus (jde) { // (jde float64)  float64\n  const T = base.J2000Century(jde)\n  const V = (261.51 + 22518.443 * T) * D2R\n  const M = (177.53 + 35999.05 * T) * D2R\n  const N = (50.42 + 58517.811 * T) * D2R\n  const W = V + (1.91 * Math.sin(M) + 0.78 * Math.sin(N)) * D2R\n  const Δ = Math.sqrt(1.52321 + 1.44666 * Math.cos(W))\n  const s = 0.72333 + Δ\n  return (s * s - 1) / 2.89332 / Δ\n}\n\n/**\n * Mercury computes the visual magnitude of Mercury.\n * Formula by G. Müller\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function mercury (r, Δ, i) { // (r, Δ, i float64)  float64\n  const s = toDeg(i) - 50\n  return 1.16 + 5 * Math.log10(r * Δ) + (0.02838 + 0.0001023 * s) * s\n}\n\n/**\n * Venus computes the visual magnitude of Venus.\n * Formula by G. Müller\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function venus (r, Δ, i) { // (r, Δ, i float64)  float64\n  const iDeg = toDeg(i)\n  return -4 + 5 * Math.log10(r * Δ) + (0.01322 + 0.0000004247 * iDeg * iDeg) * iDeg\n}\n\n/**\n * Mars computes the visual magnitude of Mars.\n * Formula by G. Müller\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function mars (r, Δ, i) { // (r, Δ, i float64)  float64\n  return -1.3 + 5 * Math.log10(r * Δ) + 0.01486 * toDeg(i)\n}\n\n/**\n * Jupiter computes the visual magnitude of Jupiter.\n * Formula by G. Müller\n * Effect of phase not considered\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n */\nexport function jupiter (r, Δ) { // (r, Δ float64)  float64\n  return -8.93 + 5 * Math.log10(r * Δ)\n}\n\n/**\n * Saturn computes the visual magnitude of Saturn.\n * Formula by G. Müller\n * Sun's altitude above the plane of the ring is not considered.\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n * B is the Saturnicentric latitude of the Earth referred to the plane of\n * Saturn's ring.\n * ΔU (in radians) is the difference between the Saturnicentric longitudes\n * of the Sun and the Earth, measured in the plane of the ring.\n * You can use saturndisk.Disk() to obtain B and ΔU.\n */\nexport function saturn (r, Δ, B, ΔU) { // (r, Δ, B, ΔU float64)  float64\n  const s = Math.sin(Math.abs(B))\n  return -8.68 + 5 * Math.log10(r * Δ) + 0.044 * Math.abs(toDeg(ΔU)) - 2.6 * s + 1.25 * s * s\n}\n\n/**\n * Uranus computes the visual magnitude of Uranus.\n * Formula by G. Müller\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n */\nexport function uranus (r, Δ) { // (r, Δ float64)  float64\n  return -6.85 + 5 * Math.log10(r * Δ)\n}\n\n/**\n * Neptune computes the visual magnitude of Neptune.\n * Formulae by G. Müller\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n */\nexport function neptune (r, Δ) { // (r, Δ float64)  float64\n  return -7.05 + 5 * Math.log10(r * Δ)\n}\n\n/**\n * Mercury84 computes the visual magnitude of Mercury.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function mercury84 (r, Δ, i) { // (r, Δ, i float64)  float64\n  return base.horner(toDeg(i), -0.42 + 5 * Math.log10(r * Δ),\n    0.038, -0.000273, 0.000002)\n}\n\n/**\n * Venus84 computes the visual magnitude of Venus.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function venus84 (r, Δ, i) { // (r, Δ, i float64)  float64\n  return base.horner(toDeg(i), -4.4 + 5 * Math.log10(r * Δ),\n    0.0009, 0.000239, -0.00000065)\n}\n\n/**\n * Mars84 computes the visual magnitude of Mars.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function mars84 (r, Δ, i) { // (r, Δ, i float64)  float64\n  return -1.52 + 5 * Math.log10(r * Δ) + 0.016 * toDeg(i)\n}\n\n/**\n * Jupiter84 computes the visual magnitude of Jupiter.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\n * and i the phase angle in radians.\n */\nexport function jupiter84 (r, Δ, i) { // (r, Δ, i float64)  float64\n  return -9.4 + 5 * Math.log10(r * Δ) + 0.005 * toDeg(i)\n}\n\n/**\n * Saturn84 computes the visual magnitude of Saturn.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n * B is the Saturnicentric latitude of the Earth referred to the plane of\n * Saturn's ring.\n * ΔU (in radians) is the difference between the Saturnicentric longitudes\n * of the Sun and the Earth, measured in the plane of the ring.\n */\nexport function saturn84 (r, Δ, B, ΔU) { // (r, Δ, B, ΔU float64)  float64\n  const s = Math.sin(Math.abs(B))\n  return -8.88 + 5 * Math.log10(r * Δ) + 0.044 * Math.abs(toDeg(ΔU)) - 2.6 * s + 1.25 * s * s\n}\n\n/**\n * Uranus84 computes the visual magnitude of Uranus.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n */\nexport function uranus84 (r, Δ) { // (r, Δ float64)  float64\n  return -7.19 + 5 * Math.log10(r * Δ)\n}\n\n/**\n * Neptune84 computes the visual magnitude of Neptune.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n */\nexport function neptune84 (r, Δ) { // (r, Δ float64)  float64\n  return -6.87 + 5 * Math.log10(r * Δ)\n}\n\n/**\n * Pluto84 computes the visual magnitude of Pluto.\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\n *\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\n */\nexport function pluto84 (r, Δ) { // (r, Δ float64)  float64\n  return -1 + 5 * Math.log10(r * Δ)\n}\n\nexport default {\n  phaseAngle,\n  fraction,\n  phaseAngle2,\n  phaseAngle3,\n  fractionVenus,\n  mercury,\n  venus,\n  mars,\n  jupiter,\n  saturn,\n  uranus,\n  neptune,\n  mercury84,\n  venus84,\n  mars84,\n  jupiter84,\n  saturn84,\n  uranus84,\n  neptune84,\n  pluto84\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module julian\n */\n/**\n * Julian: Chapter 7, Julian day.\n */\n\nimport base from './base.js'\nimport sexa from './sexagesimal.js'\nimport deltat from './deltat.js'\n\nconst int = Math.trunc\n\n/** 1582-10-05 Julian Date is 1st Gregorian Date (1582-10-15) */\nexport const GREGORIAN0JD = 2299160.5\n\nconst DAYS_OF_YEAR = [0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]\nconst SECS_OF_DAY = 86400 // 24 * 60 * 60\n\n/**\n * Base class for CalendarJulian and CalendarGregorian\n * Respects the start of the Gregorian Calendar at `GREGORIAN0JD`\n */\nexport class Calendar {\n  /**\n   * @param {number|Date} [year] - If `Date` is given then year, month, day is taken from that. Shortcut to `new Calendar().fromDate(date)`\n   * @param {number} [month]\n   * @param {number} [day]\n   */\n  constructor (year, month = 1, day = 1) {\n    if (year instanceof Date) {\n      this.fromDate(year)\n    } else {\n      this.year = year\n      this.month = month\n      this.day = day\n    }\n  }\n\n  getDate () {\n    return {\n      year: this.year,\n      month: this.month,\n      day: Math.floor(this.day)\n    }\n  }\n\n  getTime () {\n    const t = new sexa.Time(this.day * SECS_OF_DAY)\n    const [neg, h, m, _s] = t.toHMS() // eslint-disable-line no-unused-vars\n    let [s, ms] = base.modf(_s)\n    ms = Math.trunc(ms * 1000)\n    return {\n      hour: h % 24,\n      minute: m,\n      second: s,\n      millisecond: ms\n    }\n  }\n\n  toISOString () {\n    const { year, month, day } = this.getDate()\n    const { hour, minute, second, millisecond } = this.getTime()\n    return `${pad(year, 4)}-${pad(month)}-${pad(day)}T` +\n      `${pad(hour)}:${pad(minute)}:${pad(second)}.${pad(millisecond, 3)}Z`\n  }\n\n  isGregorian () {\n    return isCalendarGregorian(this.year, this.month, this.day)\n  }\n\n  /**\n   * Note: Take care for dates < GREGORIAN0JD as `date` is always within the\n   * proleptic Gregorian Calender\n   * @param {Date} date - proleptic Gregorian date\n   */\n  fromDate (date) {\n    this.year = date.getUTCFullYear()\n    this.month = date.getUTCMonth() + 1\n    const day = date.getUTCDate()\n    const hour = date.getUTCHours()\n    const minute = date.getUTCMinutes()\n    const second = date.getUTCSeconds()\n    const ms = date.getMilliseconds()\n    this.day = day + (hour + ((minute + ((second + ms / 1000) / 60)) / 60)) / 24\n    return this\n  }\n\n  /**\n   * Note: Take care for dates < GREGORIAN0JD as `date` is always within the\n   * proleptic Gregorian Calender\n   * @returns {Date} proleptic Gregorian date\n   */\n  toDate () {\n    const [day, fhour] = base.modf(this.day)\n    const [hour, fminute] = base.modf(fhour * 24)\n    const [minute, fsecond] = base.modf(fminute * 60)\n    const [second, fms] = base.modf(fsecond * 60)\n    const date = new Date(Date.UTC(\n      this.year, this.month - 1, day, hour, minute, second, Math.round(fms * 1000)\n    ))\n    date.setUTCFullYear(this.year)\n    return date\n  }\n\n  /**\n   * converts a calendar date to decimal year\n   * @returns {number} decimal year\n   */\n  toYear () {\n    const [d, f] = base.modf(this.day) // eslint-disable-line no-unused-vars\n    const n = this.dayOfYear() - 1 + f\n    const days = this.isLeapYear() ? 366 : 365\n    const decYear = this.year + (n / days)\n    return decYear\n  }\n\n  /**\n   * converts a decimal year to a calendar date\n   * @param {number} year - decimal year\n   */\n  fromYear (year) {\n    const [y, f] = base.modf(year)\n    this.year = y\n    const days = this.isLeapYear() ? 366 : 365\n    const dayOfYear = base.round(f * days, 5)\n    let m = 12\n    while (m > 0 && DAYS_OF_YEAR[m] > dayOfYear) {\n      m--\n    }\n    this.month = m\n    this.day = 1 + dayOfYear - DAYS_OF_YEAR[this.month]\n    return this\n  }\n\n  isLeapYear () {\n    if (this.isGregorian()) {\n      return LeapYearGregorian(this.year)\n    } else {\n      return LeapYearJulian(this.year)\n    }\n  }\n\n  toJD () {\n    return CalendarToJD(this.year, this.month, this.day, !this.isGregorian())\n  }\n\n  fromJD (jd) {\n    const isJulian = !isJDCalendarGregorian(jd)\n    const { year, month, day } = JDToCalendar(jd, isJulian)\n    this.year = year\n    this.month = month\n    this.day = day\n    return this\n  }\n\n  fromJDE (jde) {\n    this.fromJD(jde)\n    const dT = deltat.deltaT(this.toYear()) // in seconds\n    this.day -= dT / 86400\n    return this\n  }\n\n  toJDE () {\n    const dT = deltat.deltaT(this.toYear()) // in seconds\n    this.day += dT / 86400\n    return this.toJD()\n  }\n\n  /**\n   * set date to midnight UTC\n   */\n  midnight () {\n    this.day = Math.floor(this.day)\n    return this\n  }\n\n  /**\n   * set date to noon UTC\n   */\n  noon () {\n    this.day = Math.floor(this.day) + 0.5\n    return this\n  }\n\n  /**\n   * @param {Boolean} td - if `true` calendar instance is in TD; date gets converted to UT\n   *   true  - `UT = TD - ΔT`\n   *   false - `TD = UT + ΔT`\n   */\n  deltaT (td) {\n    const dT = deltat.deltaT(this.toYear()) // in seconds\n    if (td) {\n      this.day -= dT / 86400\n    } else {\n      this.day += dT / 86400\n    }\n    return this\n  }\n\n  dayOfWeek () {\n    return DayOfWeek(this.toJD())\n  }\n\n  dayOfYear () {\n    if (this.isGregorian()) {\n      return DayOfYearGregorian(this.year, this.month, this.day)\n    } else {\n      return DayOfYearJulian(this.year, this.month, this.day)\n    }\n  }\n}\n\nexport class CalendarJulian extends Calendar {\n  toJD () {\n    return CalendarJulianToJD(this.year, this.month, this.day)\n  }\n\n  fromJD (jd) {\n    const { year, month, day } = JDToCalendarJulian(jd)\n    this.year = year\n    this.month = month\n    this.day = day\n    return this\n  }\n\n  isLeapYear () {\n    return LeapYearJulian(this.year)\n  }\n\n  dayOfYear () {\n    return DayOfYearJulian(this.year, this.month, this.day)\n  }\n\n  /**\n   * toGregorian converts a Julian calendar date to a year, month, and day\n   * in the Gregorian calendar.\n   * @returns {CalendarGregorian}\n   */\n  toGregorian () {\n    const jd = this.toJD()\n    return new CalendarGregorian().fromJD(jd)\n  }\n}\n\nexport class CalendarGregorian extends Calendar {\n  toJD () {\n    return CalendarGregorianToJD(this.year, this.month, this.day)\n  }\n\n  fromJD (jd) {\n    const { year, month, day } = JDToCalendarGregorian(jd)\n    this.year = year\n    this.month = month\n    this.day = day\n    return this\n  }\n\n  isLeapYear () {\n    return LeapYearGregorian(this.year)\n  }\n\n  dayOfYear () {\n    return DayOfYearGregorian(this.year, this.month, this.day)\n  }\n\n  /*\n  * toJulian converts a Gregorian calendar date to a year, month, and day\n  * in the Julian calendar.\n  * @returns {CalendarJulian}\n  */\n  toJulian () {\n    const jd = this.toJD()\n    return new CalendarJulian().fromJD(jd)\n  }\n}\n\n// -----------------------------------------------------------------------------\n\n/**\n * base conversion from calendar date to julian day\n */\nexport function CalendarToJD (y, m, d, isJulian) {\n  let b = 0\n  if (m < 3) {\n    y--\n    m += 12\n  }\n  if (!isJulian) {\n    const a = base.floorDiv(y, 100)\n    b = 2 - a + base.floorDiv(a, 4)\n  }\n  // (7.1) p. 61\n  const jd = (base.floorDiv(36525 * (int(y + 4716)), 100)) +\n    (base.floorDiv(306 * (m + 1), 10) + b) + d - 1524.5\n  return jd\n}\n\n/**\n * CalendarGregorianToJD converts a Gregorian year, month, and day of month\n * to Julian day.\n *\n * Negative years are valid, back to JD 0.  The result is not valid for\n * dates before JD 0.\n * @param {number} y - year (int)\n * @param {number} m - month (int)\n * @param {number} d - day (float)\n * @returns {number} jd - Julian day (float)\n */\nexport function CalendarGregorianToJD (y, m, d) {\n  return CalendarToJD(y, m, d, false)\n}\n\n/**\n * CalendarJulianToJD converts a Julian year, month, and day of month to Julian day.\n *\n * Negative years are valid, back to JD 0.  The result is not valid for\n * dates before JD 0.\n * @param {number} y - year (int)\n * @param {number} m - month (int)\n * @param {number} d - day (float)\n * @returns {number} jd - Julian day (float)\n */\nexport function CalendarJulianToJD (y, m, d) {\n  return CalendarToJD(y, m, d, true)\n}\n\n/**\n * LeapYearJulian returns true if year y in the Julian calendar is a leap year.\n * @param {number} y - year (int)\n * @returns {boolean} true if leap year in Julian Calendar\n */\nexport function LeapYearJulian (y) {\n  return y % 4 === 0\n}\n\n/**\n * LeapYearGregorian returns true if year y in the Gregorian calendar is a leap year.\n * @param {number} y - year (int)\n * @returns {boolean} true if leap year in Gregorian Calendar\n */\nexport function LeapYearGregorian (y) {\n  return (y % 4 === 0 && y % 100 !== 0) || y % 400 === 0\n}\n\n/**\n * JDToCalendar returns the calendar date for the given jd.\n *\n * Note that this function returns a date in either the Julian or Gregorian\n * Calendar, as appropriate.\n * @param {number} jd - Julian day (float)\n * @param {boolean} isJulian - set true for Julian Calendar, otherwise Gregorian is used\n * @returns {object} `{ (int) year, (int) month, (float) day }`\n */\nexport function JDToCalendar (jd, isJulian) {\n  const [z, f] = base.modf(jd + 0.5)\n  let a = z\n  if (!isJulian) {\n    const α = base.floorDiv(z * 100 - 186721625, 3652425)\n    a = z + 1 + α - base.floorDiv(α, 4)\n  }\n  const b = a + 1524\n  const c = base.floorDiv(b * 100 - 12210, 36525)\n  const d = base.floorDiv(36525 * c, 100)\n  const e = int(base.floorDiv((b - d) * 1e4, 306001))\n  // compute return values\n  let year\n  let month\n  const day = (int(b - d) - base.floorDiv(306001 * e, 1e4)) + f\n  if (e === 14 || e === 15) {\n    month = e - 13\n  } else {\n    month = e - 1\n  }\n  if (month < 3) {\n    year = int(c) - 4715\n  } else {\n    year = int(c) - 4716\n  }\n  return { year, month, day }\n}\n\n/**\n * JDToCalendarGregorian returns the calendar date for the given jd in the Gregorian Calendar.\n *\n * @param {number} jd - Julian day (float)\n * @returns {object} `{ (int) year, (int) month, (float) day }`\n */\nexport function JDToCalendarGregorian (jd) {\n  return JDToCalendar(jd, false)\n}\n\n/**\n * JDToCalendarJulian returns the calendar date for the given jd in the Julian Calendar.\n *\n * @param {number} jd - Julian day (float)\n * @returns {object} { (int) year, (int) month, (float) day }\n */\nexport function JDToCalendarJulian (jd) {\n  return JDToCalendar(jd, true)\n}\n\n/**\n * isJDCalendarGregorian tests if Julian day `jd` falls into the Gregorian calendar\n * @param {number} jd - Julian day (float)\n * @returns {boolean} true for Gregorian, false for Julian calendar\n */\nexport function isJDCalendarGregorian (jd) {\n  return (jd >= GREGORIAN0JD)\n}\n\n/**\n * isCalendarGregorian tests if date falls into the Gregorian calendar\n * @param {number} year - julian/gregorian year\n * @param {number} [month] - month of julian/gregorian year\n * @param {number} [day] - day of julian/gregorian year\n * @returns {boolean} true for Gregorian, false for Julian calendar\n */\nexport function isCalendarGregorian (year, month = 1, day = 1) {\n  return (year > 1582 ||\n    (year === 1582 && month > 10) ||\n    (year === 1582 && month === 10 && day >= 15)\n  )\n}\n\n/**\n * JDToDate converts a Julian day `jd` to a Date Object (Gregorian Calendar)\n *\n * Note: Javascript uses the the ISO-8601 calendar, which is a proleptic Gregorian\n * calendar, i.e. it acts as if this calendar was always in effect, even before\n * its year of introduction in 1582. Therefore dates between 1582-10-05 and\n * 1582-10-14 exists.\n *\n * @param {number} jd - Julian day (float)\n * @returns {Date}\n */\nexport function JDToDate (jd) {\n  return new CalendarGregorian().fromJD(jd).toDate()\n}\n\n/**\n * DateToJD converts a proleptic Gregorian Date into a Julian day `jd`\n * @param {Date} date\n * @returns {number} jd - Julian day (float)\n */\nexport function DateToJD (date) {\n  return new CalendarGregorian().fromDate(date).toJD()\n}\n\n/**\n * JDEToDate converts a Julian ephemeris day `jde` to a Date Object (Gregorian Calendar)\n * To obtain \"Universal Time\" (UT) from \"Dynamical Time\" (TD) the correction ΔT (in seconds) gets applied\n * ```\n * UT = TD - ΔT\n * ```\n * If your use case does not require such accuracy converting `jde` using `JDToDate` is fine.\n *\n * Note: Javascript uses the the ISO-8601 calendar, which is a proleptic Gregorian\n * calendar, i.e. it acts as if this calendar was always in effect, even before\n * its year of introduction in 1582. Therefore dates between 1582-10-05 and\n * 1582-10-14 exists.\n *\n * @param {number} jde - Julian ephemeris day\n * @returns {Date} Javascript Date Object\n */\nexport function JDEToDate (jde) {\n  return new CalendarGregorian().fromJDE(jde).toDate()\n}\n\n/**\n * DateToJDE converts a Date Object (Gregorian Calendar) to a Julian ephemeris day `jde`\n * To obtain \"Dynamical Time\" (TD) from \"Universal Time\" (UT) the correction ΔT (in seconds) gets applied\n * ```\n * TD = UT + ΔT\n * ```\n * If your use case does not require such accuracy converting `Date` using `DateToJD` is fine.\n *\n * @param {Date} date - Javascript Date Object\n * @returns {number} jde - Julian ephemeris day (float)\n */\nexport function DateToJDE (date) {\n  return new CalendarGregorian().fromDate(date).toJDE()\n}\n\n/**\n * converts Modified Julian Day `mjd` to Julian Day `jd`\n * @param {Number} mjd - Modified Julian Day\n * @returns {Number} jd - Julian Day\n */\nexport function MJDToJD (mjd) {\n  return mjd + base.JMod\n}\n\n/**\n * converts Julian Day `jd` to Modified Julian Day `mjd`\n * The MJD sometimes appear when mentioning orbital elements of artificial satellites.\n * Contrary to JD the MJD begins at Greenwich mean midnight.\n * @param {Number} jd - Julian Day\n * @returns {Number} mjd - Modified Julian Day MJD\n */\nexport function JDToMJD (jd) {\n  return jd - base.JMod\n}\n\n/**\n * DayOfWeek determines the day of the week for a given JD.\n *\n * The value returned is an integer in the range 0 to 6, where 0 represents\n * Sunday.  This is the same convention followed in the time package of the\n * Javascript standard library.\n * @param {number} jd - Julian day (float)\n * @returns {number} (int) 0 == sunday; ...; 6 == saturday\n */\nexport function DayOfWeek (jd) {\n  return int(jd + 1.5) % 7\n}\n\n/**\n * DayOfYearGregorian computes the day number within the year of the Gregorian\n * calendar.\n * @param {number} y - year (int)\n * @param {number} m - month (int)\n * @param {number} d - day (float)\n * @returns {number} day of year\n */\nexport function DayOfYearGregorian (y, m, d) {\n  return DayOfYear(y, m, int(d), LeapYearGregorian(y))\n}\n\n/**\n * DayOfYearJulian computes the day number within the year of the Julian\n * calendar.\n * @param {number} y - year (int)\n * @param {number} m - month (int)\n * @param {number} d - day (float)\n * @returns {number} day of year\n */\nexport function DayOfYearJulian (y, m, d) {\n  return DayOfYear(y, m, int(d), LeapYearJulian(y))\n}\n\n/**\n * DayOfYear computes the day number within the year.\n *\n * This form of the function is not specific to the Julian or Gregorian\n * calendar, but you must tell it whether the year is a leap year.\n * @param {number} y - year (int)\n * @param {number} m - month (int)\n * @param {number} d - day (float)\n * @param {boolean} leap - set `true` if `y` is leap year\n * @returns {number} day of year\n */\nexport function DayOfYear (y, m, d, leap) {\n  let k = 0\n  if (leap && m > 1) {\n    k = 1\n  }\n  return k + DAYS_OF_YEAR[m] + int(d)\n}\n\n/**\n * DayOfYearToCalendar returns the calendar month and day for a given\n * day of year and leap year status.\n * @param {number} n - day of year (int)\n * @param {boolean} leap - set `true` if `y` is leap year\n * @returns {object} `{ (int) month, (float) day }`\n */\nexport function DayOfYearToCalendar (n, leap) {\n  let month\n  let k = 0\n  if (leap) {\n    k = 1\n  }\n  for (month = 1; month <= 12; month++) {\n    if (k + DAYS_OF_YEAR[month] > n) {\n      month = month - 1\n      break\n    }\n  }\n  const day = n - k - DAYS_OF_YEAR[month]\n  return { month, day }\n}\n\n/**\n * DayOfYearToCalendarGregorian returns the calendar month and day for a given\n * day of year.\n * @param {number} year\n * @param {number} n - day of year (int)\n * @returns {CalendarGregorian} { (int) year, (int) month, (float) day }\n */\nexport function DayOfYearToCalendarGregorian (year, n) {\n  const { month, day } = DayOfYearToCalendar(n, LeapYearGregorian(year))\n  return new CalendarGregorian(year, month, day)\n}\n\n/**\n * DayOfYearToCalendarJulian returns the calendar month and day for a given\n * day of year.\n * @param {number} year\n * @param {number} n - day of year (int)\n * @returns {CalendarJulian} { (int) year, (int) month, (float) day }\n */\nexport function DayOfYearToCalendarJulian (year, n) {\n  const { month, day } = DayOfYearToCalendar(n, LeapYearJulian(year))\n  return new CalendarJulian(year, month, day)\n}\n\nfunction pad (num, len) {\n  len = len || 2\n  const neg = num < 0 ? '-' : ''\n  num = Math.abs(num)\n  const padded = ('0000' + num)\n  return neg + padded.substr(padded.length - len, len)\n}\n\nexport default {\n  GREGORIAN0JD,\n  Calendar,\n  CalendarJulian,\n  CalendarGregorian,\n  CalendarToJD,\n  CalendarGregorianToJD,\n  CalendarJulianToJD,\n  LeapYearJulian,\n  LeapYearGregorian,\n  JDToCalendar,\n  JDToCalendarGregorian,\n  JDToCalendarJulian,\n  isJDCalendarGregorian,\n  isCalendarGregorian,\n  JDToDate,\n  DateToJD,\n  JDEToDate,\n  DateToJDE,\n  MJDToJD,\n  JDToMJD,\n  DayOfWeek,\n  DayOfYearGregorian,\n  DayOfYearJulian,\n  DayOfYear,\n  DayOfYearToCalendar,\n  DayOfYearToCalendarGregorian,\n  DayOfYearToCalendarJulian\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module jm\n */\n/**\n * JM: Chapter 9, Jewish and Moslem Calendars.\n *\n * The Jewish calendar routines are implemented as a monolithic function,\n * because computations of the various results build off of common\n * intermediate results.\n *\n * The Moslem calendar routines break down nicely into some separate functions.\n *\n * Included in these are two functions that convert between Gregorian and\n * Julian calendar days without going through Julian day (JD).  As such,\n * I suppose, these or similar routines are not in chapter 7, Julian Day.\n * Package base might also be a suitable place for these, but I'm not sure\n * they are used anywhere else in the book.  Anyway, they have the quirk\n * that they are not direct inverses:  JulianToGregorian returns the day number\n * of the day of the Gregorian year, but GregorianToJulian wants the Gregorian\n * month and day of month as input.\n */\n\nimport base from './base.js'\nimport julian from './julian.js'\n\nconst int = Math.trunc\n\n/**\n * JewishCalendar returns interesting dates and facts about a given year.\n *\n * Input is a Julian or Gregorian year.\n *\n * Outputs:\n *  A:      (int) Year number in the Jewish Calendar\n *  mP:     (int) Month number of Pesach.\n *  dP:     (int) Day number of Pesach.\n *  mNY:    (int) Month number of the Jewish new year.\n *  dNY:    (int) Day number of the Jewish new year.\n *  months: (int) Number of months in this year.\n *  days:   (int) Number of days in this year.\n */\nexport function JewishCalendar (y) {\n  const A = y + 3760\n  const D = bigD(y)\n  let mP = 3\n  let dP = D\n  if (dP > 31) {\n    mP++\n    dP -= 31\n  }\n  // A simplification of Meeus's rule to add 163 days.  Months of Pesach\n  // are either March or April with D based off of March.  Months of New\n  // year are either September or August so D+163-(days from March to\n  // September == 184) = D-21 must be based off of September.\n  let mNY = 9\n  let dNY = D - 21\n  if (dNY > 30) {\n    mNY++\n    dNY -= 30\n  }\n  let months = 12\n  switch (A % 19) {\n    case 0:\n    case 3:\n    case 6:\n    case 8:\n    case 11:\n    case 14:\n    case 17:\n      months++\n      break\n  }\n  // Similarly, A simplification of Meeus's rule to take the difference\n  // in calendar days from NY of one year to NY of the next.  NY is based\n  // on D, so difference in D is difference in day numbers of year.  Result\n  // is sum of this number and the number of days in the Western calandar\n  // year.\n  const y1 = y + 1\n  let lf = julian.LeapYearGregorian\n  if (y1 < 1583) {\n    lf = julian.LeapYearJulian\n  }\n  let days = 365\n  if (lf(y1)) {\n    days++\n  }\n  days += bigD(y1) - D\n  return [A, mP, dP, mNY, dNY, months, days]\n}\n\nconst bigD = function (y) { // (y int)  int\n  const C = base.floorDiv(y, 100)\n  // const S int\n  let S = 0\n  if (y >= 1583) {\n    S = int(base.floorDiv(3 * C - 5, 4))\n  }\n  const a = (12 * y + 12) % 19\n  const b = y % 4\n  const Q = -1.904412361576 + 1.554241796621 * (a) + 0.25 * (b) -\n    0.003177794022 * (y) + (S)\n  const fq = Math.floor(Q)\n  const iq = int(fq)\n  const j = (iq + 3 * y + 5 * b + 2 - S) % 7\n  const r = Q - fq\n  // const D int\n  let D\n  if (j === 2 || j === 4 || j === 6) {\n    D = iq + 23\n  } else if (j === 1 && a > 6 && r >= 0.63287037) {\n    D = iq + 24\n  } else if (j === 0 && a > 11 && r >= 0.897723765) {\n    D = iq + 23\n  } else {\n    D = iq + 22\n  }\n  return int(D)\n}\n\n/**\n * MoslemToJD converts a Moslem calendar date to a Julian Day.\n * @param {Number} y - year in moslem calendar\n * @param {Number} m - month\n * @param {Number} d - day\n * @returns {Number} jd - Julian day\n */\nexport function MoslemToJD (y, m, d) { // (y, m, d int)  (jY, jDN int)\n  const N = d + base.floorDiv(295001 * (m - 1) + 9900, 10000)\n  const Q = base.floorDiv(y, 30)\n  const R = y % 30\n  const A = base.floorDiv(11 * R + 3, 30)\n  const W = 404 * Q + 354 * R + 208 + A\n  const Q1 = base.floorDiv(W, 1461)\n  const Q2 = W % 1461\n  const G = 621 + 28 * Q + 4 * Q1\n  const K = base.floorDiv(Q2 * 10000, 3652422)\n  const E = base.floorDiv(3652422 * K, 10000)\n  let J = Q2 - E + N - 1\n  let X = G + K\n  if (J > 366 && X % 4 === 0) {\n    J -= 366\n    X++\n  } else if (J > 365 && X % 4 > 0) {\n    J -= 365\n    X++\n  }\n  const jd = base.floorDiv(36525 * (X - 1), 100) + 1721423 + J\n  return jd\n}\n\n/**\n * MoslemLeapYear returns true if year y of the Moslem calendar is a leap year.\n * @param {Number} year\n * @returns {Boolean} true if leap year\n */\nexport function MoslemLeapYear (year) { // (y int)  bool\n  const R = year % 30\n  return (11 * R + 3) % 30 > 18\n}\n\n/**\n * @typedef {object} DateObj\n * @property {number} year\n * @property {number} month\n * @property {number} day\n */\n\n/**\n * JulianToMoslem takes a year, month, and day of the Julian calendar and returns the equivalent year, month, and day of the Moslem calendar.\n *\n * @param {Number} y - julian year\n * @param {Number} m - julian month\n * @param {Number} d - julian day\n * @returns {DateObj}\n */\nexport function JulianToMoslem (y, m, d) { // (y, m, d int)  (my, mm, md int)\n  let W = 2\n  if (y % 4 === 0) {\n    W = 1\n  }\n  const N = base.floorDiv(275 * m, 9) - W * base.floorDiv(m + 9, 12) + d - 30\n  const A = int(y - 623)\n  const B = base.floorDiv(A, 4)\n  const C2 = (function (A) {\n    const C = A % 4\n    const C1 = 365.25001 * (C)\n    const C2 = Math.floor(C1)\n    if (C1 - C2 > 0.5) {\n      return int(C2) + 1\n    }\n    return int(C2)\n  })(A)\n  const Dp = 1461 * B + 170 + C2\n  const Q = base.floorDiv(Dp, 10631)\n  const R = Dp % 10631\n  const J = base.floorDiv(R, 354)\n  const K = R % 354\n  const O = base.floorDiv(11 * J + 14, 30)\n  let my = 30 * Q + J + 1\n  let JJ = K - O + N - 1\n  let days = 354\n  if (MoslemLeapYear(y)) {\n    days++\n  }\n  if (JJ > days) {\n    JJ -= days\n    my++\n  }\n  let mm\n  let md\n  if (JJ === 355) {\n    mm = 12\n    md = 30\n  } else {\n    const S = base.floorDiv((JJ - 1) * 10, 295)\n    mm = 1 + S\n    md = base.floorDiv(10 * JJ - 295 * S, 10)\n  }\n  return { year: my, month: mm, day: md }\n}\n\n/**\n * An MMonth specifies a month of the Moslum Calendar (Muharram = 1, ...).\n *\n * Upgraded to Unicode from the spellings given by Meeus.\n * Source: http://en.wikipedia.org/wiki/Islamic_calendar.\n */\nconst mmonths = [\n  '',\n  'Muḥarram',\n  'Ṣafar',\n  'Rabīʿ I',\n  'Rabīʿ II',\n  'Jumādā I',\n  'Jumādā II',\n  'Rajab',\n  'Shaʿbān',\n  'Ramaḍān',\n  'Shawwāl',\n  'Dhū al-Qaʿda',\n  'Dhū al-Ḥijja'\n]\n\n/**\n * String returns the Romanization of the month (\"Muḥarram\", \"Ṣafar\", ...).\n */\nexport function moslemMonth (m) {\n  return mmonths[m]\n}\n\nexport default {\n  JewishCalendar,\n  MoslemToJD,\n  MoslemLeapYear,\n  JulianToMoslem,\n  moslemMonth\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module jupiter\n */\n/**\n * Jupiter: Chapter 42, Ephemeris for Physical Observations of Jupiter.\n */\n\nimport base from './base.js'\nimport nutation from './nutation.js'\nimport planetposition, { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\n\n/**\n * Physical computes quantities for physical observations of Jupiter.\n *\n * All angular results in radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @param {Planet} earth\n * @param {Planet} jupiter\n * @return {Array}\n *    {number} DS - Planetocentric declination of the Sun.\n *    {number} DE - Planetocentric declination of the Earth.\n *    {number} ω1 - Longitude of the System I central meridian of the illuminated disk,\n *                  as seen from Earth.\n *    {number} ω2 - Longitude of the System II central meridian of the illuminated disk,\n *                  as seen from Earth.\n *    {number} P -  Geocentric position angle of Jupiter's northern rotation pole.\n */\nexport function physical (jde, earth, jupiter) { // (jde float64, earth, jupiter *pp.V87Planet)  (DS, DE, ω1, ω2, P float64)\n  // Step 1.0\n  const d = jde - 2433282.5\n  const T1 = d / base.JulianCentury\n  const p = Math.PI / 180\n  const α0 = 268 * p + 0.1061 * p * T1\n  const δ0 = 64.5 * p - 0.0164 * p * T1\n  // Step 2.0\n  const W1 = 17.71 * p + 877.90003539 * p * d\n  const W2 = 16.838 * p + 870.27003539 * p * d\n  // Step 3.0\n  const pos = earth.position(jde)\n  let [l0, b0, R] = [pos.lon, pos.lat, pos.range]\n  const fk5 = planetposition.toFK5(l0, b0, jde)\n  l0 = fk5.lon\n  b0 = fk5.lat\n  // Steps 4-7.\n  const [sl0, cl0] = base.sincos(l0)\n  const sb0 = Math.sin(b0)\n  let Δ = 4.0 // surely better than 0.0\n\n  let l = 0\n  let b = 0\n  let r = 0\n  let x = 0\n  let y = 0\n  let z = 0\n\n  const f = function () {\n    const τ = base.lightTime(Δ)\n    const pos = jupiter.position(jde - τ)\n    l = pos.lon\n    b = pos.lat\n    r = pos.range\n    const fk5 = planetposition.toFK5(l, b, jde)\n    l = fk5.lon\n    b = fk5.lat\n    const [sb, cb] = base.sincos(b)\n    const [sl, cl] = base.sincos(l)\n    // (42.2) p. 289\n    x = r * cb * cl - R * cl0\n    y = r * cb * sl - R * sl0\n    z = r * sb - R * sb0\n    // (42.3) p. 289\n    Δ = Math.sqrt(x * x + y * y + z * z)\n  }\n  f()\n  f()\n\n  // Step 8.0\n  const ε0 = nutation.meanObliquity(jde)\n  // Step 9.0\n  const [sε0, cε0] = base.sincos(ε0)\n  const [sl, cl] = base.sincos(l)\n  const [sb, cb] = base.sincos(b)\n  const αs = Math.atan2(cε0 * sl - sε0 * sb / cb, cl)\n  const δs = Math.asin(cε0 * sb + sε0 * cb * sl)\n  // Step 10.0\n  const [sδs, cδs] = base.sincos(δs)\n  const [sδ0, cδ0] = base.sincos(δ0)\n  const DS = Math.asin(-sδ0 * sδs - cδ0 * cδs * Math.cos(α0 - αs))\n  // Step 11.0\n  const u = y * cε0 - z * sε0\n  const v = y * sε0 + z * cε0\n  let α = Math.atan2(u, x)\n  let δ = Math.atan(v / Math.hypot(x, u))\n  const [sδ, cδ] = base.sincos(δ)\n  const [sα0α, cα0α] = base.sincos(α0 - α)\n  const ζ = Math.atan2(sδ0 * cδ * cα0α - sδ * cδ0, cδ * sα0α)\n  // Step 12.0\n  const DE = Math.asin(-sδ0 * sδ - cδ0 * cδ * Math.cos(α0 - α))\n  // Step 13.0\n  let ω1 = W1 - ζ - 5.07033 * p * Δ\n  let ω2 = W2 - ζ - 5.02626 * p * Δ\n  // Step 14.0\n  let C = (2 * r * Δ + R * R - r * r - Δ * Δ) / (4 * r * Δ)\n  if (Math.sin(l - l0) < 0) {\n    C = -C\n  }\n  ω1 = base.pmod(ω1 + C, 2 * Math.PI)\n  ω2 = base.pmod(ω2 + C, 2 * Math.PI)\n  // Step 15.0\n  const [Δψ, Δε] = nutation.nutation(jde)\n  const ε = ε0 + Δε\n  // Step 16.0\n  const [sε, cε] = base.sincos(ε)\n  const [sα, cα] = base.sincos(α)\n  α += 0.005693 * p * (cα * cl0 * cε + sα * sl0) / cδ\n  δ += 0.005693 * p * (cl0 * cε * (sε / cε * cδ - sα * sδ) + cα * sδ * sl0)\n  // Step 17.0\n  const tδ = sδ / cδ\n  const Δα = (cε + sε * sα * tδ) * Δψ - cα * tδ * Δε\n  const Δδ = sε * cα * Δψ + sα * Δε\n  const αʹ = α + Δα\n  const δʹ = δ + Δδ\n  const [sα0, cα0] = base.sincos(α0)\n  const tδ0 = sδ0 / cδ0\n  const Δα0 = (cε + sε * sα0 * tδ0) * Δψ - cα0 * tδ0 * Δε\n  const Δδ0 = sε * cα0 * Δψ + sα0 * Δε\n  const α0ʹ = α0 + Δα0\n  const δ0ʹ = δ0 + Δδ0\n  // Step 18.0\n  const [sδʹ, cδʹ] = base.sincos(δʹ)\n  const [sδ0ʹ, cδ0ʹ] = base.sincos(δ0ʹ)\n  const [sα0ʹαʹ, cα0ʹαʹ] = base.sincos(α0ʹ - αʹ)\n  // (42.4) p. 290\n  let P = Math.atan2(cδ0ʹ * sα0ʹαʹ, sδ0ʹ * cδʹ - cδ0ʹ * sδʹ * cα0ʹαʹ)\n  if (P < 0) {\n    P += 2 * Math.PI\n  }\n  return [DS, DE, ω1, ω2, P]\n}\n\n/**\n * Physical2 computes quantities for physical observations of Jupiter.\n *\n * Results are less accurate than with Physical().\n * All angular results in radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @return {Array}\n *    {number} DS - Planetocentric declination of the Sun.\n *    {number} DE - Planetocentric declination of the Earth.\n *    {number} ω1 - Longitude of the System I central meridian of the illuminated disk,\n *                  as seen from Earth.\n *    {number} ω2 - Longitude of the System II central meridian of the illuminated disk,\n *                  as seen from Earth.\n */\nexport function physical2 (jde) { // (jde float64)  (DS, DE, ω1, ω2 float64)\n  const d = jde - base.J2000\n  const p = Math.PI / 180\n  const V = 172.74 * p + 0.00111588 * p * d\n  const M = 357.529 * p + 0.9856003 * p * d\n  const sV = Math.sin(V)\n  const N = 20.02 * p + 0.0830853 * p * d + 0.329 * p * sV\n  const J = 66.115 * p + 0.9025179 * p * d - 0.329 * p * sV\n  const [sM, cM] = base.sincos(M)\n  const [sN, cN] = base.sincos(N)\n  const [s2M, c2M] = base.sincos(2 * M)\n  const [s2N, c2N] = base.sincos(2 * N)\n  const A = 1.915 * p * sM + 0.02 * p * s2M\n  const B = 5.555 * p * sN + 0.168 * p * s2N\n  const K = J + A - B\n  const R = 1.00014 - 0.01671 * cM - 0.00014 * c2M\n  const r = 5.20872 - 0.25208 * cN - 0.00611 * c2N\n  const [sK, cK] = base.sincos(K)\n  const Δ = Math.sqrt(r * r + R * R - 2 * r * R * cK)\n  const ψ = Math.asin(R / Δ * sK)\n  const dd = d - Δ / 173\n  let ω1 = 210.98 * p + 877.8169088 * p * dd + ψ - B\n  let ω2 = 187.23 * p + 870.1869088 * p * dd + ψ - B\n  let C = Math.sin(ψ / 2)\n  C *= C\n  if (sK > 0) {\n    C = -C\n  }\n  ω1 = base.pmod(ω1 + C, 2 * Math.PI)\n  ω2 = base.pmod(ω2 + C, 2 * Math.PI)\n  const λ = 34.35 * p + 0.083091 * p * d + 0.329 * p * sV + B\n  const DS = 3.12 * p * Math.sin(λ + 42.8 * p)\n  const DE = DS - 2.22 * p * Math.sin(ψ) * Math.cos(λ + 22 * p) -\n    1.3 * p * (r - Δ) / Δ * Math.sin(λ - 100.5 * p)\n  return [DS, DE, ω1, ω2]\n}\n\nexport default {\n  physical,\n  physical2\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module planetelements\n */\n/**\n * Planetelements: Chapter 31, Elements of Planetary Orbits.\n *\n * Partial:  Only implemented for mean equinox of date.\n */\n\nimport base from './base.js'\n\n// planet names used in cMean\nexport const mercury = 'mercury'\nexport const venus = 'venus'\nexport const earth = 'earth'\nexport const mars = 'mars'\nexport const jupiter = 'jupiter'\nexport const saturn = 'saturn'\nexport const uranus = 'uranus'\nexport const neptune = 'neptune'\n\n/**\n * Elements contains orbital elements as returned by functions in this package.\n *\n * Some other elements easily derived from these are\n *\n *  Mean Anomolay, M = Lon - Peri\n *  Argument of Perihelion, ω = Peri - Node\n *\n * @param {Number|Object} [lon]  - mean longitude, L\n * @param {Number} [axis] - semimajor axis, a\n * @param {Number} [ecc]  - eccentricity, e\n * @param {Number} [inc]  - inclination, i\n * @param {Number} [node] - longitude of ascending node, Ω\n * @param {Number} [peri] - longitude of perihelion, ϖ (Meeus likes π better)\n */\nexport function Elements (lon, axis, ecc, inc, node, peri) {\n  const o = (typeof lon === 'object' ? lon : {})\n  this.lon = o.lon || lon\n  this.axis = o.axis || axis\n  this.ecc = o.ecc || ecc\n  this.inc = o.inc || inc\n  this.node = o.node || node\n  this.peri = o.peri || peri\n}\n\n/**\n * Table 31.A, p. 212\n */\nconst cMean = {\n  mercury: { // Mercury\n    L: [252.250906, 149474.0722491, 0.0003035, 0.000000018],\n    a: [0.38709831],\n    e: [0.20563175, 0.000020407, -0.0000000283, -0.00000000018],\n    i: [7.004986, 0.0018215, -0.0000181, 0.000000056],\n    Ω: [48.330893, 1.1861883, 0.00017542, 0.000000215],\n    ϖ: [77.456119, 1.5564776, 0.00029544, 0.000000009]\n  },\n  venus: { // Venus\n    L: [181.979801, 58519.2130302, 0.00031014, 0.000000015],\n    a: [0.72332982],\n    e: [0.00677192, -0.000047765, 0.0000000981, 0.00000000046],\n    i: [3.394662, 0.0010037, -0.00000088, -0.000000007],\n    Ω: [76.67992, 0.9011206, 0.00040618, -0.000000093],\n    ϖ: [131.563703, 1.4022288, -0.00107618, -0.000005678]\n  },\n  earth: { // Earth\n    L: [100.466457, 36000.7698278, 0.00030322, 0.00000002],\n    a: [1.000001018],\n    e: [0.01670863, -0.000042037, -0.0000001267, 0.00000000014],\n    i: [0],\n    Ω: undefined,\n    ϖ: [102.937348, 1.7195366, 0.00045688, -0.000000018]\n  },\n  mars: { // Mars\n    L: [355.433, 19141.6964471, 0.00031052, 0.000000016],\n    a: [1.523679342],\n    e: [0.09340065, 0.000090484, -0.0000000806, -0.00000000025],\n    i: [1.849726, -0.0006011, 0.00001276, -0.000000007],\n    Ω: [49.558093, 0.7720959, 0.00001557, 0.000002267],\n    ϖ: [336.060234, 1.8410449, 0.00013477, 0.000000536]\n  },\n  jupiter: { // Jupiter\n    L: [34.351519, 3036.3027748, 0.0002233, 0.000000037],\n    a: [5.202603209, 0.0000001913],\n    e: [0.04849793, 0.000163225, -0.0000004714, -0.00000000201],\n    i: [1.303267, -0.0054965, 0.00000466, -0.000000002],\n    Ω: [100.464407, 1.0209774, 0.00040315, 0.000000404],\n    ϖ: [14.331207, 1.6126352, 0.00103042, -0.000004464]\n  },\n  saturn: { // Saturn\n    L: [50.077444, 1223.5110686, 0.00051908, -0.00000003],\n    a: [9.554909192, -0.0000021390, 0.000000004],\n    e: [0.05554814, -0.000346641, -0.0000006436, 0.0000000034],\n    i: [2.488879, -0.0037362, -0.00001519, 0.000000087],\n    Ω: [113.665503, 0.877088, -0.00012176, -0.000002249],\n    ϖ: [93.057237, 1.9637613, 0.00083753, 0.000004928]\n  },\n  uranus: { // Uranus\n    L: [314.055005, 429.8640561, 0.0003039, 0.000000026],\n    a: [19.218446062, -0.0000000372, 0.00000000098],\n    e: [0.04638122, -0.000027293, 0.0000000789, 0.00000000024],\n    i: [0.773197, 0.0007744, 0.00003749, -0.000000092],\n    Ω: [74.005957, 0.5211278, 0.00133947, 0.000018484],\n    ϖ: [173.005291, 1.486379, 0.00021406, 0.000000434]\n  },\n  neptune: { // Neptune\n    L: [304.348665, 219.8833092, 0.00030882, 0.000000018],\n    a: [30.110386869, -0.0000001663, 0.00000000069],\n    e: [0.00945575, 0.000006033, 0, -0.00000000005],\n    i: [1.769953, -0.0093082, -0.00000708, 0.000000027],\n    Ω: [131.784057, 1.1022039, 0.00025952, -0.000000637],\n    ϖ: [48.120276, 1.4262957, 0.00038434, 0.00000002]\n  }\n}\n\n/**\n * Mean returns mean orbital elements for a planet\n *\n * Argument p must be a planet const as defined above, argument e is\n * a result parameter.  A valid non-undefined pointer to an Elements struct\n * must be passed in.\n *\n * Results are referenced to mean dynamical ecliptic and equinox of date.\n *\n * Semimajor axis is in AU, angular elements are in radians.\n */\nexport function mean (p, jde, e) {\n  const T = base.J2000Century(jde)\n  const c = cMean[p]\n  e = e || new Elements()\n  e.lon = base.pmod(base.horner(T, c.L) * Math.PI / 180, 2 * Math.PI)\n  e.axis = base.horner(T, c.a)\n  e.ecc = base.horner(T, c.e)\n  e.inc = base.horner(T, c.i) * Math.PI / 180\n  e.node = base.horner(T, c.Ω) * Math.PI / 180\n  e.peri = base.horner(T, c.ϖ) * Math.PI / 180\n  return e\n}\n\n/**\n * Inc returns mean inclination for a planet at a date.\n *\n * Result is the same as the Inc field returned by function Mean.  That is,\n * radians, referenced to mean dynamical ecliptic and equinox of date.\n */\nexport function inc (p, jde) { // (p int, jde float64)  float64\n  return base.horner(base.J2000Century(jde), cMean[p].i) * Math.PI / 180\n}\n\n/**\n * Node returns mean longitude of ascending node for a planet at a date.\n *\n * Result is the same as the Node field returned by function Mean.  That is,\n * radians, referenced to mean dynamical ecliptic and equinox of date.\n */\nexport function node (p, jde) { // (p int, jde float64)  float64\n  return base.horner(base.J2000Century(jde), cMean[p].Ω) * Math.PI / 180\n}\n\nexport default {\n  mercury,\n  venus,\n  earth,\n  mars,\n  jupiter,\n  saturn,\n  uranus,\n  neptune,\n  Elements,\n  mean,\n  inc,\n  node\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module jupitermoons\n */\n/**\n * Jupitermoons: Chapter 44, Positions of the Satellites of Jupiter.\n */\n\nimport base from './base.js'\nimport planetelements from './planetelements.js'\nimport solar from './solar.js'\nimport { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\n\n// Moon names in order of position in Array\nexport const io = 0\nexport const europa = 1\nexport const ganymede = 2\nexport const callisto = 3\n\nconst k = [17295, 21819, 27558, 36548]\n\n/**\n * XY used for returning coordinates of moons.\n * @param {number} x - in units of Jupiter radii\n * @param {number} y - in units of Jupiter radii\n */\nfunction XY (x, y) {\n  this.x = x\n  this.y = y\n}\n\n/**\n * Positions computes positions of moons of Jupiter.\n *\n * Returned coordinates are in units of Jupiter radii.\n *\n * @param {Number} jde - Julian ephemeris day\n * @return {Array} x, y - coordinates of the 4 Satellites of jupiter\n */\nexport function positions (jde) {\n  const d = jde - base.J2000\n  const p = Math.PI / 180\n  const V = 172.74 * p + 0.00111588 * p * d\n  const M = 357.529 * p + 0.9856003 * p * d\n  const sV = Math.sin(V)\n  const N = 20.02 * p + 0.0830853 * p * d + 0.329 * p * sV\n  const J = 66.115 * p + 0.9025179 * p * d - 0.329 * p * sV\n  const [sM, cM] = base.sincos(M)\n  const [sN, cN] = base.sincos(N)\n  const [s2M, c2M] = base.sincos(2 * M)\n  const [s2N, c2N] = base.sincos(2 * N)\n  const A = 1.915 * p * sM + 0.02 * p * s2M\n  const B = 5.555 * p * sN + 0.168 * p * s2N\n  const K = J + A - B\n  const R = 1.00014 - 0.01671 * cM - 0.00014 * c2M\n  const r = 5.20872 - 0.25208 * cN - 0.00611 * c2N\n  const [sK, cK] = base.sincos(K)\n  const Δ = Math.sqrt(r * r + R * R - 2 * r * R * cK)\n  const ψ = Math.asin(R / Δ * sK)\n  const λ = 34.35 * p + 0.083091 * p * d + 0.329 * p * sV + B\n  const DS = 3.12 * p * Math.sin(λ + 42.8 * p)\n  const DE = DS - 2.22 * p * Math.sin(ψ) * Math.cos(λ + 22 * p) -\n    1.3 * p * (r - Δ) / Δ * Math.sin(λ - 100.5 * p)\n  const dd = d - Δ / 173\n  const u1 = 163.8069 * p + 203.4058646 * p * dd + ψ - B\n  const u2 = 358.414 * p + 101.2916335 * p * dd + ψ - B\n  const u3 = 5.7176 * p + 50.234518 * p * dd + ψ - B\n  const u4 = 224.8092 * p + 21.48798 * p * dd + ψ - B\n  const G = 331.18 * p + 50.310482 * p * dd\n  const H = 87.45 * p + 21.569231 * p * dd\n  const [s212, c212] = base.sincos(2 * (u1 - u2))\n  const [s223, c223] = base.sincos(2 * (u2 - u3))\n  const [sG, cG] = base.sincos(G)\n  const [sH, cH] = base.sincos(H)\n  const c1 = 0.473 * p * s212\n  const c2 = 1.065 * p * s223\n  const c3 = 0.165 * p * sG\n  const c4 = 0.843 * p * sH\n  const r1 = 5.9057 - 0.0244 * c212\n  const r2 = 9.3966 - 0.0882 * c223\n  const r3 = 14.9883 - 0.0216 * cG\n  const r4 = 26.3627 - 0.1939 * cH\n  const sDE = Math.sin(DE)\n  const xy = function (u, r) {\n    const [su, cu] = base.sincos(u)\n    return new XY(r * su, -r * cu * sDE)\n  }\n  return [xy(u1 + c1, r1), xy(u2 + c2, r2), xy(u3 + c3, r3), xy(u4 + c4, r4)]\n}\n\n/**\n * Positions computes positions of moons of Jupiter.\n *\n * High accuracy method based on theory \"E5\"  Results returned in\n * argument pos, which must not be undefined.  Returned coordinates in units\n * of Jupiter radii.\n *\n * @param {Number} jde - Julian ephemeris day\n * @param {Planet} earth - VSOP87 Planet earth\n * @param {Planet} jupiter - VSOP87 Planet jupiter\n * @param {Array} [pos] - reference to array of positions (same as return value)\n * @return {Array} x, y - coordinates of the 4 Satellites of jupiter\n */\nexport function e5 (jde, earth, jupiter, pos) {\n  pos = pos || new Array(4)\n\n  // variables assigned in following block\n  let λ0, β0, t\n  let Δ = 5.0\n\n  ;(function () {\n    const { lon, lat, range } = solar.trueVSOP87(earth, jde)\n    const [s, β, R] = [lon, lat, range]\n    const [ss, cs] = base.sincos(s)\n    const sβ = Math.sin(β)\n    let τ = base.lightTime(Δ)\n    let x = 0\n    let y = 0\n    let z = 0\n\n    function f () {\n      const { lon, lat, range } = jupiter.position(jde - τ)\n      const [sl, cl] = base.sincos(lon)\n      const [sb, cb] = base.sincos(lat)\n      x = range * cb * cl + R * cs\n      y = range * cb * sl + R * ss\n      z = range * sb + R * sβ\n      Δ = Math.sqrt(x * x + y * y + z * z)\n      τ = base.lightTime(Δ)\n    }\n\n    f()\n    f()\n\n    λ0 = Math.atan2(y, x)\n    β0 = Math.atan(z / Math.hypot(x, y))\n    t = jde - 2443000.5 - τ\n  })()\n\n  const p = Math.PI / 180\n  const l1 = 106.07719 * p + 203.48895579 * p * t\n  const l2 = 175.73161 * p + 101.374724735 * p * t\n  const l3 = 120.55883 * p + 50.317609207 * p * t\n  const l4 = 84.44459 * p + 21.571071177 * p * t\n  const π1 = 97.0881 * p + 0.16138586 * p * t\n  const π2 = 154.8663 * p + 0.04726307 * p * t\n  const π3 = 188.184 * p + 0.00712734 * p * t\n  const π4 = 335.2868 * p + 0.00184 * p * t\n  const ω1 = 312.3346 * p - 0.13279386 * p * t\n  const ω2 = 100.4411 * p - 0.03263064 * p * t\n  const ω3 = 119.1942 * p - 0.00717703 * p * t\n  const ω4 = 322.6186 * p - 0.00175934 * p * t\n  const Γ = 0.33033 * p * Math.sin(163.679 * p + 0.0010512 * p * t) +\n    0.03439 * p * Math.sin(34.486 * p - 0.0161731 * p * t)\n  const Φλ = 199.6766 * p + 0.1737919 * p * t\n  let ψ = 316.5182 * p - 0.00000208 * p * t\n  const G = 30.23756 * p + 0.0830925701 * p * t + Γ\n  const Gʹ = 31.97853 * p + 0.0334597339 * p * t\n  const Π = 13.469942 * p\n\n  const Σ1 = 0.47259 * p * Math.sin(2 * (l1 - l2)) +\n    -0.03478 * p * Math.sin(π3 - π4) +\n    0.01081 * p * Math.sin(l2 - 2 * l3 + π3) +\n    0.00738 * p * Math.sin(Φλ) +\n    0.00713 * p * Math.sin(l2 - 2 * l3 + π2) +\n    -0.00674 * p * Math.sin(π1 + π3 - 2 * Π - 2 * G) +\n    0.00666 * p * Math.sin(l2 - 2 * l3 + π4) +\n    0.00445 * p * Math.sin(l1 - π3) +\n    -0.00354 * p * Math.sin(l1 - l2) +\n    -0.00317 * p * Math.sin(2 * ψ - 2 * Π) +\n    0.00265 * p * Math.sin(l1 - π4) +\n    -0.00186 * p * Math.sin(G) +\n    0.00162 * p * Math.sin(π2 - π3) +\n    0.00158 * p * Math.sin(4 * (l1 - l2)) +\n    -0.00155 * p * Math.sin(l1 - l3) +\n    -0.00138 * p * Math.sin(ψ + ω3 - 2 * Π - 2 * G) +\n    -0.00115 * p * Math.sin(2 * (l1 - 2 * l2 + ω2)) +\n    0.00089 * p * Math.sin(π2 - π4) +\n    0.00085 * p * Math.sin(l1 + π3 - 2 * Π - 2 * G) +\n    0.00083 * p * Math.sin(ω2 - ω3) +\n    0.00053 * p * Math.sin(ψ - ω2)\n  const Σ2 = 1.06476 * p * Math.sin(2 * (l2 - l3)) +\n    0.04256 * p * Math.sin(l1 - 2 * l2 + π3) +\n    0.03581 * p * Math.sin(l2 - π3) +\n    0.02395 * p * Math.sin(l1 - 2 * l2 + π4) +\n    0.01984 * p * Math.sin(l2 - π4) +\n    -0.01778 * p * Math.sin(Φλ) +\n    0.01654 * p * Math.sin(l2 - π2) +\n    0.01334 * p * Math.sin(l2 - 2 * l3 + π2) +\n    0.01294 * p * Math.sin(π3 - π4) +\n    -0.01142 * p * Math.sin(l2 - l3) +\n    -0.01057 * p * Math.sin(G) +\n    -0.00775 * p * Math.sin(2 * (ψ - Π)) +\n    0.00524 * p * Math.sin(2 * (l1 - l2)) +\n    -0.0046 * p * Math.sin(l1 - l3) +\n    0.00316 * p * Math.sin(ψ - 2 * G + ω3 - 2 * Π) +\n    -0.00203 * p * Math.sin(π1 + π3 - 2 * Π - 2 * G) +\n    0.00146 * p * Math.sin(ψ - ω3) +\n    -0.00145 * p * Math.sin(2 * G) +\n    0.00125 * p * Math.sin(ψ - ω4) +\n    -0.00115 * p * Math.sin(l1 - 2 * l3 + π3) +\n    -0.00094 * p * Math.sin(2 * (l2 - ω2)) +\n    0.00086 * p * Math.sin(2 * (l1 - 2 * l2 + ω2)) +\n    -0.00086 * p * Math.sin(5 * Gʹ - 2 * G + 52.225 * p) +\n    -0.00078 * p * Math.sin(l2 - l4) +\n    -0.00064 * p * Math.sin(3 * l3 - 7 * l4 + 4 * π4) +\n    0.00064 * p * Math.sin(π1 - π4) +\n    -0.00063 * p * Math.sin(l1 - 2 * l3 + π4) +\n    0.00058 * p * Math.sin(ω3 - ω4) +\n    0.00056 * p * Math.sin(2 * (ψ - Π - G)) +\n    0.00056 * p * Math.sin(2 * (l2 - l4)) +\n    0.00055 * p * Math.sin(2 * (l1 - l3)) +\n    0.00052 * p * Math.sin(3 * l3 - 7 * l4 + π3 + 3 * π4) +\n    -0.00043 * p * Math.sin(l1 - π3) +\n    0.00041 * p * Math.sin(5 * (l2 - l3)) +\n    0.00041 * p * Math.sin(π4 - Π) +\n    0.00032 * p * Math.sin(ω2 - ω3) +\n    0.00032 * p * Math.sin(2 * (l3 - G - Π))\n  const Σ3 = 0.1649 * p * Math.sin(l3 - π3) +\n    0.09081 * p * Math.sin(l3 - π4) +\n    -0.06907 * p * Math.sin(l2 - l3) +\n    0.03784 * p * Math.sin(π3 - π4) +\n    0.01846 * p * Math.sin(2 * (l3 - l4)) +\n    -0.0134 * p * Math.sin(G) +\n    -0.01014 * p * Math.sin(2 * (ψ - Π)) +\n    0.00704 * p * Math.sin(l2 - 2 * l3 + π3) +\n    -0.0062 * p * Math.sin(l2 - 2 * l3 + π2) +\n    -0.00541 * p * Math.sin(l3 - l4) +\n    0.00381 * p * Math.sin(l2 - 2 * l3 + π4) +\n    0.00235 * p * Math.sin(ψ - ω3) +\n    0.00198 * p * Math.sin(ψ - ω4) +\n    0.00176 * p * Math.sin(Φλ) +\n    0.0013 * p * Math.sin(3 * (l3 - l4)) +\n    0.00125 * p * Math.sin(l1 - l3) +\n    -0.00119 * p * Math.sin(5 * Gʹ - 2 * G + 52.225 * p) +\n    0.00109 * p * Math.sin(l1 - l2) +\n    -0.001 * p * Math.sin(3 * l3 - 7 * l4 + 4 * π4) +\n    0.00091 * p * Math.sin(ω3 - ω4) +\n    0.0008 * p * Math.sin(3 * l3 - 7 * l4 + π3 + 3 * π4) +\n    -0.00075 * p * Math.sin(2 * l2 - 3 * l3 + π3) +\n    0.00072 * p * Math.sin(π1 + π3 - 2 * Π - 2 * G) +\n    0.00069 * p * Math.sin(π4 - Π) +\n    -0.00058 * p * Math.sin(2 * l3 - 3 * l4 + π4) +\n    -0.00057 * p * Math.sin(l3 - 2 * l4 + π4) +\n    0.00056 * p * Math.sin(l3 + π3 - 2 * Π - 2 * G) +\n    -0.00052 * p * Math.sin(l2 - 2 * l3 + π1) +\n    -0.00050 * p * Math.sin(π2 - π3) +\n    0.00048 * p * Math.sin(l3 - 2 * l4 + π3) +\n    -0.00045 * p * Math.sin(2 * l2 - 3 * l3 + π4) +\n    -0.00041 * p * Math.sin(π2 - π4) +\n    -0.00038 * p * Math.sin(2 * G) +\n    -0.00037 * p * Math.sin(π3 - π4 + ω3 - ω4) +\n    -0.00032 * p * Math.sin(3 * l3 - 7 * l4 + 2 * π3 + 2 * π4) +\n    0.0003 * p * Math.sin(4 * (l3 - l4)) +\n    0.00029 * p * Math.sin(l3 + π4 - 2 * Π - 2 * G) +\n    -0.00028 * p * Math.sin(ω3 + ψ - 2 * Π - 2 * G) +\n    0.00026 * p * Math.sin(l3 - Π - G) +\n    0.00024 * p * Math.sin(l2 - 3 * l3 + 2 * l4) +\n    0.00021 * p * Math.sin(2 * (l3 - Π - G)) +\n    -0.00021 * p * Math.sin(l3 - π2) +\n    0.00017 * p * Math.sin(2 * (l3 - π3))\n  const Σ4 = 0.84287 * p * Math.sin(l4 - π4) +\n    0.03431 * p * Math.sin(π4 - π3) +\n    -0.03305 * p * Math.sin(2 * (ψ - Π)) +\n    -0.03211 * p * Math.sin(G) +\n    -0.01862 * p * Math.sin(l4 - π3) +\n    0.01186 * p * Math.sin(ψ - ω4) +\n    0.00623 * p * Math.sin(l4 + π4 - 2 * G - 2 * Π) +\n    0.00387 * p * Math.sin(2 * (l4 - π4)) +\n    -0.00284 * p * Math.sin(5 * Gʹ - 2 * G + 52.225 * p) +\n    -0.00234 * p * Math.sin(2 * (ψ - π4)) +\n    -0.00223 * p * Math.sin(l3 - l4) +\n    -0.00208 * p * Math.sin(l4 - Π) +\n    0.00178 * p * Math.sin(ψ + ω4 - 2 * π4) +\n    0.00134 * p * Math.sin(π4 - Π) +\n    0.00125 * p * Math.sin(2 * (l4 - G - Π)) +\n    -0.00117 * p * Math.sin(2 * G) +\n    -0.00112 * p * Math.sin(2 * (l3 - l4)) +\n    0.00107 * p * Math.sin(3 * l3 - 7 * l4 + 4 * π4) +\n    0.00102 * p * Math.sin(l4 - G - Π) +\n    0.00096 * p * Math.sin(2 * l4 - ψ - ω4) +\n    0.00087 * p * Math.sin(2 * (ψ - ω4)) +\n    -0.00085 * p * Math.sin(3 * l3 - 7 * l4 + π3 + 3 * π4) +\n    0.00085 * p * Math.sin(l3 - 2 * l4 + π4) +\n    -0.00081 * p * Math.sin(2 * (l4 - ψ)) +\n    0.00071 * p * Math.sin(l4 + π4 - 2 * Π - 3 * G) +\n    0.00061 * p * Math.sin(l1 - l4) +\n    -0.00056 * p * Math.sin(ψ - ω3) +\n    -0.00054 * p * Math.sin(l3 - 2 * l4 + π3) +\n    0.00051 * p * Math.sin(l2 - l4) +\n    0.00042 * p * Math.sin(2 * (ψ - G - Π)) +\n    0.00039 * p * Math.sin(2 * (π4 - ω4)) +\n    0.00036 * p * Math.sin(ψ + Π - π4 - ω4) +\n    0.00035 * p * Math.sin(2 * Gʹ - G + 188.37 * p) +\n    -0.00035 * p * Math.sin(l4 - π4 + 2 * Π - 2 * ψ) +\n    -0.00032 * p * Math.sin(l4 + π4 - 2 * Π - G) +\n    0.0003 * p * Math.sin(2 * Gʹ - 2 * G + 149.15 * p) +\n    0.00029 * p * Math.sin(3 * l3 - 7 * l4 + 2 * π3 + 2 * π4) +\n    0.00028 * p * Math.sin(l4 - π4 + 2 * ψ - 2 * Π) +\n    -0.00028 * p * Math.sin(2 * (l4 - ω4)) +\n    -0.00027 * p * Math.sin(π3 - π4 + ω3 - ω4) +\n    -0.00026 * p * Math.sin(5 * Gʹ - 3 * G + 188.37 * p) +\n    0.00025 * p * Math.sin(ω4 - ω3) +\n    -0.00025 * p * Math.sin(l2 - 3 * l3 + 2 * l4) +\n    -0.00023 * p * Math.sin(3 * (l3 - l4)) +\n    0.00021 * p * Math.sin(2 * l4 - 2 * Π - 3 * G) +\n    -0.00021 * p * Math.sin(2 * l3 - 3 * l4 + π4) +\n    0.00019 * p * Math.sin(l4 - π4 - G) +\n    -0.00019 * p * Math.sin(2 * l4 - π3 - π4) +\n    -0.00018 * p * Math.sin(l4 - π4 + G) +\n    -0.00016 * p * Math.sin(l4 + π3 - 2 * Π - 2 * G)\n  const L1 = l1 + Σ1\n  const L2 = l2 + Σ2\n  const L3 = l3 + Σ3\n  const L4 = l4 + Σ4\n\n  // variables assigned in following block\n  let I\n  const X = new Array(5).fill(0)\n  const Y = new Array(5).fill(0)\n  const Z = new Array(5).fill(0)\n  let R\n\n  ;(function () {\n    const L = [L1, L2, L3, L4]\n    const B = [\n      Math.atan(0.0006393 * Math.sin(L1 - ω1) +\n        0.0001825 * Math.sin(L1 - ω2) +\n        0.0000329 * Math.sin(L1 - ω3) +\n        -0.0000311 * Math.sin(L1 - ψ) +\n        0.0000093 * Math.sin(L1 - ω4) +\n        0.0000075 * Math.sin(3 * L1 - 4 * l2 - 1.9927 * Σ1 + ω2) +\n        0.0000046 * Math.sin(L1 + ψ - 2 * Π - 2 * G)),\n      Math.atan(0.0081004 * Math.sin(L2 - ω2) +\n        0.0004512 * Math.sin(L2 - ω3) +\n        -0.0003284 * Math.sin(L2 - ψ) +\n        0.0001160 * Math.sin(L2 - ω4) +\n        0.0000272 * Math.sin(l1 - 2 * l3 + 1.0146 * Σ2 + ω2) +\n        -0.0000144 * Math.sin(L2 - ω1) +\n        0.0000143 * Math.sin(L2 + ψ - 2 * Π - 2 * G) +\n        0.0000035 * Math.sin(L2 - ψ + G) +\n        -0.0000028 * Math.sin(l1 - 2 * l3 + 1.0146 * Σ2 + ω3)),\n      Math.atan(0.0032402 * Math.sin(L3 - ω3) +\n        -0.0016911 * Math.sin(L3 - ψ) +\n        0.0006847 * Math.sin(L3 - ω4) +\n        -0.0002797 * Math.sin(L3 - ω2) +\n        0.0000321 * Math.sin(L3 + ψ - 2 * Π - 2 * G) +\n        0.0000051 * Math.sin(L3 - ψ + G) +\n        -0.0000045 * Math.sin(L3 - ψ - G) +\n        -0.0000045 * Math.sin(L3 + ψ - 2 * Π) +\n        0.0000037 * Math.sin(L3 + ψ - 2 * Π - 3 * G) +\n        0.000003 * Math.sin(2 * l2 - 3 * L3 + 4.03 * Σ3 + ω2) +\n        -0.0000021 * Math.sin(2 * l2 - 3 * L3 + 4.03 * Σ3 + ω3)),\n      Math.atan(-0.0076579 * Math.sin(L4 - ψ) +\n        0.0044134 * Math.sin(L4 - ω4) +\n        -0.0005112 * Math.sin(L4 - ω3) +\n        0.0000773 * Math.sin(L4 + ψ - 2 * Π - 2 * G) +\n        0.0000104 * Math.sin(L4 - ψ + G) +\n        -0.0000102 * Math.sin(L4 - ψ - G) +\n        0.0000088 * Math.sin(L4 + ψ - 2 * Π - 3 * G) +\n        -0.0000038 * Math.sin(L4 + ψ - 2 * Π - G))\n    ]\n    R = [\n      5.90569 * (1 +\n        -0.0041339 * Math.cos(2 * (l1 - l2)) +\n        -0.0000387 * Math.cos(l1 - π3) +\n        -0.0000214 * Math.cos(l1 - π4) +\n        0.000017 * Math.cos(l1 - l2) +\n        -0.0000131 * Math.cos(4 * (l1 - l2)) +\n        0.0000106 * Math.cos(l1 - l3) +\n        -0.0000066 * Math.cos(l1 + π3 - 2 * Π - 2 * G)),\n      9.39657 * (1 +\n        0.0093848 * Math.cos(l1 - l2) +\n        -0.0003116 * Math.cos(l2 - π3) +\n        -0.0001744 * Math.cos(l2 - π4) +\n        -0.0001442 * Math.cos(l2 - π2) +\n        0.0000553 * Math.cos(l2 - l3) +\n        0.0000523 * Math.cos(l1 - l3) +\n        -0.0000290 * Math.cos(2 * (l1 - l2)) +\n        0.0000164 * Math.cos(2 * (l2 - ω2)) +\n        0.0000107 * Math.cos(l1 - 2 * l3 + π3) +\n        -0.0000102 * Math.cos(l2 - π1) +\n        -0.0000091 * Math.cos(2 * (l1 - l3))),\n      14.98832 * (1 +\n        -0.0014388 * Math.cos(l3 - π3) +\n        -0.0007917 * Math.cos(l3 - π4) +\n        0.0006342 * Math.cos(l2 - l3) +\n        -0.0001761 * Math.cos(2 * (l3 - l4)) +\n        0.0000294 * Math.cos(l3 - l4) +\n        -0.0000156 * Math.cos(3 * (l3 - l4)) +\n        0.0000156 * Math.cos(l1 - l3) +\n        -0.0000153 * Math.cos(l1 - l2) +\n        0.000007 * Math.cos(2 * l2 - 3 * l3 + π3) +\n        -0.0000051 * Math.cos(l3 + π3 - 2 * Π - 2 * G)),\n      26.36273 * (1 +\n        -0.0073546 * Math.cos(l4 - π4) +\n        0.0001621 * Math.cos(l4 - π3) +\n        0.0000974 * Math.cos(l3 - l4) +\n        -0.0000543 * Math.cos(l4 + π4 - 2 * Π - 2 * G) +\n        -0.0000271 * Math.cos(2 * (l4 - π4)) +\n        0.0000182 * Math.cos(l4 - Π) +\n        0.0000177 * Math.cos(2 * (l3 - l4)) +\n        -0.0000167 * Math.cos(2 * l4 - ψ - ω4) +\n        0.0000167 * Math.cos(ψ - ω4) +\n        -0.0000155 * Math.cos(2 * (l4 - Π - G)) +\n        0.0000142 * Math.cos(2 * (l4 - ψ)) +\n        0.0000105 * Math.cos(l1 - l4) +\n        0.0000092 * Math.cos(l2 - l4) +\n        -0.0000089 * Math.cos(l4 - Π - G) +\n        -0.0000062 * Math.cos(l4 + π4 - 2 * Π - 3 * G) +\n        0.0000048 * Math.cos(2 * (l4 - ω4)))\n    ]\n    // p. 311\n    const T0 = (jde - 2433282.423) / base.JulianCentury\n    const P = (1.3966626 * p + 0.0003088 * p * T0) * T0\n    for (const i in L) {\n      L[i] += P\n    }\n    ψ += P\n    const T = (jde - base.J1900) / base.JulianCentury\n    I = 3.120262 * p + 0.0006 * p * T\n    for (const i in L) {\n      const [sLψ, cLψ] = base.sincos(L[i] - ψ)\n      const [sB, cB] = base.sincos(B[i])\n      X[i] = R[i] * cLψ * cB\n      Y[i] = R[i] * sLψ * cB\n      Z[i] = R[i] * sB\n    }\n  })()\n\n  Z[4] = 1\n  // p. 312\n  const A = new Array(5).fill(0)\n  const B = new Array(5).fill(0)\n  const C = new Array(5).fill(0)\n  const [sI, cI] = base.sincos(I)\n  const Ω = planetelements.node(planetelements.jupiter, jde)\n  const [sΩ, cΩ] = base.sincos(Ω)\n  const [sΦ, cΦ] = base.sincos(ψ - Ω)\n  const [si, ci] = base.sincos(planetelements.inc(planetelements.jupiter, jde))\n  const [sλ0, cλ0] = base.sincos(λ0)\n  const [sβ0, cβ0] = base.sincos(β0)\n\n  for (const i in A) {\n    let a0\n    // step 1\n    let a = X[i]\n    let b = Y[i] * cI - Z[i] * sI\n    let c = Y[i] * sI + Z[i] * cI\n    // step 2\n    a0 = a * cΦ - b * sΦ\n    b = a * sΦ + b * cΦ\n    a = a0\n    // step 3\n    const b0 = b * ci - c * si\n    c = b * si + c * ci\n    b = b0\n    // step 4\n    a0 = a * cΩ - b * sΩ\n    b = a * sΩ + b * cΩ\n    a = a0\n    // step 5\n    a0 = a * sλ0 - b * cλ0\n    b = a * cλ0 + b * sλ0\n    a = a0\n    // step 6\n    A[i] = a\n    B[i] = c * sβ0 + b * cβ0\n    C[i] = c * cβ0 - b * sβ0\n  }\n  const [sD, cD] = base.sincos(Math.atan2(A[4], C[4]))\n  // p. 313\n  for (let i = 0; i < 4; i++) {\n    let x = A[i] * cD - C[i] * sD\n    const y = A[i] * sD + C[i] * cD\n    const z = B[i]\n    // differential light time\n    const d = x / R[i]\n    x += Math.abs(z) / k[i] * Math.sqrt(1 - d * d)\n    // perspective effect\n    const W = Δ / (Δ + z / 2095)\n    pos[i] = new XY(x * W, y * W)\n  }\n  return pos\n}\n\nexport default {\n  io,\n  europa,\n  ganymede,\n  callisto,\n  positions,\n  e5\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module line\n */\n/**\n * Line: Chapter 19, Bodies in Straight Line\n */\n\nimport base from './base.js'\nimport interp from './interpolation.js'\n\n/**\n * Time computes the time at which a moving body is on a straight line (great\n * circle) between two fixed points, such as stars.\n *\n * Coordinates may be right ascensions and declinations or longitudes and\n * latitudes.  Fixed points are r1, d1, r2, d2.  Moving body is an ephemeris\n * of 5 rows, r3, d3, starting at time t1 and ending at time t5.  Time scale\n * is arbitrary.\n *\n * @throws Error\n * @param {Number} r1 - right ascension Coordinate 1\n * @param {Number} d1 - declination Coordinate 1\n * @param {Number} r2 - right ascension Coordinate 2\n * @param {Number} d2 - declination Coordinate 2\n * @param {Number[]} r3 - right ascension Coordinate 3\n * @param {Number[]} d3 - declination Coordinate 3\n * @param {Number} t1 - time in Julian Days\n * @param {Number} t5 - time in Julian Days\n * @returns {Number} time of alignment in Julian Days\n */\nexport function time (r1, d1, r2, d2, r3, d3, t1, t5) { // (r1, d1, r2, d2 float64, r3, d3 []float64, t1, t5 float64)  (float64, error)\n  if (r3.length !== 5 || d3.length !== 5) {\n    throw new Error('r3, d3 must be length 5')\n  }\n  const gc = new Array(5)\n  r3.forEach((r3i, i) => {\n    // (19.1) p. 121\n    gc[i] = Math.tan(d1) * Math.sin(r2 - r3i) +\n      Math.tan(d2) * Math.sin(r3i - r1) +\n      Math.tan(d3[i]) * Math.sin(r1 - r2)\n  })\n  const l5 = new interp.Len5(t1, t5, gc)\n  return l5.zero(false)\n}\n\n/**\n * Angle returns the angle between great circles defined by three points.\n *\n * Coordinates may be right ascensions and declinations or longitudes and\n * latitudes.  If r1, d1, r2, d2 defines one line and r2, d2, r3, d3 defines\n * another, the result is the angle between the two lines.\n *\n * Algorithm by Meeus.\n */\nexport function angle (r1, d1, r2, d2, r3, d3) { // (r1, d1, r2, d2, r3, d3 float64)  float64\n  const [sd2, cd2] = base.sincos(d2)\n  const [sr21, cr21] = base.sincos(r2 - r1)\n  const [sr32, cr32] = base.sincos(r3 - r2)\n  const C1 = Math.atan2(sr21, cd2 * Math.tan(d1) - sd2 * cr21)\n  const C2 = Math.atan2(sr32, cd2 * Math.tan(d3) - sd2 * cr32)\n  return C1 + C2\n}\n\n/**\n * Error returns an error angle of three nearly co-linear points.\n *\n * For the line defined by r1, d1, r2, d2, the result is the anglular distance\n * between that line and r0, d0.\n *\n * Algorithm by Meeus.\n */\nexport function error (r1, d1, r2, d2, r0, d0) { // (r1, d1, r2, d2, r0, d0 float64)  float64\n  const [sr1, cr1] = base.sincos(r1)\n  const [sd1, cd1] = base.sincos(d1)\n  const [sr2, cr2] = base.sincos(r2)\n  const [sd2, cd2] = base.sincos(d2)\n  const X1 = cd1 * cr1\n  const X2 = cd2 * cr2\n  const Y1 = cd1 * sr1\n  const Y2 = cd2 * sr2\n  const Z1 = sd1\n  const Z2 = sd2\n  const A = Y1 * Z2 - Z1 * Y2\n  const B = Z1 * X2 - X1 * Z2\n  const C = X1 * Y2 - Y1 * X2\n  const m = Math.tan(r0)\n  const n = Math.tan(d0) / Math.cos(r0)\n  return Math.asin((A + B * m + C * n) /\n    (Math.sqrt(A * A + B * B + C * C) * Math.sqrt(1 + m * m + n * n)))\n}\n\n/**\n * AngleError returns both an angle as in the function Angle, and an error\n * as in the function Error.\n *\n * The algorithm is by B. Pessens.\n *\n * @returns {Number[]} [ψ, ω]\n *  {Number} ψ - angle between great circles defined by three points.\n *  {Number} ω - error angle of three nearly co-linear points\n */\nexport function angleError (r1, d1, r2, d2, r3, d3) {\n  const [sr1, cr1] = base.sincos(r1)\n  const [c1, cd1] = base.sincos(d1)\n  const [sr2, cr2] = base.sincos(r2)\n  const [c2, cd2] = base.sincos(d2)\n  const [sr3, cr3] = base.sincos(r3)\n  const [c3, cd3] = base.sincos(d3)\n  const a1 = cd1 * cr1\n  const a2 = cd2 * cr2\n  const a3 = cd3 * cr3\n  const b1 = cd1 * sr1\n  const b2 = cd2 * sr2\n  const b3 = cd3 * sr3\n  const l1 = b1 * c2 - b2 * c1\n  const l2 = b2 * c3 - b3 * c2\n  const l3 = b1 * c3 - b3 * c1\n  const m1 = c1 * a2 - c2 * a1\n  const m2 = c2 * a3 - c3 * a2\n  const m3 = c1 * a3 - c3 * a1\n  const n1 = a1 * b2 - a2 * b1\n  const n2 = a2 * b3 - a3 * b2\n  const n3 = a1 * b3 - a3 * b1\n  const ψ = Math.acos((l1 * l2 + m1 * m2 + n1 * n2) /\n    (Math.sqrt(l1 * l1 + m1 * m1 + n1 * n1) * Math.sqrt(l2 * l2 + m2 * m2 + n2 * n2)))\n  const ω = Math.asin((a2 * l3 + b2 * m3 + c2 * n3) /\n    (Math.sqrt(a2 * a2 + b2 * b2 + c2 * c2) * Math.sqrt(l3 * l3 + m3 * m3 + n3 * n3)))\n  return [ψ, ω]\n}\n\nexport default {\n  time,\n  angle,\n  error,\n  angleError\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module nearparabolic\n */\n/**\n * Nearparabolic: Chapter 35, Near-parabolic Motion.\n */\nimport base from './base.js'\n\n/**\n * Elements holds orbital elements for near-parabolic orbits.\n */\nexport class Elements {\n  /**\n   * @param {Number} timeP - time of Perihelion, T\n   * @param {Number} pDis - Perihelion distance, q\n   * @param {Number} ecc - eccentricity, e\n   */\n  constructor (timeP, pDis, ecc) {\n    this.timeP = timeP\n    this.pDis = pDis\n    this.ecc = ecc\n  }\n\n  /**\n   * AnomalyDistance returns true anomaly and distance for near-parabolic orbits.\n   *\n   * True anomaly ν returned in radians. Distance r returned in AU.\n   * An error is returned if the algorithm fails to converge.\n   */\n  anomalyDistance (jde) {\n    // fairly literal translation of code on p. 246\n    const q1 = base.K * Math.sqrt((1 + this.ecc) / this.pDis) / (2 * this.pDis) // line 20\n    const g = (1 - this.ecc) / (1 + this.ecc) // line 20\n\n    const t = jde - this.timeP // line 22\n    if (t === 0) { // line 24\n      return { ano: 0, dist: this.pDis, err: null }\n    }\n    const d1 = 1e4\n    const d = 1e-9 // line 14\n    const q2 = q1 * t // line 28\n    let s = 2.0 / (3 * Math.abs(q2)) // line 30\n    s = 2 / Math.tan(2 * Math.atan(Math.cbrt(Math.tan(Math.atan(s) / 2))))\n    if (t < 0) { // line 34\n      s = -s\n    }\n    if (this.ecc !== 1) { // line 36\n      let l = 0 // line 38\n      for (;;) {\n        const s0 = s // line 40\n        let z = 1.0\n        const y = s * s\n        let g1 = -y * s\n        let q3 = q2 + 2 * g * s * y / 3 // line 42\n        for (;;) {\n          z += 1 // line 44\n          g1 = -g1 * g * y // line 46\n          const z1 = (z - (z + 1) * g) / (2 * z + 1) // line 48\n          const f = z1 * g1 // line 50\n          q3 += f // line 52\n          if (z > 50 || Math.abs(f) > d1) { // line 54\n            return {\n              err: new Error('No convergence')\n            }\n          }\n          if (Math.abs(f) <= d) { // line 56\n            break\n          }\n        }\n        l++ // line 58\n        if (l > 50) {\n          return {\n            err: new Error('No convergence')\n          }\n        }\n        for (;;) {\n          const s1 = s // line 60\n          s = (2 * s * s * s / 3 + q3) / (s * s + 1)\n          if (Math.abs(s - s1) <= d) { // line 62\n            break\n          }\n        }\n        if (Math.abs(s - s0) <= d) { // line 64\n          break\n        }\n      }\n    }\n    let ν = 2 * Math.atan(s) // line 66\n    const r = this.pDis * (1 + this.ecc) / (1 + this.ecc * Math.cos(ν)) // line 68\n    if (ν < 0) { // line 70\n      ν += 2 * Math.PI\n    }\n    return {\n      ano: ν,\n      dist: r,\n      err: null\n    }\n  }\n}\n\nexport default {\n  Elements\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module node\n */\n/**\n * Node: Chapter 39, Passages through the Nodes.\n */\n\nimport base from './base.js'\n\n/**\n * EllipticAscending computes time and distance of passage through the ascending node of a body in an elliptical orbit.\n *\n * Argument axis is semimajor axis in AU, ecc is eccentricity, argP is argument\n * of perihelion in radians, timeP is time of perihelion as a jd.\n *\n * Result is jde of the event and distance from the sun in AU.\n */\nexport function ellipticAscending (axis, ecc, argP, timeP) { // (axis, ecc, argP, timeP float64)  (jde, r float64)\n  return el(-argP, axis, ecc, timeP)\n}\n\n/**\n * EllipticAscending computes time and distance of passage through the descending node of a body in an elliptical orbit.\n *\n * Argument axis is semimajor axis in AU, ecc is eccentricity, argP is argument\n * of perihelion in radians, timeP is time of perihelion as a jd.\n *\n * Result is jde of the event and distance from the sun in AU.\n */\nexport function ellipticDescending (axis, ecc, argP, timeP) { // (axis, ecc, argP, timeP float64)  (jde, r float64)\n  return el(Math.PI - argP, axis, ecc, timeP)\n}\n\nexport function el (ν, axis, ecc, timeP) { // (ν, axis, ecc, timeP float64)  (jde, r float64)\n  const E = 2 * Math.atan(Math.sqrt((1 - ecc) / (1 + ecc)) * Math.tan(ν * 0.5))\n  const [sE, cE] = base.sincos(E)\n  const M = E - ecc * sE\n  const n = base.K / axis / Math.sqrt(axis)\n  const jde = timeP + M / n\n  const r = axis * (1 - ecc * cE)\n  return [jde, r]\n}\n\n/**\n * ParabolicAscending computes time and distance of passage through the ascending node of a body in a parabolic orbit.\n *\n * Argument q is perihelion distance in AU, argP is argument of perihelion\n * in radians, timeP is time of perihelion as a jd.\n *\n * Result is jde of the event and distance from the sun in AU.\n */\nexport function parabolicAscending (q, argP, timeP) { // (q, argP, timeP float64)  (jde, r float64)\n  return pa(-argP, q, timeP)\n}\n\n/**\n * ParabolicDescending computes time and distance of passage through the descending node of a body in a parabolic orbit.\n *\n * Argument q is perihelion distance in AU, argP is argument of perihelion\n * in radians, timeP is time of perihelion as a jd.\n *\n * Result is jde of the event and distance from the sun in AU.\n */\nexport function parabolicDescending (q, argP, timeP) { // (q, argP, timeP float64)  (jde, r float64)\n  return pa(Math.PI - argP, q, timeP)\n}\n\nexport function pa (ν, q, timeP) { // (ν, q, timeP float64)  (jde, r float64)\n  const s = Math.tan(ν * 0.5)\n  const jde = timeP + 27.403895 * s * (s * s + 3) * q * Math.sqrt(q)\n  const r = q * (1 + s * s)\n  return [jde, r]\n}\n\nexport default {\n  ellipticAscending,\n  ellipticDescending,\n  el,\n  parabolicAscending,\n  parabolicDescending,\n  pa\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module mars\n */\n/**\n * Mars: Chapter 42, Ephemeris for Physical Observations of Mars.\n */\n\nimport base from './base.js'\nimport coord from './coord.js'\nimport illum from './illum.js'\nimport nutation from './nutation.js'\nimport planetposition, { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\n\n/**\n * Physical computes quantities for physical observations of Mars.\n *\n * Results:\n *  DE  planetocentric declination of the Earth.\n *  DS  planetocentric declination of the Sun.\n *  ω   Areographic longitude of the central meridian, as seen from Earth.\n *  P   Geocentric position angle of Mars' northern rotation pole.\n *  Q   Position angle of greatest defect of illumination.\n *  d   Apparent diameter of Mars.\n *  k   Illuminated fraction of the disk.\n *  q   Greatest defect of illumination.\n *\n * All angular results (all results except k) are in radians.\n *\n * @param {number} jde - Julian ephemeris day\n * @param {Planet} earth\n * @param {Planet} mars\n */\nexport function physical (jde, earth, mars) { // (jde float64, earth, mars *pp.V87Planet)  (DE, DS, ω, P, Q, d, k, q float64)\n  // Step 1.0\n  const T = base.J2000Century(jde)\n  const p = Math.PI / 180\n  // (42.1) p. 288\n  let λ0 = 352.9065 * p + 1.1733 * p * T\n  const β0 = 63.2818 * p - 0.00394 * p * T\n  // Step 2.0\n  const earthPos = earth.position(jde)\n  const R = earthPos.range\n  const fk5 = planetposition.toFK5(earthPos.lon, earthPos.lat, jde)\n  const [l0, b0] = [fk5.lon, fk5.lat]\n  // Steps 3, 4.0\n  const [sl0, cl0] = base.sincos(l0)\n  const sb0 = Math.sin(b0)\n  let Δ = 0.5 // surely better than 0.0\n  let τ = base.lightTime(Δ)\n  let l = 0\n  let b = 0\n  let r = 0\n  let x = 0\n  let y = 0\n  let z = 0\n\n  function f () {\n    const marsPos = mars.position(jde - τ)\n    r = marsPos.range\n    const fk5 = planetposition.toFK5(marsPos.lon, marsPos.lat, jde)\n    l = fk5.lon\n    b = fk5.lat\n    const [sb, cb] = base.sincos(b)\n    const [sl, cl] = base.sincos(l)\n    // (42.2) p. 289\n    x = r * cb * cl - R * cl0\n    y = r * cb * sl - R * sl0\n    z = r * sb - R * sb0\n    // (42.3) p. 289\n    Δ = Math.sqrt(x * x + y * y + z * z)\n    τ = base.lightTime(Δ)\n  }\n\n  f()\n  f()\n  // Step 5.0\n  let λ = Math.atan2(y, x)\n  let β = Math.atan(z / Math.hypot(x, y))\n  // Step 6.0\n  const [sβ0, cβ0] = base.sincos(β0)\n  const [sβ, cβ] = base.sincos(β)\n  const DE = Math.asin(-sβ0 * sβ - cβ0 * cβ * Math.cos(λ0 - λ))\n  // Step 7.0\n  const N = 49.5581 * p + 0.7721 * p * T\n  const lʹ = l - 0.00697 * p / r\n  const bʹ = b - 0.000225 * p * Math.cos(l - N) / r\n  // Step 8.0\n  const [sbʹ, cbʹ] = base.sincos(bʹ)\n  const DS = Math.asin(-sβ0 * sbʹ - cβ0 * cbʹ * Math.cos(λ0 - lʹ))\n  // Step 9.0\n  const W = 11.504 * p + 350.89200025 * p * (jde - τ - 2433282.5)\n  // Step 10.0\n  const ε0 = nutation.meanObliquity(jde)\n  const [sε0, cε0] = base.sincos(ε0)\n  let eq = new coord.Ecliptic(λ0, β0).toEquatorial(ε0)\n  const [α0, δ0] = [eq.ra, eq.dec]\n  // Step 11.0\n  const u = y * cε0 - z * sε0\n  const v = y * sε0 + z * cε0\n  const α = Math.atan2(u, x)\n  const δ = Math.atan(v / Math.hypot(x, u))\n  const [sδ, cδ] = base.sincos(δ)\n  const [sδ0, cδ0] = base.sincos(δ0)\n  const [sα0α, cα0α] = base.sincos(α0 - α)\n  const ζ = Math.atan2(sδ0 * cδ * cα0α - sδ * cδ0, cδ * sα0α)\n  // Step 12.0\n  const ω = base.pmod(W - ζ, 2 * Math.PI)\n  // Step 13.0\n  const [Δψ, Δε] = nutation.nutation(jde)\n  // Step 14.0\n  const [sl0λ, cl0λ] = base.sincos(l0 - λ)\n  λ += 0.005693 * p * cl0λ / cβ\n  β += 0.005693 * p * sl0λ * sβ\n  // Step 15.0\n  λ0 += Δψ\n  λ += Δψ\n  const ε = ε0 + Δε\n  // Step 16.0\n  const [sε, cε] = base.sincos(ε)\n  eq = new coord.Ecliptic(λ0, β0).toEquatorial(ε)\n  const [α0ʹ, δ0ʹ] = [eq.ra, eq.dec]\n  eq = new coord.Ecliptic(λ, β).toEquatorial(ε)\n  const [αʹ, δʹ] = [eq.ra, eq.dec]\n  // Step 17.0\n  const [sδ0ʹ, cδ0ʹ] = base.sincos(δ0ʹ)\n  const [sδʹ, cδʹ] = base.sincos(δʹ)\n  const [sα0ʹαʹ, cα0ʹαʹ] = base.sincos(α0ʹ - αʹ)\n  // (42.4) p. 290\n  let P = Math.atan2(cδ0ʹ * sα0ʹαʹ, sδ0ʹ * cδʹ - cδ0ʹ * sδʹ * cα0ʹαʹ)\n  if (P < 0) {\n    P += 2 * Math.PI\n  }\n  // Step 18.0\n  const s = l0 + Math.PI\n  const [ss, cs] = base.sincos(s)\n  const αs = Math.atan2(cε * ss, cs)\n  const δs = Math.asin(sε * ss)\n  const [sδs, cδs] = base.sincos(δs)\n  const [sαsα, cαsα] = base.sincos(αs - α)\n  const χ = Math.atan2(cδs * sαsα, sδs * cδ - cδs * sδ * cαsα)\n  const Q = χ + Math.PI\n  // Step 19.0\n  const d = 9.36 / 60 / 60 * Math.PI / 180 / Δ\n  const k = illum.fraction(r, Δ, R)\n  const q = (1 - k) * d\n  return [DE, DS, ω, P, Q, d, k, q]\n}\n\nexport default {\n  physical\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module moonposition\n */\n/**\n * Moonposition: Chapter 47, Position of the Moon.\n */\n\nimport base, { Coord } from './base.js' // eslint-disable-line no-unused-vars\nconst { asin, sin } = Math\nconst D2R = Math.PI / 180\n\nconst EARTH_RADIUS = 6378.137 // km\n\n/**\n * parallax returns equatorial horizontal parallax of the Moon.\n *\n * @param {Number} distance - distance between centers of the Earth and Moon, in km.\n * @returns {Number} Result in radians.\n */\nexport function parallax (distance) {\n  // p. 337\n  return asin(EARTH_RADIUS / distance)\n}\n\nfunction dmf (T) {\n  const d = base.horner(T, 297.8501921 * D2R, 445267.1114034 * D2R, -0.0018819 * D2R, D2R / 545868, -D2R / 113065000)\n  const m = base.horner(T, 357.5291092 * D2R, 35999.0502909 * D2R, -0.0001536 * D2R, D2R / 24490000)\n  const m_ = base.horner(T, 134.9633964 * D2R, 477198.8675055 * D2R,\n    0.0087414 * D2R, D2R / 69699, -D2R / 14712000)\n  const f = base.horner(T, 93.272095 * D2R, 483202.0175233 * D2R, -0.0036539 * D2R, -D2R / 3526000, D2R / 863310000)\n  return [d, m, m_, f]\n}\n\n/**\n * position returns geocentric location of the Moon.\n *\n * Results are referenced to mean equinox of date and do not include\n * the effect of nutation.\n *\n * @param {number} jde - Julian ephemeris day\n * @returns {Coord}\n *  {number} lon - Geocentric longitude λ, in radians.\n *  {number} lat - Geocentric latitude β, in radians.\n *  {number} range - Distance Δ between centers of the Earth and Moon, in km.\n */\nexport function position (jde) {\n  const T = base.J2000Century(jde)\n  const l_ = base.horner(T, 218.3164477 * D2R, 481267.88123421 * D2R, -0.0015786 * D2R, D2R / 538841, -D2R / 65194000)\n  const [d, m, m_, f] = dmf(T)\n  const a1 = 119.75 * D2R + 131.849 * D2R * T\n  const a2 = 53.09 * D2R + 479264.29 * D2R * T\n  const a3 = 313.45 * D2R + 481266.484 * D2R * T\n  const e = base.horner(T, 1, -0.002516, -0.0000074)\n  const e2 = e * e\n  let Σl = 3958 * sin(a1) + 1962 * sin(l_ - f) + 318 * sin(a2)\n  let Σr = 0.0\n  let Σb = -2235 * sin(l_) + 382 * sin(a3) + 175 * sin(a1 - f) +\n    175 * sin(a1 + f) + 127 * sin(l_ - m_) - 115 * sin(l_ + m_)\n  ta.forEach((r) => {\n    const [sina, cosa] = base.sincos(d * r.d + m * r.m + m_ * r.m_ + f * r.f)\n    switch (r.m) {\n      case 0:\n        Σl += r.Σl * sina\n        Σr += r.Σr * cosa\n        break\n      case -1:\n      case 1:\n        Σl += r.Σl * sina * e\n        Σr += r.Σr * cosa * e\n        break\n      case -2:\n      case 2:\n        Σl += r.Σl * sina * e2\n        Σr += r.Σr * cosa * e2\n        break\n    }\n  })\n\n  tb.forEach((r) => {\n    const sb = sin(d * r.d + m * r.m + m_ * r.m_ + f * r.f)\n    switch (r.m) {\n      case 0:\n        Σb += r.Σb * sb\n        break\n      case -1:\n      case 1:\n        Σb += r.Σb * sb * e\n        break\n      case -2:\n      case 2:\n        Σb += r.Σb * sb * e2\n        break\n    }\n  })\n  const lon = base.pmod(l_, 2 * Math.PI) + Σl * 1e-6 * D2R\n  const lat = Σb * 1e-6 * D2R\n  const range = 385000.56 + Σr * 1e-3\n  return new base.Coord(lon, lat, range)\n}\n\nconst ta = (function () {\n  const ta = [\n    [0, 0, 1, 0, 6288774, -20905355],\n    [2, 0, -1, 0, 1274027, -3699111],\n    [2, 0, 0, 0, 658314, -2955968],\n    [0, 0, 2, 0, 213618, -569925],\n\n    [0, 1, 0, 0, -185116, 48888],\n    [0, 0, 0, 2, -114332, -3149],\n    [2, 0, -2, 0, 58793, 246158],\n    [2, -1, -1, 0, 57066, -152138],\n\n    [2, 0, 1, 0, 53322, -170733],\n    [2, -1, 0, 0, 45758, -204586],\n    [0, 1, -1, 0, -40923, -129620],\n    [1, 0, 0, 0, -34720, 108743],\n\n    [0, 1, 1, 0, -30383, 104755],\n    [2, 0, 0, -2, 15327, 10321],\n    [0, 0, 1, 2, -12528, 0],\n    [0, 0, 1, -2, 10980, 79661],\n\n    [4, 0, -1, 0, 10675, -34782],\n    [0, 0, 3, 0, 10034, -23210],\n    [4, 0, -2, 0, 8548, -21636],\n    [2, 1, -1, 0, -7888, 24208],\n\n    [2, 1, 0, 0, -6766, 30824],\n    [1, 0, -1, 0, -5163, -8379],\n    [1, 1, 0, 0, 4987, -16675],\n    [2, -1, 1, 0, 4036, -12831],\n\n    [2, 0, 2, 0, 3994, -10445],\n    [4, 0, 0, 0, 3861, -11650],\n    [2, 0, -3, 0, 3665, 14403],\n    [0, 1, -2, 0, -2689, -7003],\n\n    [2, 0, -1, 2, -2602, 0],\n    [2, -1, -2, 0, 2390, 10056],\n    [1, 0, 1, 0, -2348, 6322],\n    [2, -2, 0, 0, 2236, -9884],\n\n    [0, 1, 2, 0, -2120, 5751],\n    [0, 2, 0, 0, -2069, 0],\n    [2, -2, -1, 0, 2048, -4950],\n    [2, 0, 1, -2, -1773, 4130],\n\n    [2, 0, 0, 2, -1595, 0],\n    [4, -1, -1, 0, 1215, -3958],\n    [0, 0, 2, 2, -1110, 0],\n    [3, 0, -1, 0, -892, 3258],\n\n    [2, 1, 1, 0, -810, 2616],\n    [4, -1, -2, 0, 759, -1897],\n    [0, 2, -1, 0, -713, -2117],\n    [2, 2, -1, 0, -700, 2354],\n\n    [2, 1, -2, 0, 691, 0],\n    [2, -1, 0, -2, 596, 0],\n    [4, 0, 1, 0, 549, -1423],\n    [0, 0, 4, 0, 537, -1117],\n\n    [4, -1, 0, 0, 520, -1571],\n    [1, 0, -2, 0, -487, -1739],\n    [2, 1, 0, -2, -399, 0],\n    [0, 0, 2, -2, -381, -4421],\n\n    [1, 1, 1, 0, 351, 0],\n    [3, 0, -2, 0, -340, 0],\n    [4, 0, -3, 0, 330, 0],\n    [2, -1, 2, 0, 327, 0],\n\n    [0, 2, 1, 0, -323, 1165],\n    [1, 1, -1, 0, 299, 0],\n    [2, 0, 3, 0, 294, 0],\n    [2, 0, -1, -2, 0, 8752]\n  ]\n  return ta.map((row) => {\n    const o = {}\n    const vals = ['d', 'm', 'm_', 'f', 'Σl', 'Σr']\n    vals.forEach((D2R, i) => {\n      o[D2R] = row[i]\n    })\n    return o\n  })\n})()\n\nconst tb = (function () {\n  const tb = [\n    [0, 0, 0, 1, 5128122],\n    [0, 0, 1, 1, 280602],\n    [0, 0, 1, -1, 277693],\n    [2, 0, 0, -1, 173237],\n\n    [2, 0, -1, 1, 55413],\n    [2, 0, -1, -1, 46271],\n    [2, 0, 0, 1, 32573],\n    [0, 0, 2, 1, 17198],\n\n    [2, 0, 1, -1, 9266],\n    [0, 0, 2, -1, 8822],\n    [2, -1, 0, -1, 8216],\n    [2, 0, -2, -1, 4324],\n\n    [2, 0, 1, 1, 4200],\n    [2, 1, 0, -1, -3359],\n    [2, -1, -1, 1, 2463],\n    [2, -1, 0, 1, 2211],\n\n    [2, -1, -1, -1, 2065],\n    [0, 1, -1, -1, -1870],\n    [4, 0, -1, -1, 1828],\n    [0, 1, 0, 1, -1794],\n\n    [0, 0, 0, 3, -1749],\n    [0, 1, -1, 1, -1565],\n    [1, 0, 0, 1, -1491],\n    [0, 1, 1, 1, -1475],\n\n    [0, 1, 1, -1, -1410],\n    [0, 1, 0, -1, -1344],\n    [1, 0, 0, -1, -1335],\n    [0, 0, 3, 1, 1107],\n\n    [4, 0, 0, -1, 1021],\n    [4, 0, -1, 1, 833],\n\n    [0, 0, 1, -3, 777],\n    [4, 0, -2, 1, 671],\n    [2, 0, 0, -3, 607],\n    [2, 0, 2, -1, 596],\n\n    [2, -1, 1, -1, 491],\n    [2, 0, -2, 1, -451],\n    [0, 0, 3, -1, 439],\n    [2, 0, 2, 1, 422],\n\n    [2, 0, -3, -1, 421],\n    [2, 1, -1, 1, -366],\n    [2, 1, 0, 1, -351],\n    [4, 0, 0, 1, 331],\n\n    [2, -1, 1, 1, 315],\n    [2, -2, 0, -1, 302],\n    [0, 0, 1, 3, -283],\n    [2, 1, 1, -1, -229],\n\n    [1, 1, 0, -1, 223],\n    [1, 1, 0, 1, 223],\n    [0, 1, -2, -1, -220],\n    [2, 1, -1, -1, -220],\n\n    [1, 0, 1, 1, -185],\n    [2, -1, -2, -1, 181],\n    [0, 1, 2, 1, -177],\n    [4, 0, -2, -1, 176],\n\n    [4, -1, -1, -1, 166],\n    [1, 0, 1, -1, -164],\n    [4, 0, 1, -1, 132],\n    [1, 0, -1, -1, -119],\n\n    [4, -1, 0, -1, 115],\n    [2, -2, 0, 1, 107]\n  ]\n  return tb.map((row) => {\n    const o = {}\n    const vals = ['d', 'm', 'm_', 'f', 'Σb']\n    vals.forEach((D2R, i) => {\n      o[D2R] = row[i]\n    })\n    return o\n  })\n})()\n\n/**\n * Node returns longitude of the mean ascending node of the lunar orbit.\n *\n * @param {number} jde - Julian ephemeris day\n * @returns result in radians.\n */\nexport function node (jde) {\n  return base.pmod(\n    base.horner(\n      base.J2000Century(jde),\n      125.0445479 * D2R,\n      -1934.1362891 * D2R,\n      0.0020754 * D2R,\n      D2R / 467441,\n      -D2R / 60616000\n    ), 2 * Math.PI\n  )\n}\n\n/**\n * perigee returns longitude of perigee of the lunar orbit.\n *\n * @param {number} jde - Julian ephemeris day\n * @returns result in radians.\n */\nexport function perigee (jde) {\n  return base.pmod(\n    base.horner(\n      base.J2000Century(jde),\n      83.3532465 * D2R,\n      4069.0137287 * D2R,\n      -0.01032 * D2R,\n      -D2R / 80053,\n      D2R / 18999000\n    ), 2 * Math.PI\n  )\n}\n\n/**\n * trueNode returns longitude of the true ascending node.\n *\n * That is, the node of the instantaneous lunar orbit.\n *\n * @param {number} jde - Julian ephemeris day\n * @returns result in radians.\n */\nexport function trueNode (jde) {\n  const [d, m, m_, f] = dmf(base.J2000Century(jde))\n  return node(jde) +\n    -1.4979 * D2R * sin(2 * (d - f)) +\n    -0.15 * D2R * sin(m) +\n    -0.1226 * D2R * sin(2 * d) +\n    0.1176 * D2R * sin(2 * f) +\n    -0.0801 * D2R * sin(2 * (m_ - f))\n}\n\nexport default {\n  parallax,\n  position,\n  node,\n  perigee,\n  trueNode\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module moon\n */\n/**\n * Moon: Chapter 53, Ephemeris for Physical Observations of the Moon.\n *\n * Incomplete.  Topocentric functions are commented out for lack of test data.\n */\n\nimport base, { Coord } from './base.js'// eslint-disable-line no-unused-vars\nimport coord from './coord.js'\nimport moonposition from './moonposition.js'\nimport nutation from './nutation.js'\nimport solar from './solar.js'\nimport { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\n\nconst { sin, cos, asin, atan2 } = Math\nconst D2R = Math.PI / 180\nconst _I = 1.54242 * D2R // IAU value of inclination of mean lunar equator\n\nconst [sI, cI] = base.sincos(_I)\n\n/**\n * Physical returns quantities useful for physical observation of the Moon.\n *\n * Returned l, b are librations in selenographic longitude and latitude.\n * They represent combined optical and physical librations.  Topocentric\n * librations are not considered.\n *\n * Returned P is the the position angle of the Moon's axis of rotation.\n *\n * Returned l0, b0 are the selenographic coordinates of the Sun.\n *\n * Returned values all in radians.\n\n * @param {number} jde - Julian ephemeris day\n * @param {Planet} earth - VSOP87 Planet Earth\n * @return {Array}\n *    {base.Coord} cMoon - selenographic longitude, latitude of the Moon\n *    {number} P - position angle of the Moon's axis of rotation\n *    {base.Coord} cSun - selenographic longitude, latitude of the Sun.\n */\nexport function physical (jde, earth) {\n  const { lon, lat, range } = moonposition.position(jde) // (λ without nutation)\n  // [λ, β, Δ]\n  const m = new Moon(jde)\n  const [l, b] = m.lib(lon, lat)\n  const P = m.pa(lon, lat, b)\n  const [l0, b0] = m.sun(lon, lat, range, earth)\n  const cMoon = new base.Coord(l, b)\n  const cSun = new base.Coord(l0, b0)\n  return [cMoon, P, cSun]\n}\n\n/**\n * Quantities computed for a jde and used in computing return values of\n * physical().  Computations are broken into several methods to organize\n * the code.\n */\nexport class Moon {\n  constructor (jde) {\n    this.jde = jde\n    // Δψ, F, Ω, p. 372.0\n    const [Δψ, Δε] = nutation.nutation(jde)\n    this.Δψ = Δψ\n    const T = base.J2000Century(jde)\n    const F = this.F = base.horner(T, 93.272095 * D2R, 483202.0175233 * D2R, -0.0036539 * D2R, -D2R / 3526000, D2R / 863310000)\n    this.Ω = base.horner(T, 125.0445479 * D2R, -1934.1362891 * D2R, 0.0020754 * D2R,\n      D2R / 467441, -D2R / 60616000)\n    // true ecliptic\n    this.ε = nutation.meanObliquity(jde) + Δε\n    this.sε = sin(this.ε)\n    this.cε = cos(this.ε)\n    // ρ, σ, τ, p. 372,373\n    const D = base.horner(T, 297.8501921 * D2R, 445267.1114034 * D2R, -0.0018819 * D2R, D2R / 545868, -D2R / 113065000)\n    const M = base.horner(T, 357.5291092 * D2R, 35999.0502909 * D2R, -0.0001536 * D2R, D2R / 24490000)\n    const M_ = base.horner(T, 134.9633964 * D2R, 477198.8675055 * D2R,\n      0.0087414 * D2R, D2R / 69699, -D2R / 14712000)\n    const E = base.horner(T, 1, -0.002516, -0.0000074)\n    const K1 = 119.75 * D2R + 131.849 * D2R * T\n    const K2 = 72.56 * D2R + 20.186 * D2R * T\n    this.ρ = -0.02752 * D2R * cos(M_) +\n      -0.02245 * D2R * sin(F) +\n      0.00684 * D2R * cos(M_ - 2 * F) +\n      -0.00293 * D2R * cos(2 * F) +\n      -0.00085 * D2R * cos(2 * (F - D)) +\n      -0.00054 * D2R * cos(M_ - 2 * D) +\n      -0.0002 * D2R * sin(M_ + F) +\n      -0.0002 * D2R * cos(M_ + 2 * F) +\n      -0.0002 * D2R * cos(M_ - F) +\n      0.00014 * D2R * cos(M_ + 2 * (F - D))\n    this.σ = -0.02816 * D2R * sin(M_) +\n      0.02244 * D2R * cos(F) +\n      -0.00682 * D2R * sin(M_ - 2 * F) +\n      -0.00279 * D2R * sin(2 * F) +\n      -0.00083 * D2R * sin(2 * (F - D)) +\n      0.00069 * D2R * sin(M_ - 2 * D) +\n      0.0004 * D2R * cos(M_ + F) +\n      -0.00025 * D2R * sin(2 * M_) +\n      -0.00023 * D2R * sin(M_ + 2 * F) +\n      0.0002 * D2R * cos(M_ - F) +\n      0.00019 * D2R * sin(M_ - F) +\n      0.00013 * D2R * sin(M_ + 2 * (F - D)) +\n      -0.0001 * D2R * cos(M_ - 3 * F)\n    this.τ = 0.0252 * D2R * sin(M) * E +\n      0.00473 * D2R * sin(2 * (M_ - F)) +\n      -0.00467 * D2R * sin(M_) +\n      0.00396 * D2R * sin(K1) +\n      0.00276 * D2R * sin(2 * (M_ - D)) +\n      0.00196 * D2R * sin(this.Ω) +\n      -0.00183 * D2R * cos(M_ - F) +\n      0.00115 * D2R * sin(M_ - 2 * D) +\n      -0.00096 * D2R * sin(M_ - D) +\n      0.00046 * D2R * sin(2 * (F - D)) +\n      -0.00039 * D2R * sin(M_ - F) +\n      -0.00032 * D2R * sin(M_ - M - D) +\n      0.00027 * D2R * sin(2 * (M_ - D) - M) +\n      0.00023 * D2R * sin(K2) +\n      -0.00014 * D2R * sin(2 * D) +\n      0.00014 * D2R * cos(2 * (M_ - F)) +\n      -0.00012 * D2R * sin(M_ - 2 * F) +\n      -0.00012 * D2R * sin(2 * M_) +\n      0.00011 * D2R * sin(2 * (M_ - M - D))\n  }\n\n  /**\n   * lib() curiously serves for computing both librations and solar coordinates,\n   * depending on the coordinates λ, β passed in.  Quantity A not described in\n   * the book, but clearly depends on the λ, β of the current context and so\n   * does not belong in the moon struct.  Instead just return it from optical\n   * and pass it along to physical.\n   */\n  lib (λ, β) {\n    const [l_, b_, A] = this.optical(λ, β)\n    const [l$, b$] = this.physical(A, b_)\n    let l = l_ + l$\n    if (l > Math.PI) {\n      l -= 2 * Math.PI\n    }\n    const b = b_ + b$\n    return [l, b]\n  }\n\n  optical (λ, β) {\n    // (53.1) p. 372\n    const W = λ - this.Ω // (λ without nutation)\n    const [sW, cW] = base.sincos(W)\n    const [sβ, cβ] = base.sincos(β)\n    const A = atan2(sW * cβ * cI - sβ * sI, cW * cβ)\n    const l_ = base.pmod(A - this.F, 2 * Math.PI)\n    const b_ = asin(-sW * cβ * sI - sβ * cI)\n    return [l_, b_, A]\n  }\n\n  physical (A, b_) {\n    // (53.2) p. 373\n    const [sA, cA] = base.sincos(A)\n    const l$ = -this.τ + (this.ρ * cA + this.σ * sA) * Math.tan(b_)\n    const b$ = this.σ * cA - this.ρ * sA\n    return [l$, b$]\n  }\n\n  pa (λ, β, b) {\n    const V = this.Ω + this.Δψ + this.σ / sI\n    const [sV, cV] = base.sincos(V)\n    const [sIρ, cIρ] = base.sincos(_I + this.ρ)\n    const X = sIρ * sV\n    const Y = sIρ * cV * this.cε - cIρ * this.sε\n    const ω = Math.atan2(X, Y)\n    const ecl = new coord.Ecliptic(λ + this.Δψ, β).toEquatorial(this.ε) // eslint-disable-line no-unused-vars\n    let P = asin(Math.hypot(X, Y) * cos(ecl.ra - ω) / cos(b))\n    if (P < 0) {\n      P += 2 * Math.PI\n    }\n    return P\n  }\n\n  sun (λ, β, Δ, earth) {\n    const { lon, lat, range } = solar.apparentVSOP87(earth, this.jde) // eslint-disable-line no-unused-vars\n    const ΔR = Δ / (range * base.AU)\n    const λH = lon + Math.PI + 57.296 * D2R * ΔR * cos(β) * sin(lon - λ)\n    const βH = ΔR * β\n    return this.lib(λH, βH)\n  }\n}\n\n/* commented out for lack of test data\nexport function Topocentric (jde, ρsφ_, ρcφ_, L) { // (jde, ρsφ_, ρcφ_, L float64)  (l, b, P float64)\n  λ, β, Δ := moonposition.Position(jde) // (λ without nutation)\n  Δψ, Δε := nutation.Nutation(jde)\n  sε, cε := base.sincos(nutation.MeanObliquity(jde) + Δε)\n  α, δ := coord.EclToEq(λ+Δψ, β, sε, cε)\n  α, δ = parallax.Topocentric(α, δ, Δ/base.AU, ρsφ_, ρcφ_, L, jde)\n  λ, β = coord.EqToEcl(α, δ, sε, cε)\n  const m = newMoon(jde)\n  l, b = m.lib(λ, β)\n  P = m.pa(λ, β, b)\n  return\n}\n\nexport function TopocentricCorrections (jde, b, P, φ, δ, H, π) { // (jde, b, P, φ, δ, H, π float64)  (Δl, Δb, ΔP float64)\n  sφ, cφ := base.sincos(φ)\n  sH, cH := base.sincos(H)\n  sδ, cδ := base.sincos(δ)\n  const Q = Math.atan(cφ * sH / (cδ*sφ - sδ*cφ*cH))\n  const z = Math.acos(sδ*sφ + cδ*cφ*cH)\n  const π_ = π * (sin(z) + 0.0084*sin(2*z))\n  sQP, cQP := base.sincos(Q - P)\n  Δl = -π_ * sQP / cos(b)\n  Δb = π_ * cQP\n  ΔP = Δl*sin(b+Δb) - π_*sin(Q)*Math.tan(δ)\n  return\n}\n*/\n\n/**\n * SunAltitude returns altitude of the Sun above the lunar horizon.\n *\n * @param {Coord} cOnMoon - selenographic longitude and latitude of a site on the Moon\n * @param {Coord} cSun - selenographic coordinates of the Sun (as returned by physical(), for example.)\n * @return altitude in radians.\n */\nexport function sunAltitude (cOnMoon, cSun) { // (η, θ, l0, b0 float64)  float64\n  const c0 = Math.PI / 2 - cSun.lon\n  const [sb0, cb0] = base.sincos(cSun.lat)\n  const [sθ, cθ] = base.sincos(cOnMoon.lat)\n  return asin(sb0 * sθ + cb0 * cθ * sin(c0 + cOnMoon.lon))\n}\n\n/**\n * Sunrise returns time of sunrise for a point on the Moon near the given date.\n *\n * @param {Coord} cOnMoon - selenographic longitude and latitude of a site on the Moon\n * @param {Number} jde - Julian ephemeris day\n * @param {Planet} earth - VSOP87 Planet Earth\n * @return time of sunrise as a jde nearest the given jde.\n */\nexport function sunrise (cOnMoon, jde, earth) { // (η, θ, jde float64, earth *pp.V87Planet)  float64\n  jde -= srCorr(cOnMoon, jde, earth)\n  return jde - srCorr(cOnMoon, jde, earth)\n}\n\n/**\n * Sunset returns time of sunset for a point on the Moon near the given date.\n *\n * @param {Coord} cOnMoon - selenographic longitude and latitude of a site on the Moon\n * @param {Number} jde - Julian ephemeris day\n * @param {Planet} earth - VSOP87 Planet Earth\n * @return time of sunset as a jde nearest the given jde.\n */\nexport function sunset (cOnMoon, jde, earth) { // (η, θ, jde float64, earth *pp.V87Planet)  float64\n  jde += srCorr(cOnMoon, jde, earth)\n  return jde + srCorr(cOnMoon, jde, earth)\n}\n\n/**\n * @private\n */\nfunction srCorr (cOnMoon, jde, earth) {\n  const phy = physical(jde, earth)\n  const h = sunAltitude(cOnMoon, phy[2])\n  return h / (12.19075 * D2R * cos(cOnMoon.lat))\n}\n\nconst lunarCoord = (η, θ) => new base.Coord(η * D2R, θ * D2R)\n/**\n * selenographic coordinates of some lunar features\n * Table 53.A\n */\nexport const selenographic = {\n  archimedes: lunarCoord(-3.9, 29.7),\n  aristarchus: lunarCoord(-47.5, 23.7),\n  aristillus: lunarCoord(1.2, 33.9),\n  aristoteles: lunarCoord(17.3, 50.1),\n  arzachel: lunarCoord(-1.9, -17.7),\n  autolycus: lunarCoord(1.5, 30.7),\n  billy: lunarCoord(-50, -13.8),\n  birt: lunarCoord(-8.5, -22.3),\n  campanus: lunarCoord(-27.7, -28),\n  censorinus: lunarCoord(32.7, -0.4),\n  clavius: lunarCoord(-14, -58),\n  copernicus: lunarCoord(-20, 9.7),\n  delambre: lunarCoord(17.5, -1.9),\n  dionysius: lunarCoord(17.3, 2.8),\n  endymion: lunarCoord(56.4, 53.6),\n  eratosthenes: lunarCoord(-11.3, 14.5),\n  eudoxus: lunarCoord(16.3, 44.3),\n  fracastorius: lunarCoord(33.2, -21),\n  fraMauro: lunarCoord(-17, -6),\n  gassendi: lunarCoord(-39.9, -17.5),\n  goclenius: lunarCoord(45, -10.1),\n  grimaldi: lunarCoord(-68.5, -5.8),\n  harpalus: lunarCoord(-43.4, 52.6),\n  horrocks: lunarCoord(5.9, -4),\n  kepler: lunarCoord(-38, 8.1),\n  langrenus: lunarCoord(60.9, -8.9),\n  lansberg: lunarCoord(-26.6, -0.3),\n  letronne: lunarCoord(-43, -10),\n  macrobius: lunarCoord(46, 21.2),\n  manilius: lunarCoord(9.1, 14.5),\n  menelaus: lunarCoord(16, 16.3),\n  messier: lunarCoord(47.6, -1.9),\n  petavius: lunarCoord(61, -25),\n  pico: lunarCoord(-8.8, 45.8),\n  pitatus: lunarCoord(-13.5, -29.8),\n  piton: lunarCoord(-0.8, 40.8),\n  plato: lunarCoord(-9.2, 51.4),\n  plinius: lunarCoord(23.6, 15.3),\n  posidonius: lunarCoord(30, 31.9),\n  proclus: lunarCoord(46.9, 16.1),\n  ptolemeusA: lunarCoord(-0.8, -8.5),\n  pytheas: lunarCoord(-20.6, 20.5),\n  reinhold: lunarCoord(-22.8, 3.2),\n  riccioli: lunarCoord(-74.3, -3.2),\n  schickard: lunarCoord(-54.5, -44),\n  schiller: lunarCoord(-39, -52),\n  tauruntius: lunarCoord(46.5, 5.6),\n  theophilus: lunarCoord(26.5, -11.4),\n  timocharis: lunarCoord(-13.1, 26.7),\n  tycho: lunarCoord(-11, -43.2),\n  vitruvius: lunarCoord(31.3, 17.6),\n  walter: lunarCoord(1, -33)\n}\n\nexport default {\n  physical,\n  Moon,\n  // Topocentric,\n  // TopocentricCorrections,\n  sunAltitude,\n  sunrise,\n  sunset,\n  selenographic\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module moonillum\n */\n/**\n * Moonillum: Chapter 48, Illuminated Fraction of the Moon's Disk\n *\n * Also see functions `illuminated` and `limb` in package base.  The function\n * for computing illuminated fraction given a phase angle (48.1) is\n * base.illuminated.  Formula (48.3) is implemented as base.limb.\n */\n\nimport base, { Coord } from './base.js' // eslint-disable-line no-unused-vars\n\nconst D2R = Math.PI / 180\n\n/**\n * phaseAngleEquatorial computes the phase angle of the Moon given equatorial coordinates.\n *\n * @param {Coord} cMoon - geocentric right ascension,  declination and distance to the Moon\n * @param {Coord} cSun - coordinates and distance of the Sun\n * @returns {number} phase angle of the Moon in radians\n */\nexport function phaseAngleEquatorial (cMoon, cSun) {\n  return pa(cMoon.range, cSun.range, cosEq(cMoon.ra, cMoon.dec, cSun.ra, cSun.dec))\n}\n\n/**\n * cos elongation from equatorial coordinates\n * @private\n */\nfunction cosEq (α, δ, α0, δ0) {\n  const [sδ, cδ] = base.sincos(δ)\n  const [sδ0, cδ0] = base.sincos(δ0)\n  return sδ0 * sδ + cδ0 * cδ * Math.cos(α0 - α)\n}\n\n/**\n * phase angle from cos elongation and distances\n * @private\n * @param {number} Δ\n * @param {number} R\n * @param {number} cψ\n * @returns {number}\n */\nfunction pa (Δ, R, cψ) {\n  const sψ = Math.sin(Math.acos(cψ))\n  let i = Math.atan(R * sψ / (Δ - R * cψ))\n  if (i < 0) {\n    i += Math.PI\n  }\n  return i\n}\n\n/**\n * phaseAngleEquatorial2 computes the phase angle of the Moon given equatorial coordinates.\n *\n * Less accurate than phaseAngleEquatorial.\n *\n * Arguments α, δ are geocentric right ascension and declination of the Moon;\n * α0, δ0  are coordinates of the Sun.  Angles must be in radians.\n *\n * @param {Coord} cMoon - eocentric right ascension and declination of the Moon\n * @param {Coord} cSun - coordinates of the Sun\n * @returns {number} phase angle of the Moon in radians\n */\nexport function phaseAngleEquatorial2 (cMoon, cSun) {\n  return Math.acos(-cosEq(cMoon.ra, cMoon.dec, cSun.ra, cSun.dec))\n}\n\n/**\n * phaseAngleEcliptic computes the phase angle of the Moon given ecliptic coordinates.\n *\n * Distances must be in the same units as each other.\n *\n * @param {Coord} cMoon - geocentric longitude, latitude and distance to the Moon\n * @param {Coord} cSun -  longitude and distance to the Sun\n * @returns {number} phase angle of the Moon in radians\n */\nexport function phaseAngleEcliptic (cMoon, cSun) {\n  return pa(cMoon.range, cSun.range, cosEcl(cMoon.lon, cMoon.lat, cSun.lon))\n}\n\n/**\n * cos elongation from ecliptic coordinates\n * @private\n */\nfunction cosEcl (λ, β, λ0) { // (λ, β, λ0 float64)  float64\n  return Math.cos(β) * Math.cos(λ - λ0)\n}\n\n/**\n * phaseAngleEcliptic2 computes the phase angle of the Moon given ecliptic coordinates.\n *\n * Less accurate than phaseAngleEcliptic.\n *\n * Angles must be in radians.\n *\n * @param {Coord} cMoon - geocentric longitude, latitude of the Moon\n * @param {Coord} cSun -  longitude of the Sun\n * @returns {number} phase angle of the Moon in radians\n */\nexport function phaseAngleEcliptic2 (cMoon, cSun) {\n  return Math.acos(-cosEcl(cMoon.lon, cMoon.lat, cSun.lon))\n}\n\n/**\n * phaseAngle3 computes the phase angle of the Moon given a julian day.\n *\n * Less accurate than phaseAngle functions taking coordinates.\n *\n * Result in radians.\n */\nexport function phaseAngle3 (jde) { // (jde float64)  float64\n  const T = base.J2000Century(jde)\n  const D = base.horner(T, 297.8501921 * D2R, 445267.1114034 * D2R,\n    -0.0018819 * D2R, D2R / 545868, -D2R / 113065000)\n  const m = base.horner(T, 357.5291092 * D2R, 35999.0502909 * D2R,\n    -0.0001536 * D2R, D2R / 24490000)\n  const m_ = base.horner(T, 134.9633964 * D2R, 477198.8675055 * D2R,\n    0.0087414 * D2R, D2R / 69699, -D2R / 14712000)\n  return Math.PI - base.pmod(D, 2 * Math.PI) +\n    -6.289 * D2R * Math.sin(m_) +\n    2.1 * D2R * Math.sin(m) +\n    -1.274 * D2R * Math.sin(2 * D - m_) +\n    -0.658 * D2R * Math.sin(2 * D) +\n    -0.214 * D2R * Math.sin(2 * m_) +\n    -0.11 * D2R * Math.sin(D)\n}\n\nexport default {\n  phaseAngleEquatorial,\n  phaseAngleEquatorial2,\n  phaseAngleEcliptic,\n  phaseAngleEcliptic2,\n  phaseAngle3\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module moonmaxdec\n */\n/**\n * Moonmaxdec: Chapter 52, Maximum Declinations of the Moon\n */\n\nimport base from './base.js'\n\n/**\n * North computes the maximum northern declination of the Moon near a given date.\n *\n * Argument year is a decimal year specifying a date near the event.\n *\n * Returned is the jde of the event nearest the given date and the declination\n * of the Moon at that time.\n */\nexport function north (y) { // (y float64)  (jde, δ float64)\n  return max(y, nc)\n}\n\n/**\n * South computes the maximum southern declination of the Moon near a given date.\n *\n * Argument year is a decimal year specifying a date near the event.\n *\n * Returned is the jde of the event nearest the given date and the declination\n * of the Moon at that time.\n */\nexport function south (y) { // (y float64)  (jde, δ float64)\n  return max(y, sc)\n}\n\nconst p = Math.PI / 180\nconst ck = 1 / 1336.86\n\n/**\n * @private\n */\nfunction max (y, c) { // (y float64, c *mc)  (jde, δ float64)\n  let k = (y - 2000.03) * 13.3686 // (52.1) p. 367\n  k = Math.floor(k + 0.5)\n  const T = k * ck\n  const D = base.horner(T, c.D, 333.0705546 * p / ck, -0.0004214 * p, 0.00000011 * p)\n  const m = base.horner(T, c.m, 26.9281592 * p / ck, -0.0000355 * p, -0.0000001 * p)\n  const m_ = base.horner(T, c.m_, 356.9562794 * p / ck, 0.0103066 * p, 0.00001251 * p)\n  const f = base.horner(T, c.f, 1.4467807 * p / ck, -0.002069 * p, -0.00000215 * p)\n  const E = base.horner(T, 1, -0.002516, -0.0000074)\n  const jde = base.horner(T, c.JDE, 27.321582247 / ck, 0.000119804, -0.000000141) +\n    c.tc[0] * Math.cos(f) +\n    c.tc[1] * Math.sin(m_) +\n    c.tc[2] * Math.sin(2 * f) +\n    c.tc[3] * Math.sin(2 * D - m_) +\n    c.tc[4] * Math.cos(m_ - f) +\n    c.tc[5] * Math.cos(m_ + f) +\n    c.tc[6] * Math.sin(2 * D) +\n    c.tc[7] * Math.sin(m) * E +\n    c.tc[8] * Math.cos(3 * f) +\n    c.tc[9] * Math.sin(m_ + 2 * f) +\n    c.tc[10] * Math.cos(2 * D - f) +\n    c.tc[11] * Math.cos(2 * D - m_ - f) +\n    c.tc[12] * Math.cos(2 * D - m_ + f) +\n    c.tc[13] * Math.cos(2 * D + f) +\n    c.tc[14] * Math.sin(2 * m_) +\n    c.tc[15] * Math.sin(m_ - 2 * f) +\n    c.tc[16] * Math.cos(2 * m_ - f) +\n    c.tc[17] * Math.sin(m_ + 3 * f) +\n    c.tc[18] * Math.sin(2 * D - m - m_) * E +\n    c.tc[19] * Math.cos(m_ - 2 * f) +\n    c.tc[20] * Math.sin(2 * (D - m_)) +\n    c.tc[21] * Math.sin(f) +\n    c.tc[22] * Math.sin(2 * D + m_) +\n    c.tc[23] * Math.cos(m_ + 2 * f) +\n    c.tc[24] * Math.sin(2 * D - m) * E +\n    c.tc[25] * Math.sin(m_ + f) +\n    c.tc[26] * Math.sin(m - m_) * E +\n    c.tc[27] * Math.sin(m_ - 3 * f) +\n    c.tc[28] * Math.sin(2 * m_ + f) +\n    c.tc[29] * Math.cos(2 * (D - m_) - f) +\n    c.tc[30] * Math.sin(3 * f) +\n    c.tc[31] * Math.cos(m_ + 3 * f) +\n    c.tc[32] * Math.cos(2 * m_) +\n    c.tc[33] * Math.cos(2 * D - m_) +\n    c.tc[34] * Math.cos(2 * D + m_ + f) +\n    c.tc[35] * Math.cos(m_) +\n    c.tc[36] * Math.sin(3 * m_ + f) +\n    c.tc[37] * Math.sin(2 * D - m_ + f) +\n    c.tc[38] * Math.cos(2 * (D - m_)) +\n    c.tc[39] * Math.cos(D + f) +\n    c.tc[40] * Math.sin(m + m_) * E +\n    c.tc[41] * Math.sin(2 * (D - f)) +\n    c.tc[42] * Math.cos(2 * m_ + f) +\n    c.tc[43] * Math.cos(3 * m_ + f)\n  const δ = 23.6961 * p - 0.013004 * p * T +\n    c.dc[0] * Math.sin(f) +\n    c.dc[1] * Math.cos(2 * f) +\n    c.dc[2] * Math.sin(2 * D - f) +\n    c.dc[3] * Math.sin(3 * f) +\n    c.dc[4] * Math.cos(2 * (D - f)) +\n    c.dc[5] * Math.cos(2 * D) +\n    c.dc[6] * Math.sin(m_ - f) +\n    c.dc[7] * Math.sin(m_ + 2 * f) +\n    c.dc[8] * Math.cos(f) +\n    c.dc[9] * Math.sin(2 * D + m - f) * E +\n    c.dc[10] * Math.sin(m_ + 3 * f) +\n    c.dc[11] * Math.sin(D + f) +\n    c.dc[12] * Math.sin(m_ - 2 * f) +\n    c.dc[13] * Math.sin(2 * D - m - f) * E +\n    c.dc[14] * Math.sin(2 * D - m_ - f) +\n    c.dc[15] * Math.cos(m_ + f) +\n    c.dc[16] * Math.cos(m_ + 2 * f) +\n    c.dc[17] * Math.cos(2 * m_ + f) +\n    c.dc[18] * Math.cos(m_ - 3 * f) +\n    c.dc[19] * Math.cos(2 * m_ - f) +\n    c.dc[20] * Math.cos(m_ - 2 * f) +\n    c.dc[21] * Math.sin(2 * m_) +\n    c.dc[22] * Math.sin(3 * m_ + f) +\n    c.dc[23] * Math.cos(2 * D + m - f) * E +\n    c.dc[24] * Math.cos(m_ - f) +\n    c.dc[25] * Math.cos(3 * f) +\n    c.dc[26] * Math.sin(2 * D + f) +\n    c.dc[27] * Math.cos(m_ + 3 * f) +\n    c.dc[28] * Math.cos(D + f) +\n    c.dc[29] * Math.sin(2 * m_ - f) +\n    c.dc[30] * Math.cos(3 * m_ + f) +\n    c.dc[31] * Math.cos(2 * (D + m_) + f) +\n    c.dc[32] * Math.sin(2 * (D - m_) - f) +\n    c.dc[33] * Math.cos(2 * m_) +\n    c.dc[34] * Math.cos(m_) +\n    c.dc[35] * Math.sin(2 * f) +\n    c.dc[36] * Math.sin(m_ + f)\n  return { jde, dec: c.s * δ }\n}\n\n/**\n * north coefficients\n */\nconst nc = {\n  D: 152.2029 * p,\n  m: 14.8591 * p,\n  m_: 4.6881 * p,\n  f: 325.8867 * p,\n  JDE: 2451562.5897,\n  s: 1,\n  tc: [\n    0.8975,\n    -0.4726,\n    -0.1030,\n    -0.0976,\n    -0.0462,\n    -0.0461,\n    -0.0438,\n    0.0162,\n    -0.0157,\n    0.0145,\n    0.0136,\n    -0.0095,\n    -0.0091,\n    -0.0089,\n    0.0075,\n    -0.0068,\n    0.0061,\n    -0.0047,\n    -0.0043,\n    -0.004,\n    -0.0037,\n    0.0031,\n    0.0030,\n    -0.0029,\n    -0.0029,\n    -0.0027,\n    0.0024,\n    -0.0021,\n    0.0019,\n    0.0018,\n    0.0018,\n    0.0017,\n    0.0017,\n    -0.0014,\n    0.0013,\n    0.0013,\n    0.0012,\n    0.0011,\n    -0.0011,\n    0.001,\n    0.001,\n    -0.0009,\n    0.0007,\n    -0.0007\n  ],\n  dc: [\n    5.1093 * p,\n    0.2658 * p,\n    0.1448 * p,\n    -0.0322 * p,\n    0.0133 * p,\n    0.0125 * p,\n    -0.0124 * p,\n    -0.0101 * p,\n    0.0097 * p,\n    -0.0087 * p,\n    0.0074 * p,\n    0.0067 * p,\n    0.0063 * p,\n    0.0060 * p,\n    -0.0057 * p,\n    -0.0056 * p,\n    0.0052 * p,\n    0.0041 * p,\n    -0.004 * p,\n    0.0038 * p,\n    -0.0034 * p,\n    -0.0029 * p,\n    0.0029 * p,\n    -0.0028 * p,\n    -0.0028 * p,\n    -0.0023 * p,\n    -0.0021 * p,\n    0.0019 * p,\n    0.0018 * p,\n    0.0017 * p,\n    0.0015 * p,\n    0.0014 * p,\n    -0.0012 * p,\n    -0.0012 * p,\n    -0.001 * p,\n    -0.001 * p,\n    0.0006 * p\n  ]\n}\n\n/**\n * south coefficients\n */\nconst sc = {\n  D: 345.6676 * p,\n  m: 1.3951 * p,\n  m_: 186.21 * p,\n  f: 145.1633 * p,\n  JDE: 2451548.9289,\n  s: -1,\n  tc: [\n    -0.8975,\n    -0.4726,\n    -0.1030,\n    -0.0976,\n    0.0541,\n    0.0516,\n    -0.0438,\n    0.0112,\n    0.0157,\n    0.0023,\n    -0.0136,\n    0.011,\n    0.0091,\n    0.0089,\n    0.0075,\n    -0.003,\n    -0.0061,\n    -0.0047,\n    -0.0043,\n    0.004,\n    -0.0037,\n    -0.0031,\n    0.0030,\n    0.0029,\n    -0.0029,\n    -0.0027,\n    0.0024,\n    -0.0021,\n    -0.0019,\n    -0.0006,\n    -0.0018,\n    -0.0017,\n    0.0017,\n    0.0014,\n    -0.0013,\n    -0.0013,\n    0.0012,\n    0.0011,\n    0.0011,\n    0.001,\n    0.001,\n    -0.0009,\n    -0.0007,\n    -0.0007\n  ],\n  dc: [\n    -5.1093 * p,\n    0.2658 * p,\n    -0.1448 * p,\n    0.0322 * p,\n    0.0133 * p,\n    0.0125 * p,\n    -0.0015 * p,\n    0.0101 * p,\n    -0.0097 * p,\n    0.0087 * p,\n    0.0074 * p,\n    0.0067 * p,\n    -0.0063 * p,\n    -0.0060 * p,\n    0.0057 * p,\n    -0.0056 * p,\n    -0.0052 * p,\n    -0.0041 * p,\n    -0.004 * p,\n    -0.0038 * p,\n    0.0034 * p,\n    -0.0029 * p,\n    0.0029 * p,\n    0.0028 * p,\n    -0.0028 * p,\n    0.0023 * p,\n    0.0021 * p,\n    0.0019 * p,\n    0.0018 * p,\n    -0.0017 * p,\n    0.0015 * p,\n    0.0014 * p,\n    0.0012 * p,\n    -0.0012 * p,\n    0.001 * p,\n    -0.001 * p,\n    0.0037 * p\n  ]\n}\n\nexport default {\n  north,\n  south\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module moonnode\n */\n/**\n * Moonnode: Chapter 51, Passages of the Moon through the Nodes.\n */\n\nimport base from './base.js'\n\n/**\n * Ascending returns the date of passage of the Moon through an ascending node.\n *\n * @param {Number} year - decimal year specifying a date near the event.\n * @returns {Number} jde of the event nearest the given date.\n */\nexport function ascending (year) { // (year float64)  float64\n  return node(year, 0)\n}\n\n/**\n * Descending returns the date of passage of the Moon through a descending node.\n *\n * @param {Number} year - decimal year specifying a date near the event.\n * @returns {Number} jde of the event nearest the given date.\n */\nexport function descending (year) { // (year float64)  float64\n  return node(year, 0.5)\n}\n\n/**\n * @private\n */\nfunction node (y, h) { // (y, h float64)  float64\n  let k = (y - 2000.05) * 13.4223 // (50.1) p. 355\n  k = Math.floor(k - h + 0.5) + h // snap to half orbit\n  const p = Math.PI / 180\n  const ck = 1 / 1342.23\n  const T = k * ck\n  const D = base.horner(T, 183.638 * p, 331.73735682 * p / ck,\n    0.0014852 * p, 0.00000209 * p, -0.00000001 * p)\n  const M = base.horner(T, 17.4006 * p, 26.8203725 * p / ck,\n    0.0001186 * p, 0.00000006 * p)\n  const m_ = base.horner(T, 38.3776 * p, 355.52747313 * p / ck,\n    0.0123499 * p, 0.000014627 * p, -0.000000069 * p)\n  const Ω = base.horner(T, 123.9767 * p, -1.44098956 * p / ck,\n    0.0020608 * p, 0.00000214 * p, -0.000000016 * p)\n  const V = base.horner(T, 299.75 * p, 132.85 * p, -0.009173 * p)\n  const P = Ω + 272.75 * p - 2.3 * p * T\n  const E = base.horner(T, 1, -0.002516, -0.0000074)\n  return base.horner(T, 2451565.1619, 27.212220817 / ck,\n    0.0002762, 0.000000021, -0.000000000088) +\n    -0.4721 * Math.sin(m_) +\n    -0.1649 * Math.sin(2 * D) +\n    -0.0868 * Math.sin(2 * D - m_) +\n    0.0084 * Math.sin(2 * D + m_) +\n    -0.0083 * Math.sin(2 * D - M) * E +\n    -0.0039 * Math.sin(2 * D - M - m_) * E +\n    0.0034 * Math.sin(2 * m_) +\n    -0.0031 * Math.sin(2 * (D - m_)) +\n    0.003 * Math.sin(2 * D + M) * E +\n    0.0028 * Math.sin(M - m_) * E +\n    0.0026 * Math.sin(M) * E +\n    0.0025 * Math.sin(4 * D) +\n    0.0024 * Math.sin(D) +\n    0.0022 * Math.sin(M + m_) * E +\n    0.0017 * Math.sin(Ω) +\n    0.0014 * Math.sin(4 * D - m_) +\n    0.0005 * Math.sin(2 * D + M - m_) * E +\n    0.0004 * Math.sin(2 * D - M + m_) * E +\n    -0.0003 * Math.sin(2 * (D - M)) * E +\n    0.0003 * Math.sin(4 * D - M) * E +\n    0.0003 * Math.sin(V) +\n    0.0003 * Math.sin(P)\n}\n\nexport default {\n  ascending,\n  descending\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module parabolic\n */\n/**\n * Parabolic: Chapter 34, Parabolic Motion.\n */\nimport base from './base.js'\n\n/**\n * Elements holds parabolic elements needed for computing true anomaly and distance.\n */\nexport class Elements {\n  /**\n   * @param {Number} timeP - time of perihelion, T\n   * @param {Number} pDis - perihelion distance, q\n   */\n  constructor (timeP, pDis) {\n    this.timeP = timeP\n    this.pDis = pDis\n  }\n\n  /**\n   * AnomalyDistance returns true anomaly and distance of a body in a parabolic orbit of the Sun.\n   *\n   * @param {Number} jde - Julian ephemeris day\n   * @returns {Object} {ano, dist}\n   *   {Number} ano - True anomaly ν in radians.\n   *   {Number} dist - Distance r returned in AU.\n   */\n  anomalyDistance (jde) {\n    const W = 3 * base.K / Math.SQRT2 * (jde - this.timeP) / this.pDis / Math.sqrt(this.pDis)\n    const G = W * 0.5\n    const Y = Math.cbrt(G + Math.sqrt(G * G + 1))\n    const s = Y - 1 / Y\n    const ν = 2 * Math.atan(s)\n    const r = this.pDis * (1 + s * s)\n    return {\n      ano: ν,\n      dist: r\n    }\n  }\n}\n\nexport default {\n  Elements\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module sidereal\n */\n/**\n * Sidereal: Chapter 12, Sidereal Time at Greenwich.\n */\n\nimport base from './base.js'\nimport nutation from './nutation.js'\n\n/**\n * JDToCFrac returns values for use in computing sidereal time at Greenwich.\n *\n * Cen is centuries from J2000 of the JD at 0h UT of argument jd.  This is\n * the value to use for evaluating the IAU sidereal time polynomial.\n * DayFrac is the fraction of jd after 0h UT.  It is used to compute the\n * final value of sidereal time.\n *\n * @param {number} jd - Julian Days\n * @return {number[]} [century, fraction] century and fraction of jd after 0h UT\n */\nexport function JDToCFrac (jd) {\n  const [j0, f] = base.modf(jd + 0.5)\n  return [base.J2000Century(j0 - 0.5), f] // (cen, dayFrac /* float */)\n}\n\n/**\n * iau82 is a polynomial giving mean sidereal time at Greenwich at 0h UT.\n *\n * The polynomial is in centuries from J2000.0, as given by JDToCFrac.\n * Coefficients are those adopted in 1982 by the International Astronomical\n * Union and are given in (12.2) p. 87.\n */\nexport const iau82 = [24110.54841, 8640184.812866, 0.093104, -0.0000062]\n\n/**\n * Mean returns mean sidereal time at Greenwich for a given JD.\n *\n * Computation is by IAU 1982 coefficients.  The result is in seconds of\n * time and is in the range [0,86400).\n *\n * @param {number} jd - Julian Days\n * @return {number}\n */\nexport function mean (jd) {\n  return base.pmod(_mean(jd), 86400)\n}\n\n/**\n * @private\n */\nfunction _mean (jd) {\n  const [s, f] = _mean0UT(jd)\n  return s + f * 1.00273790935 * 86400\n}\n\n/**\n * Mean0UT returns mean sidereal time at Greenwich at 0h UT on the given JD.\n *\n * The result is in seconds of time and is in the range [0,86400).\n *\n * @param {number} jd - Julian Days\n * @return {number}\n */\nexport function mean0UT (jd /* float */) {\n  const [s, _] = _mean0UT(jd) // eslint-disable-line\n  return base.pmod(s, 86400)\n}\n\n/**\n * @private\n */\nfunction _mean0UT (jd /* float */) {\n  const [cen, f] = JDToCFrac(jd)\n  // (12.2) p. 87\n  return [base.horner(cen, ...iau82), f] // (sidereal, dayFrac /* float */)\n}\n\n/**\n * Apparent returns apparent sidereal time at Greenwich for the given JD.\n *\n * Apparent is mean plus the nutation in right ascension.\n *\n * The result is in seconds of time and is in the range [0,86400).\n *\n * @param {number} jd - Julian Days\n * @return {number}\n */\nexport function apparent (jd) {\n  const s = _mean(jd) // seconds of time\n  const n = nutation.nutationInRA(jd) // angle (radians) of RA\n  const ns = n * 3600 * 180 / Math.PI / 15 // convert RA to time in seconds\n  return base.pmod(s + ns, 86400)\n}\n\n/**\n * Apparent0UT returns apparent sidereal time at Greenwich at 0h UT\n * on the given JD.\n *\n * The result is in seconds of time and is in the range [0,86400).\n *\n * @param {number} jd - Julian Days\n * @return {number}\n */\nexport function apparent0UT (jd) {\n  const [j0, f] = base.modf(jd + 0.5)\n  const cen = (j0 - 0.5 - base.J2000) / 36525\n  const s = base.horner(cen, ...iau82) + f * 1.00273790935 * 86400\n  const n = nutation.nutationInRA(j0) // angle (radians) of RA\n  const ns = n * 3600 * 180 / Math.PI / 15 // convert RA to time in seconds\n  return base.pmod(s + ns, 86400)\n}\n\nexport default {\n  JDToCFrac,\n  iau82,\n  mean,\n  mean0UT,\n  apparent,\n  apparent0UT\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module parallax\n */\n/**\n * Parallax: Chapter 40, Correction for Parallax.\n */\n\nimport base, { Coord } from './base.js' // eslint-disable-line no-unused-vars\nimport globe from './globe.js'\nimport sidereal from './sidereal.js'\nimport sexa from './sexagesimal.js'\n\nconst horPar = (8.794 / 3600) * Math.PI / 180 // 8\".794 arcseconds in radians\n\n/**\n * Horizontal returns equatorial horizontal parallax of a body.\n *\n * @param {number} Δ - distance in AU.\n * @return {number} parallax in radians.\n */\nexport function horizontal (Δ) {\n  // (40.1) p. 279\n  return Math.asin(Math.sin(horPar) / Δ)\n  // return horPar / Δ // with sufficient accuracy\n}\n\n/**\n * Topocentric returns topocentric positions including parallax.\n *\n * Arguments α, δ are geocentric right ascension and declination in radians.\n * Δ is distance to the observed object in AU. ρsφ, ρcφ are parallax\n * constants (see package globe.) lon is geographic longitude of the observer,\n * jde is time of observation.\n *\n * @param {Coord} c - geocentric right ascension and declination in radians\n * @param {number} ρsφ - parallax constants (see package globe.)\n * @param {number} ρcφ - parallax constants (see package globe.)\n * @param {number} lon - geographic longitude of the observer (measured positively westwards!)\n * @param {number} jde - time of observation\n * @return {Coord} observed topocentric ra and dec in radians.\n */\nexport function topocentric (c, ρsφ, ρcφ, lon, jde) {\n  const [α, δ, Δ] = [c.ra, c.dec, c.range]\n  const π = horizontal(Δ)\n  const θ0 = new sexa.Time(sidereal.apparent(jde)).rad()\n  const H = base.pmod(θ0 - lon - α, 2 * Math.PI)\n  const sπ = Math.sin(π)\n  const [sH, cH] = base.sincos(H)\n  const [sδ, cδ] = base.sincos(δ)\n  const Δα = Math.atan2(-ρcφ * sπ * sH, cδ - ρcφ * sπ * cH) // (40.2) p. 279\n  const α_ = α + Δα\n  const δ_ = Math.atan2((sδ - ρsφ * sπ) * Math.cos(Δα), cδ - ρcφ * sπ * cH) // (40.3) p. 279\n  return new Coord(α_, δ_)\n}\n\n/**\n * Topocentric2 returns topocentric corrections including parallax.\n *\n * This function implements the \"non-rigorous\" method descripted in the text.\n *\n * Note that results are corrections, not corrected coordinates.\n *\n * @param {Coord} c - geocentric right ascension and declination in radians\n * @param {number} ρsφ - parallax constants (see package globe.)\n * @param {number} ρcφ - parallax constants (see package globe.)\n * @param {number} lon - geographic longitude of the observer (measured positively westwards!)\n * @param {number} jde - time of observation\n * @return {Coord} observed topocentric ra and dec in radians.\n */\nexport function topocentric2 (c, ρsφ, ρcφ, lon, jde) {\n  const [α, δ, Δ] = [c.ra, c.dec, c.range]\n  const π = horizontal(Δ)\n  const θ0 = new sexa.Time(sidereal.apparent(jde)).rad()\n  const H = base.pmod(θ0 - lon - α, 2 * Math.PI)\n  const [sH, cH] = base.sincos(H)\n  const [sδ, cδ] = base.sincos(δ)\n  const Δα = -π * ρcφ * sH / cδ // (40.4) p. 280\n  const Δδ = -π * (ρsφ * cδ - ρcφ * cH * sδ) // (40.5) p. 280\n  return new base.Coord(Δα, Δδ)\n}\n\n/**\n * Topocentric3 returns topocentric hour angle and declination including parallax.\n *\n * This function implements the \"alternative\" method described in the text.\n * The method should be similarly rigorous to that of Topocentric() and results\n * should be virtually consistent.\n *\n * @param {Coord} c - geocentric right ascension and declination in radians\n * @param {number} ρsφ - parallax constants (see package globe.)\n * @param {number} ρcφ - parallax constants (see package globe.)\n * @param {number} lon - geographic longitude of the observer (measured positively westwards!)\n * @param {number} jde - time of observation\n * @return {Array}\n *    {number} H_ - topocentric hour angle\n *    {number} δ_ - topocentric declination\n */\nexport function topocentric3 (c, ρsφ, ρcφ, lon, jde) {\n  const [α, δ, Δ] = [c.ra, c.dec, c.range]\n  const π = horizontal(Δ)\n  const θ0 = new sexa.Time(sidereal.apparent(jde)).rad()\n  const H = base.pmod(θ0 - lon - α, 2 * Math.PI)\n  const sπ = Math.sin(π)\n  const [sH, cH] = base.sincos(H)\n  const [sδ, cδ] = base.sincos(δ)\n  const A = cδ * sH\n  const B = cδ * cH - ρcφ * sπ\n  const C = sδ - ρsφ * sπ\n  const q = Math.sqrt(A * A + B * B + C * C)\n  const H_ = Math.atan2(A, B)\n  const δ_ = Math.asin(C / q)\n  return [H_, δ_]\n}\n\n/**\n * TopocentricEcliptical returns topocentric ecliptical coordinates including parallax.\n *\n * Arguments `c` are geocentric ecliptical longitude and latitude of a body,\n * s is its geocentric semidiameter. φ, h are the observer's latitude and\n * and height above the ellipsoid in meters.  ε is the obliquity of the\n * ecliptic, θ is local sidereal time, π is equatorial horizontal parallax\n * of the body (see Horizonal()).\n *\n * All angular parameters and results are in radians.\n *\n * @param {Coord} c - geocentric right ascension and declination in radians\n * @param {number} s - geocentric semidiameter of `c`\n * @param {number} φ - observer's latitude\n * @param {number} h - observer's height above the ellipsoid in meters\n * @param {number} ε - is the obliquity of the ecliptic\n * @param {number} θ - local sidereal time\n * @param {number} π - equatorial horizontal parallax of the body\n * @return {Array}\n *    {number} λ_ - observed topocentric longitude\n *    {number} β_ - observed topocentric latitude\n *    {number} s_ - observed topocentric semidiameter\n */\nexport function topocentricEcliptical (c, s, φ, h, ε, θ, π) {\n  const [λ, β] = [c.lon, c.lat]\n  const [S, C] = globe.Earth76.parallaxConstants(φ, h)\n  const [sλ, cλ] = base.sincos(λ)\n  const [sβ, cβ] = base.sincos(β)\n  const [sε, cε] = base.sincos(ε)\n  const [sθ, cθ] = base.sincos(θ)\n  const sπ = Math.sin(π)\n  const N = cλ * cβ - C * sπ * cθ\n  let λ_ = Math.atan2(sλ * cβ - sπ * (S * sε + C * cε * sθ), N)\n  if (λ_ < 0) {\n    λ_ += 2 * Math.PI\n  }\n  const cλ_ = Math.cos(λ_)\n  const β_ = Math.atan(cλ_ * (sβ - sπ * (S * cε - C * sε * sθ)) / N)\n  const s_ = Math.asin(cλ_ * Math.cos(β_) * Math.sin(s) / N)\n  return [λ_, β_, s_]\n}\n\nexport default {\n  horizontal,\n  topocentric,\n  topocentric2,\n  topocentric3,\n  topocentricEcliptical\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module parallactic\n */\n/**\n * Parallactic: Chapter 14, The Parallactic Angle, and three other Topics.\n */\n\nimport base from './base.js'\n\n/**\n * ParallacticAngle returns parallactic angle of a celestial object.\n *\n *  φ is geographic latitude of observer.\n *  δ is declination of observed object.\n *  H is hour angle of observed object.\n *\n * All angles including result are in radians.\n */\nexport function parallacticAngle (φ, δ, H) { // (φ, δ, H float64)  float64\n  const [sδ, cδ] = base.sincos(δ)\n  const [sH, cH] = base.sincos(H)\n  return Math.atan2(sH, Math.tan(φ) * cδ - sδ * cH) // (14.1) p. 98\n}\n\n/**\n * ParallacticAngleOnHorizon is a special case of ParallacticAngle.\n *\n * The hour angle is not needed as an input and the math inside simplifies.\n */\nexport function parallacticAngleOnHorizon (φ, δ) { // (φ, δ float64)  float64\n  return Math.acos(Math.sin(φ) / Math.cos(δ))\n}\n\n/**\n * EclipticAtHorizon computes how the plane of the ecliptic intersects\n * the horizon at a given local sidereal time as observed from a given\n * geographic latitude.\n *\n *  ε is obliquity of the ecliptic.\n *  φ is geographic latitude of observer.\n *  θ is local sidereal time expressed as an hour angle.\n *\n *  λ1 and λ2 are ecliptic longitudes where the ecliptic intersects the horizon.\n *  I is the angle at which the ecliptic intersects the horizon.\n *\n * All angles, arguments and results, are in radians.\n */\nexport function eclipticAtHorizon (ε, φ, θ) { // (ε, φ, θ float64)  (λ1, λ2, I float64)\n  const [sε, cε] = base.sincos(ε)\n  const [sφ, cφ] = base.sincos(φ)\n  const [sθ, cθ] = base.sincos(θ)\n  let λ = Math.atan2(-cθ, sε * (sφ / cφ) + cε * sθ) // (14.2) p. 99\n  if (λ < 0) {\n    λ += Math.PI\n  }\n  return [λ, λ + Math.PI, Math.acos(cε * sφ - sε * cφ * sθ)] // (14.3) p. 99\n}\n\n/**\n * EclipticAtEquator computes the angle between the ecliptic and the parallels\n * of ecliptic latitude at a given ecliptic longitude.\n *\n * (The function name EclipticAtEquator is for consistency with the Meeus text,\n * and works if you consider the equator a nominal parallel of latitude.)\n *\n *  λ is ecliptic longitude.\n *  ε is obliquity of the ecliptic.\n *\n * All angles in radians.\n */\nexport function eclipticAtEquator (λ, ε) { // (λ, ε float64)  float64\n  return Math.atan(-Math.cos(λ) * Math.tan(ε))\n}\n\n/**\n * DiurnalPathAtHorizon computes the angle of the path a celestial object\n * relative to the horizon at the time of its rising or setting.\n *\n *  δ is declination of the object.\n *  φ is geographic latitude of observer.\n *\n * All angles in radians.\n */\nexport function diurnalPathAtHorizon (δ, φ) { // (δ, φ float64)  (J float64)\n  const tφ = Math.tan(φ)\n  const b = Math.tan(δ) * tφ\n  const c = Math.sqrt(1 - b * b)\n  return Math.atan(c * Math.cos(δ) / tφ)\n}\n\nexport default {\n  parallacticAngle,\n  parallacticAngleOnHorizon,\n  eclipticAtHorizon,\n  eclipticAtEquator,\n  diurnalPathAtHorizon\n}\n", "/* eslint-disable n/no-callback-literal */\n/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module perihelion\n */\n/**\n * Perihelion: Chapter 38, Planets in Perihelion and Aphelion.\n *\n * Functions Aphelion and Perihelion implement algorithms from the book\n * to return approximate results.\n *\n * For accurate results, Meeus describes the general technique of\n * interpolating from a precise ephemeris but does not give a complete\n * algorithm.  The algorithm implemented here for Aphelion2 and Perihelion2\n * is to start with the approximate result and then crawl along the curve\n * at the specified time resolution until the desired extremum is found.\n * This algorithm slows down as higher accuracy is demanded.  1 day accuracy\n * is generally quick for planets other than Neptune.\n *\n * Meeus doesn't give an algorithm to handle the double extrema of Neptune.\n * The algorithm here is to pick starting points several years either side\n * of the approximate date and follow the slopes inward.  The consequence of\n * starting farther from the extremum is that these functions are particularly\n * slow for Neptune.  They are offered here though as a simple implementation\n * of Meeus's presentation in the book.\n */\nimport base from './base.js'\nimport interp from './interpolation.js'\nimport { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\n\n/**\n * Planet constants for first argument of Perihelion and Aphelion functions.\n * @enum {number}\n */\nconst planetsEnum = {\n  mercury: 0,\n  venus: 1,\n  earth: 2,\n  mars: 3,\n  jupiter: 4,\n  saturn: 5,\n  uranus: 6,\n  neptune: 7,\n  embary: 8\n}\nexport const mercury = planetsEnum.mercury\nexport const venus = planetsEnum.venus\nexport const earth = planetsEnum.earth\nexport const mars = planetsEnum.mars\nexport const jupiter = planetsEnum.jupiter\nexport const saturn = planetsEnum.saturn\nexport const uranus = planetsEnum.uranus\nexport const neptune = planetsEnum.neptune\nexport const embary = planetsEnum.embary\n\n/**\n * Perihelion returns an approximate jde of the perihelion event nearest the given time.\n *\n * @param {planetsEnum} p - planet constant from above\n * @param {Number} year - year number indicating a time near the perihelion event.\n * @returns {Number} jde - time of the event\n */\nexport function perihelion (p, year) {\n  return ap(p, year, false, pf)\n}\n\n/**\n * Aphelion returns an approximate jde of the aphelion event nearest the given time.\n *\n * @param {planetsEnum} p - planet constant from above\n * @param {Number} year - year number indicating a time near the aphelion event.\n * @returns {Number} jde - time of the event\n */\nexport function aphelion (p, year) {\n  return ap(p, year, true, af)\n}\n\nconst pf = function (x) { // (x float64)  float64\n  return Math.floor(x + 0.5)\n}\n\nconst af = function (x) { // (x float64)  float64\n  return Math.floor(x) + 0.5\n}\n\nconst ap = function (p, y, a, f) { // (p int, y float64, a bool, f func(float64)  float64) float64\n  let i = p\n  if (i === embary) {\n    i = earth\n  }\n  const k = f(ka[i].a * (y - ka[i].b))\n  let j = base.horner(k, ...c[i])\n  if (p === earth) {\n    let c = ep\n    if (a) {\n      c = ea\n    }\n    for (let i = 0; i < 5; i++) {\n      j += c[i] * Math.sin((ec[i].a + ec[i].b * k) * Math.PI / 180)\n    }\n  }\n  return j\n}\n\nconst ka = [\n  { a: 4.15201, b: 2000.12 }, // mercury\n  { a: 1.62549, b: 2000.53 }, // ...\n  { a: 0.99997, b: 2000.01 },\n  { a: 0.53166, b: 2001.78 },\n  { a: 0.0843, b: 2011.2 },\n  { a: 0.03393, b: 2003.52 },\n  { a: 0.0119, b: 2051.1 },\n  { a: 0.00607, b: 2047.5 } // neptune\n]\n\nconst c = [\n  [2451590.257, 87.96934963], // mercury\n  [2451738.233, 224.7008188, -0.0000000327], // ...\n  [2451547.507, 365.2596358, 0.0000000156],\n  [2452195.026, 686.9957857, -0.0000001187],\n  [2455636.936, 4332.897065, 0.0001367],\n  [2452830.12, 10764.21676, 0.000827],\n  [2470213.5, 30694.8767, -0.00541],\n  [2468895.1, 60190.33, 0.03429] // neptune\n]\n\nconst ec = [\n  { a: 328.41, b: 132.788585 },\n  { a: 316.13, b: 584.903153 },\n  { a: 346.2, b: 450.380738 },\n  { a: 136.95, b: 659.306737 },\n  { a: 249.52, b: 329.653368 }\n]\n\nconst ep = [1.278, -0.055, -0.091, -0.056, -0.045]\nconst ea = [-1.352, 0.061, 0.062, 0.029, 0.031]\n\n/**\n * Perihelion2 returns the perihelion event nearest the given time.\n *\n * @param {Planet} planet - VSOP87 planet (EMBary is not allowed)\n * @param {Number} year - (float) decimal year number near the perihelion event\n * @param {Number} precision - desired precision of the time result, in days\n * @param {Function} [cb] - callback function for asynchronous processing `cb([jde, r])`\n * @returns {Array} [jde, r]\n *   {Number} jde - time of the event\n *   {Number} r - the distance of the planet from the Sun in AU.\n */\nexport function perihelion2 (planet, year, precision, cb) {\n  return ap2(planetsEnum[planet.name], year, precision, planet, false, pf, cb)\n}\n\n/**\n * Aphelion2 returns the aphelion event nearest the given time.\n *\n * @param {Planet} planet - VSOP87 planet (EMBary is not allowed)\n * @param {Number} year - (float) decimal year number near the perihelion event\n * @param {Number} precision - desired precision of the time result, in days\n * @param {Function} [cb] - callback function for asynchronous processing `cb([jde, r])`\n * @returns {Array} [jde, r]\n *   {Number} jde - time of the event\n *   {Number} r - the distance of the planet from the Sun in AU.\n */\nexport function aphelion2 (planet, year, precision, cb) {\n  return ap2(planetsEnum[planet.name], year, precision, planet, true, af, cb)\n}\n\nif (typeof setImmediate !== 'function') {\n  const setImmediate = setTimeout // eslint-disable-line no-unused-vars\n}\n\nconst ap2 = function (p, y, d, v, a, f, cb) {\n  const j1 = ap(p, y, a, f)\n  if (p !== neptune) {\n    return ap2a(j1, d, a, v, cb)\n  }\n  // handle the double extrema of Neptune\n  if (cb) {\n    ap2a(j1 - 5000, d, a, v, ([j0, r0]) => {\n      ap2a(j1 + 5000, d, a, v, ([j2, r2]) => {\n        if ((r0 > r2) === a) {\n          cb([j0, r0])\n          return\n        }\n        cb([j2, r2])\n      })\n    })\n  } else {\n    const [j0, r0] = ap2a(j1 - 5000, d, a, v)\n    const [j2, r2] = ap2a(j1 + 5000, d, a, v)\n    if ((r0 > r2) === a) {\n      return [j0, r0]\n    }\n    return [j2, r2]\n  }\n}\n\nconst ap2a = function (j1, d, a, v, cb) {\n  let j0 = j1 - d\n  let j2 = j1 + d\n  const rr = new Array(3)\n  rr[1] = v.position2000(j1).range\n  rr[0] = v.position2000(j0).range\n  rr[2] = v.position2000(j2).range\n\n  function end () {\n    const l = new interp.Len3(j0, j2, rr)\n    const [jde, r] = l.extremum()\n    return [jde, r]\n  }\n\n  function run () {\n    if (a) {\n      if (rr[1] > rr[0] && rr[1] > rr[2]) {\n        cb && cb(end())\n        return true\n      }\n    } else {\n      if (rr[1] < rr[0] && rr[1] < rr[2]) {\n        cb && cb(end())\n        return true\n      }\n    }\n    if ((rr[0] < rr[2]) === a) {\n      j0 = j1\n      j1 = j2\n      j2 += d\n      rr[0] = rr[1]\n      rr[1] = rr[2]\n      rr[2] = v.position2000(j2).range\n    } else {\n      j2 = j1\n      j1 = j0\n      j0 -= d\n      rr[2] = rr[1]\n      rr[1] = rr[0]\n      rr[0] = v.position2000(j0).range\n    }\n    if (cb) {\n      setImmediate(run, 0)\n    }\n  }\n\n  if (cb) {\n    run()\n  } else {\n    for (;;) {\n      if (run()) {\n        return end()\n      }\n    }\n  }\n}\n\nexport default {\n  mercury,\n  venus,\n  earth,\n  mars,\n  jupiter,\n  saturn,\n  uranus,\n  neptune,\n  embary,\n  perihelion,\n  aphelion,\n  perihelion2,\n  aphelion2\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module planetary\n */\n/**\n * Planetary: Chapter 36, The Calculation of some Planetary Phenomena.\n *\n * Incomplete: Some functions unimplemented for lack of test data.\n */\n\nimport base from './base.js'\n\n/**\n * Mean computes some intermediate values for a mean planetary configuration\n * given a year and a row of coefficients from Table 36.A, p. 250.0\n */\nexport function mean (y, a) { // (y float64, a *ca)  (J, M, T float64)\n  // (36.1) p. 250\n  const k = Math.floor((365.2425 * y + 1721060 - a.A) / a.B + 0.5)\n  const J = a.A + k * a.B\n  const M = base.pmod(a.M0 + k * a.M1, 360) * Math.PI / 180\n  const T = base.J2000Century(J)\n  return [J, M, T]\n}\n\n/**\n * Sum computes a sum of periodic terms.\n */\nexport function sum (T, M, c) { // (T, M float64, c [][]float64)  float64\n  let j = base.horner(T, c[0])\n  let mm = 0.0\n  for (let i = 1; i < c.length; i++) {\n    mm += M\n    const [smm, cmm] = base.sincos(mm)\n    j += smm * base.horner(T, c[i])\n    i++\n    j += cmm * base.horner(T, c[i])\n  }\n  return j\n}\n\n/**\n * ms returns a mean time corrected by a sum.\n */\nexport function ms (y, a, c) { // (y float64, a *ca, c [][]float64)  float64\n  const [J, M, T] = mean(y, a)\n  return J + sum(T, M, c)\n}\n\n/**\n * MercuryInfConj returns the time of an inferior conjunction of Mercury.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function mercuryInfConj (y) { // (y float64)  (jde float64)\n  return ms(y, micA, micB)\n}\n\n/**\n * MercurySupConj returns the time of a superior conjunction of Mercury.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function mercurySupConj (y) { // (y float64)  (jde float64)\n  return ms(y, mscA, mscB)\n}\n\n/**\n * VenusInfConj returns the time of an inferior conjunction of Venus.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function venusInfConj (y) { // (y float64)  (jde float64)\n  return ms(y, vicA, vicB)\n}\n\n/**\n * MarsOpp returns the time of an opposition of Mars.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function marsOpp (y) { // (y float64)  (jde float64)\n  return ms(y, moA, moB)\n}\n\n/**\n * SumA computes the sum of periodic terms with \"additional angles\"\n */\nexport function sumA (T, M, c, aa) { // (T, M float64, c [][]float64, aa []caa)  float64\n  let i = c.length - 2 * aa.length\n  let j = sum(T, M, c.slice(0, i))\n  for (let k = 0; k < aa.length; k++) {\n    const [saa, caa] = base.sincos((aa[k].c + aa[k].f * T) * Math.PI / 180)\n    j += saa * base.horner(T, c[i])\n    i++\n    j += caa * base.horner(T, c[i])\n    i++\n  }\n  return j\n}\n\n/**\n * Msa returns a mean time corrected by a sum.\n */\nexport function msa (y, a, c, aa) { // (y float64, a *ca, c [][]float64, aa []caa)  float64\n  const [J, M, T] = mean(y, a)\n  return J + sumA(T, M, c, aa)\n}\n\n/**\n * JupiterOpp returns the time of an opposition of Jupiter.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function jupiterOpp (y) { // (y float64)  (jde float64)\n  return msa(y, joA, joB, jaa)\n}\n\n/**\n * SaturnOpp returns the time of an opposition of Saturn.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function saturnOpp (y) { // (y float64)  (jde float64)\n  return msa(y, soA, soB, saa)\n}\n\n/**\n * SaturnConj returns the time of a conjunction of Saturn.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function saturnConj (y) { // (y float64)  (jde float64)\n  return msa(y, scA, scB, saa)\n}\n\n/**\n * UranusOpp returns the time of an opposition of Uranus.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function uranusOpp (y) { // (y float64)  (jde float64)\n  return msa(y, uoA, uoB, uaa)\n}\n\n/**\n * NeptuneOpp returns the time of an opposition of Neptune.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function neptuneOpp (y) { // (y float64)  (jde float64)\n  return msa(y, noA, noB, naa)\n}\n\n/**\n * El computes time and elongation of a greatest elongation event.\n */\nexport function el (y, a, t, e) { // (y float64, a *ca, t, e [][]float64)  (jde, elongation float64)\n  const [J, M, T] = mean(y, micA)\n  return [J + sum(T, M, t), sum(T, M, e) * Math.PI / 180]\n}\n\n/**\n * MercuryEastElongation returns the time and elongation of a greatest eastern elongation of Mercury.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function mercuryEastElongation (y) { // (y float64)  (jde, elongation float64)\n  return el(y, micA, met, mee)\n}\n\n/**\n * MercuryWestElongation returns the time and elongation of a greatest western elongation of Mercury.\n *\n * Result is time (as a jde) of the event nearest the given time (as a\n * decimal year.)\n */\nexport function mercuryWestElongation (y) { // (y float64)  (jde, elongation float64)\n  return el(y, micA, mwt, mwe)\n}\n\nexport function marsStation2 (y) { // (y float64)  (jde float64)\n  const [J, M, T] = mean(y, moA)\n  return J + sum(T, M, ms2)\n}\n\n/**\n * ca holds coefficients from one line of table 36.A, p. 250\n */\nfunction Ca (A, B, M0, M1) {\n  this.A = A\n  this.B = B\n  this.M0 = M0\n  this.M1 = M1\n}\n\n/**\n * Table 36.A, p. 250\n */\nconst micA = new Ca(2451612.023, 115.8774771, 63.5867, 114.2088742)\nconst mscA = new Ca(2451554.084, 115.8774771, 6.4822, 114.2088742)\nconst vicA = new Ca(2451996.706, 583.921361, 82.7311, 215.513058)\nconst moA = new Ca(2452097.382, 779.936104, 181.9573, 48.705244)\nconst joA = new Ca(2451870.628, 398.884046, 318.4681, 33.140229)\nconst soA = new Ca(2451870.17, 378.091904, 318.0172, 12.647487)\nconst scA = new Ca(2451681.124, 378.091904, 131.6934, 12.647487)\nconst uoA = new Ca(2451764.317, 369.656035, 213.6884, 4.333093)\nconst noA = new Ca(2451753.122, 367.486703, 202.6544, 2.194998)\n\n/**\n * caa holds coefficients for \"additional angles\" for outer planets\n * as given on p. 251\n */\nfunction Caa (c, f) {\n  this.c = c\n  this.f = f\n}\n\nconst jaa = [\n  new Caa(82.74, 40.76)\n]\n\nconst saa = [\n  new Caa(82.74, 40.76),\n  new Caa(29.86, 1181.36),\n  new Caa(14.13, 590.68),\n  new Caa(220.02, 1262.87)\n]\n\nconst uaa = [\n  new Caa(207.83, 8.51),\n  new Caa(108.84, 419.96)\n]\n\nconst naa = [\n  new Caa(207.83, 8.51),\n  new Caa(276.74, 209.98)\n]\n\n/**\n * Table 33.B, p. 256\n */\n\n/**\n * Mercury inferior conjunction\n */\nconst micB = [\n  [0.0545, 0.0002],\n  [-6.2008, 0.0074, 0.00003],\n  [-3.275, -0.0197, 0.00001],\n  [0.4737, -0.0052, -0.00001],\n  [0.8111, 0.0033, -0.00002],\n  [0.0037, 0.0018],\n  [-0.1768, 0, 0.00001],\n  [-0.0211, -0.0004],\n  [0.0326, -0.0003],\n  [0.0083, 0.0001],\n  [-0.004, 0.0001]\n]\n\n/**\n * Mercury superior conjunction\n */\nconst mscB = [\n  [-0.0548, -0.0002],\n  [7.3894, -0.01, -0.00003],\n  [3.22, 0.0197, -0.00001],\n  [0.8383, -0.0064, -0.00001],\n  [0.9666, 0.0039, -0.00003],\n  [0.077, -0.0026],\n  [0.2758, 0.0002, -0.00002],\n  [-0.0128, -0.0008],\n  [0.0734, -0.0004, -0.00001],\n  [-0.0122, -0.0002],\n  [0.0173, -0.0002]\n]\n\n/**\n * Venus inferior conjunction\n */\nconst vicB = [\n  [-0.0096, 0.0002, -0.00001],\n  [2.0009, -0.0033, -0.00001],\n  [0.598, -0.0104, 0.00001],\n  [0.0967, -0.0018, -0.00003],\n  [0.0913, 0.0009, -0.00002],\n  [0.0046, -0.0002],\n  [0.0079, 0.0001]\n]\n\n/**\n * Mars opposition\n */\nconst moB = [\n  [-0.3088, 0, 0.00002],\n  [-17.6965, 0.0363, 0.00005],\n  [18.3131, 0.0467, -0.00006],\n  [-0.2162, -0.0198, -0.00001],\n  [-4.5028, -0.0019, 0.00007],\n  [0.8987, 0.0058, -0.00002],\n  [0.7666, -0.005, -0.00003],\n  [-0.3636, -0.0001, 0.00002],\n  [0.0402, 0.0032],\n  [0.0737, -0.0008],\n  [-0.098, -0.0011]\n]\n\n/**\n * Jupiter opposition\n */\nconst joB = [\n  [-0.1029, 0, -0.00009],\n  [-1.9658, -0.0056, 0.00007],\n  [6.1537, 0.021, -0.00006],\n  [-0.2081, -0.0013],\n  [-0.1116, -0.001],\n  [0.0074, 0.0001],\n  [-0.0097, -0.0001],\n  [0, 0.0144, -0.00008],\n  [0.3642, -0.0019, -0.00029]\n]\n\n/**\n * Saturn opposition\n */\nconst soB = [\n  [-0.0209, 0.0006, 0.00023],\n  [4.5795, -0.0312, -0.00017],\n  [1.1462, -0.0351, 0.00011],\n  [0.0985, -0.0015],\n  [0.0733, -0.0031, 0.00001],\n  [0.0025, -0.0001],\n  [0.005, -0.0002],\n  [0, -0.0337, 0.00018],\n  [-0.851, 0.0044, 0.00068],\n  [0, -0.0064, 0.00004],\n  [0.2397, -0.0012, -0.00008],\n  [0, -0.001],\n  [0.1245, 0.0006],\n  [0, 0.0024, -0.00003],\n  [0.0477, -0.0005, -0.00006]\n]\n\n/**\n * Saturn conjunction\n */\nconst scB = [\n  [0.0172, -0.0006, 0.00023],\n  [-8.5885, 0.0411, 0.00020],\n  [-1.147, 0.0352, -0.00011],\n  [0.3331, -0.0034, -0.00001],\n  [0.1145, -0.0045, 0.00002],\n  [-0.0169, 0.0002],\n  [-0.0109, 0.0004],\n  [0, -0.0337, 0.00018],\n  [-0.851, 0.0044, 0.00068],\n  [0, -0.0064, 0.00004],\n  [0.2397, -0.0012, -0.00008],\n  [0, -0.001],\n  [0.1245, 0.0006],\n  [0, 0.0024, -0.00003],\n  [0.0477, -0.0005, -0.00006]\n]\n\n/**\n * Uranus opposition\n */\nconst uoB = [\n  [0.0844, -0.0006],\n  [-0.1048, 0.0246],\n  [-5.1221, 0.0104, 0.00003],\n  [-0.1428, 0.0005],\n  [-0.0148, -0.0013],\n  [0],\n  [0.0055],\n  [0],\n  [0.885],\n  [0],\n  [0.2153]\n]\n\n/**\n * Neptune opposition [\n */\nconst noB = [\n  [-0.014, 0, 0.00001],\n  [-1.3486, 0.001, 0.00001],\n  [0.8597, 0.0037],\n  [-0.0082, -0.0002, 0.00001],\n  [0.0037, -0.0003],\n  [0],\n  [-0.5964],\n  [0],\n  [0.0728]\n]\n\n/**\n * Table 36.C, p. 259\n */\n\n/**\n * Mercury east time correction\n */\nconst met = [\n  [-21.6106, 0.0002],\n  [-1.9803, -0.006, 0.00001],\n  [1.4151, -0.0072, -0.00001],\n  [0.5528, -0.0005, -0.00001],\n  [0.2905, 0.0034, 0.00001],\n  [-0.1121, -0.0001, 0.00001],\n  [-0.0098, -0.0015],\n  [0.0192],\n  [0.0111, 0.0004],\n  [-0.0061],\n  [-0.0032, -0.0001]\n]\n\n/**\n * Mercury east elongation\n */\nconst mee = [\n  [22.4697],\n  [-4.2666, 0.0054, 0.00002],\n  [-1.8537, -0.0137],\n  [0.3598, 0.0008, -0.00001],\n  [-0.068, 0.0026],\n  [-0.0524, -0.0003],\n  [0.0052, -0.0006],\n  [0.0107, 0.0001],\n  [-0.0013, 0.0001],\n  [-0.0021],\n  [0.0003]\n]\n\n/**\n * Mercury west time correction\n */\nconst mwt = [\n  [21.6249, -0.0002],\n  [0.1306, 0.0065],\n  [-2.7661, -0.0011, 0.00001],\n  [0.2438, -0.0024, -0.00001],\n  [0.5767, 0.0023],\n  [0.1041],\n  [-0.0184, 0.0007],\n  [-0.0051, -0.0001],\n  [0.0048, 0.0001],\n  [0.0026],\n  [0.0037]\n]\n\n/**\n * Mercury west elongation\n */\nconst mwe = [\n  [22.4143, -0.0001],\n  [4.3651, -0.0048, -0.00002],\n  [2.3787, 0.0121, -0.00001],\n  [0.2674, 0.0022],\n  [-0.3873, 0.0008, 0.00001],\n  [-0.0369, -0.0001],\n  [0.0017, -0.0001],\n  [0.0059],\n  [0.0061, 0.0001],\n  [0.0007],\n  [-0.0011]\n]\n\n/**\n * Table 36.D, p. 261\n */\n\n/**\n * Mars Station 2\n */\nconst ms2 = [\n  [36.7191, 0.0016, 0.00003],\n  [-12.6163, 0.0417, -0.00001],\n  [20.1218, 0.0379, -0.00006],\n  [-1.636, -0.019],\n  [-3.9657, 0.0045, 0.00007],\n  [1.1546, 0.0029, -0.00003],\n  [0.2888, -0.0073, -0.00002],\n  [-0.3128, 0.0017, 0.00002],\n  [0.2513, 0.0026, -0.00002],\n  [-0.0021, -0.0016],\n  [-0.1497, -0.0006]\n]\n\nexport default {\n  mean,\n  sum,\n  ms,\n  mercuryInfConj,\n  mercurySupConj,\n  venusInfConj,\n  marsOpp,\n  sumA,\n  msa,\n  jupiterOpp,\n  saturnOpp,\n  saturnConj,\n  uranusOpp,\n  neptuneOpp,\n  el,\n  mercuryEastElongation,\n  mercuryWestElongation,\n  marsStation2\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module pluto\n */\n/**\n * Pluto: Chapter 37, Pluto.\n */\n\nimport base from './base.js'\nimport elliptic from './elliptic.js'\n\n/**\n * Heliocentric returns J2000 heliocentric coordinates of Pluto.\n *\n * Results l, b are solar longitude and latitude in radians.\n * Result r is distance in AU.\n */\nexport function heliocentric (jde) {\n  let l = 0\n  let b = 0\n  let r = 0\n  const T = base.J2000Century(jde)\n  const J = 34.35 + 3034.9057 * T\n  const S = 50.08 + 1222.1138 * T\n  const P = 238.96 + 144.96 * T\n  for (const i in t37) {\n    const t = t37[i]\n    const [sα, cα] = base.sincos((t.i * J + t.j * S + t.k * P) * Math.PI / 180)\n    l += t.lA * sα + t.lB * cα\n    b += t.bA * sα + t.bB * cα\n    r += t.rA * sα + t.rB * cα\n  }\n  l = (l + 238.958116 + 144.96 * T) * Math.PI / 180\n  b = (b - 3.908239) * Math.PI / 180\n  r += 40.7241346\n  return { lon: l, lat: b, range: r }\n}\n\n/**\n * Astrometric returns J2000 astrometric coordinates of Pluto.\n */\nexport function astrometric (jde, earth) {\n  const sε = base.SOblJ2000\n  const cε = base.COblJ2000\n  const f = function (jde) {\n    const { lon, lat, range } = heliocentric(jde)\n    const [sl, cl] = base.sincos(lon)\n    const [sb, cb] = base.sincos(lat)\n    // (37.1) p. 264\n    const x = range * cl * cb\n    const y = range * (sl * cb * cε - sb * sε)\n    const z = range * (sl * cb * sε + sb * cε)\n    return { x, y, z }\n  }\n  const c = elliptic.astrometricJ2000(f, jde, earth) // eslint-disable-line no-unused-vars\n  return new base.Coord(c.ra, c.dec)\n}\n\nfunction Pt (i, j, k, lA, lB, bA, bB, rA, rB) {\n  this.i = i\n  this.j = j\n  this.k = k\n  this.lA = lA\n  this.lB = lB\n  this.bA = bA\n  this.bB = bB\n  this.rA = rA\n  this.rB = rB\n}\n\nconst t37 = [\n  new Pt(0, 0, 1, -19.799805, 19.850055, -5.452852, -14.974862, 6.6865439, 6.8951812),\n  new Pt(0, 0, 2, 0.897144, -4.954829, 3.527812, 1.67279, -1.1827535, -0.0332538),\n  new Pt(0, 0, 3, 0.611149, 1.211027, -1.050748, 0.327647, 0.1593179, -0.143889),\n  new Pt(0, 0, 4, -0.341243, -0.189585, 0.17869, -0.292153, -0.0018444, 0.048322),\n  new Pt(0, 0, 5, 0.129287, -0.034992, 0.01865, 0.10034, -0.0065977, -0.0085431),\n  new Pt(0, 0, 6, -0.038164, 0.030893, -0.030697, -0.025823, 0.0031174, -0.0006032),\n  new Pt(0, 1, -1, 0.020442, -0.009987, 0.004878, 0.011248, -0.0005794, 0.0022161),\n  new Pt(0, 1, 0, -0.004063, -0.005071, 0.000226, -0.000064, 0.0004601, 0.0004032),\n  new Pt(0, 1, 1, -0.006016, -0.003336, 0.00203, -0.000836, -0.0001729, 0.0000234),\n  new Pt(0, 1, 2, -0.003956, 0.003039, 0.000069, -0.000604, -0.0000415, 0.0000702),\n  new Pt(0, 1, 3, -0.000667, 0.003572, -0.000247, -0.000567, 0.0000239, 0.0000723),\n  new Pt(0, 2, -2, 0.001276, 0.000501, -0.000057, 0.000001, 0.0000067, -0.0000067),\n  new Pt(0, 2, -1, 0.001152, -0.000917, -0.000122, 0.000175, 0.0001034, -0.0000451),\n  new Pt(0, 2, 0, 0.00063, -0.001277, -0.000049, -0.000164, -0.0000129, 0.0000504),\n  new Pt(1, -1, 0, 0.002571, -0.000459, -0.000197, 0.000199, 0.000048, -0.0000231),\n  new Pt(1, -1, 1, 0.000899, -0.001449, -0.000025, 0.000217, 0.0000002, -0.0000441),\n  new Pt(1, 0, -3, -0.001016, 0.001043, 0.000589, -0.000248, -0.0003359, 0.0000265),\n  new Pt(1, 0, -2, -0.002343, -0.001012, -0.000269, 0.000711, 0.0007856, -0.0007832),\n  new Pt(1, 0, -1, 0.007042, 0.000788, 0.000185, 0.000193, 0.0000036, 0.0045763),\n  new Pt(1, 0, 0, 0.001199, -0.000338, 0.000315, 0.000807, 0.0008663, 0.0008547),\n  new Pt(1, 0, 1, 0.000418, -0.000067, -0.00013, -0.000043, -0.0000809, -0.0000769),\n  new Pt(1, 0, 2, 0.00012, -0.000274, 0.000005, 0.000003, 0.0000263, -0.0000144),\n  new Pt(1, 0, 3, -0.00006, -0.000159, 0.000002, 0.000017, -0.0000126, 0.0000032),\n  new Pt(1, 0, 4, -0.000082, -0.000029, 0.000002, 0.000005, -0.0000035, -0.0000016),\n  new Pt(1, 1, -3, -0.000036, -0.000029, 0.000002, 0.000003, -0.0000019, -0.0000004),\n  new Pt(1, 1, -2, -0.00004, 0.000007, 0.000003, 0.000001, -0.0000015, 0.0000008),\n  new Pt(1, 1, -1, -0.000014, 0.000022, 0.000002, -0.000001, -0.0000004, 0.0000012),\n  new Pt(1, 1, 0, 0.000004, 0.000013, 0.000001, -0.000001, 0.0000005, 0.0000006),\n  new Pt(1, 1, 1, 0.000005, 0.000002, 0, -0.000001, 0.0000003, 0.0000001),\n  new Pt(1, 1, 3, -0.000001, 0, 0, 0, 0.0000006, -0.0000002),\n  new Pt(2, 0, -6, 0.000002, 0, 0, -0.000002, 0.0000002, 0.0000002),\n  new Pt(2, 0, -5, -0.000004, 0.000005, 0.000002, 0.000002, -0.0000002, -0.0000002),\n  new Pt(2, 0, -4, 0.000004, -0.000007, -0.000007, 0, 0.0000014, 0.0000013),\n  new Pt(2, 0, -3, 0.000014, 0.000024, 0.00001, -0.000008, -0.0000063, 0.0000013),\n  new Pt(2, 0, -2, -0.000049, -0.000034, -0.000003, 0.00002, 0.0000136, -0.0000236),\n  new Pt(2, 0, -1, 0.000163, -0.000048, 0.000006, 0.000005, 0.0000273, 0.0001065),\n  new Pt(2, 0, 0, 0.000009, -0.000024, 0.000014, 0.000017, 0.0000251, 0.0000149),\n  new Pt(2, 0, 1, -0.000004, 0.000001, -0.000002, 0, -0.0000025, -0.0000009),\n  new Pt(2, 0, 2, -0.000003, 0.000001, 0, 0, 0.0000009, -0.0000002),\n  new Pt(2, 0, 3, 0.000001, 0.000003, 0, 0, -0.0000008, 0.0000007),\n  new Pt(3, 0, -2, -0.000003, -0.000001, 0, 0.000001, 0.0000002, -0.000001),\n  new Pt(3, 0, -1, 0.000005, -0.000003, 0, 0, 0.0000019, 0.0000035),\n  new Pt(3, 0, 0, 0, 0, 0.000001, 0, 0.000001, 0.0000003)\n]\n\nexport default {\n  heliocentric,\n  astrometric\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module refraction\n */\n/**\n * Refraction: Chapter 16: Atmospheric Refraction.\n *\n * Functions here assume atmospheric pressure of 1010 mb, temperature of\n * 10°C, and yellow light.\n */\nimport sexa from './sexagesimal.js'\nconst { sin, tan } = Math\nconst D2R = Math.PI / 180\n\nconst gt15true1 = new sexa.Angle(false, 0, 0, 58.294).rad()\nconst gt15true2 = new sexa.Angle(false, 0, 0, 0.0668).rad()\nconst gt15app1 = new sexa.Angle(false, 0, 0, 58.276).rad()\nconst gt15app2 = new sexa.Angle(false, 0, 0, 0.0824).rad()\n\n/**\n * gt15True returns refraction for obtaining true altitude when altitude\n * is greater than 15 degrees (about 0.26 radians.)\n *\n * h0 must be a measured apparent altitude of a celestial body in radians.\n *\n * Result is refraction to be subtracted from h0 to obtain the true altitude\n * of the body.  Unit is radians.\n */\nexport function gt15True (h0) { // (h0 float64)  float64\n  // (16.1) p. 105\n  const t = tan(Math.PI / 2 - h0)\n  return gt15true1 * t - gt15true2 * t * t * t\n}\n\n/**\n * gt15Apparent returns refraction for obtaining apparent altitude when\n * altitude is greater than 15 degrees (about 0.26 radians.)\n *\n * h must be a computed true \"airless\" altitude of a celestial body in radians.\n *\n * Result is refraction to be added to h to obtain the apparent altitude\n * of the body.  Unit is radians.\n */\nexport function gt15Apparent (h) { // (h float64)  float64\n  // (16.2) p. 105\n  const t = tan(Math.PI / 2 - h)\n  return gt15app1 * t - gt15app2 * t * t * t\n}\n\n/**\n * Bennett returns refraction for obtaining true altitude.\n *\n * h0 must be a measured apparent altitude of a celestial body in radians.\n *\n * Results are accurate to 0.07 arc min from horizon to zenith.\n *\n * Result is refraction to be subtracted from h0 to obtain the true altitude\n * of the body.  Unit is radians.\n */\nexport function bennett (h0) { // (h0 float64)  float64\n  // (16.3) p. 106\n  const c1 = D2R / 60\n  const c731 = 7.31 * D2R * D2R\n  const c44 = 4.4 * D2R\n  return c1 / tan(h0 + c731 / (h0 + c44))\n}\n\n/**\n * Bennett2 returns refraction for obtaining true altitude.\n *\n * Similar to Bennett, but a correction is applied to give a more accurate\n * result.\n *\n * Results are accurate to 0.015 arc min.  Result unit is radians.\n */\nexport function bennett2 (h0) { // (h0 float64)  float64\n  const cMin = 60 / D2R\n  const c06 = 0.06 / cMin\n  const c147 = 14.7 * cMin * D2R\n  const c13 = 13 * D2R\n  const R = bennett(h0)\n  return R - c06 * sin(c147 * R + c13)\n}\n\n/**\n * Saemundsson returns refraction for obtaining apparent altitude.\n *\n * h must be a computed true \"airless\" altitude of a celestial body in radians.\n *\n * Result is refraction to be added to h to obtain the apparent altitude\n * of the body.\n *\n * Results are consistent with Bennett to within 4 arc sec.\n * Result unit is radians.\n */\nexport function saemundsson (h) { // (h float64)  float64\n  // (16.4) p. 106\n  const c102 = 1.02 * D2R / 60\n  const c103 = 10.3 * D2R * D2R\n  const c511 = 5.11 * D2R\n  return c102 / tan(h + c103 / (h + c511))\n}\n\nexport default {\n  gt15True,\n  gt15Apparent,\n  bennett,\n  bennett2,\n  saemundsson\n}\n", "/* eslint key-spacing: 1 */\n/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module rise\n */\n/**\n * Rise: Chapter 15, Rising, Transit, and Setting.\n */\n\nimport base from './base.js'\nimport deltat from './deltat.js'\nimport elliptic from './elliptic.js'\nimport interp from './interpolation.js'\nimport julian from './julian.js'\nimport sexa from './sexagesimal.js'\nimport sidereal from './sidereal.js'\nimport { Coord as GlobeCoord } from './globe.js' // eslint-disable-line no-unused-vars\nimport { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\nconst { acos, asin, cos, sin } = Math\n\n/**\n * @typedef {object} RiseObj\n * @property {number} rise - in seconds\n * @property {number} transit - in seconds\n * @property {number} set - in seconds\n */\n\nconst SECS_PER_DEGREE = 240 // = 86400 / 360\nconst SECS_PER_DAY = 86400\nconst D2R = Math.PI / 180\n\nexport const errorAboveHorizon = base.errorCode('always above horizon', -1)\nexport const errorBelowHorizon = base.errorCode('always below horizon', 1)\n\n/**\n * mean refraction of the atmosphere\n */\nexport const meanRefraction = new sexa.Angle(false, 0, 34, 0).rad()\n\n/**\n * \"Standard altitudes\" for various bodies already including `meanRefraction` of 0°34'\n *\n * The standard altitude is the geometric altitude of the center of body\n * at the time of apparent rising or seting.\n */\nexport const stdh0 = {\n  stellar: -meanRefraction,\n  solar: new sexa.Angle(true, 0, 50, 0).rad(),\n  // not containing meanRefraction\n  lunar: sexa.angleFromDeg(0.7275),\n  lunarMean: sexa.angleFromDeg(0.125)\n}\n\n/**\n * Helper function to obtain corrected refraction\n * @param {number} h0 - altitude of the body in radians containing `meanRefraction` of 0°34'\n * @param {number} [corr] - the calcluated refraction e.g. from package `refraction` in radians\n * @return {number} refraction value in radians\n */\nexport function refraction (h0, corr) {\n  if (!corr) {\n    return h0\n  } else {\n    return h0 - meanRefraction - corr\n  }\n}\n\n/**\n * standard altitude for stars, planets at apparent rising, seting\n */\nexport const stdh0Stellar = (_refraction) => refraction(stdh0.stellar, _refraction)\nexport const Stdh0Stellar = stdh0Stellar() // for backward-compatibility\n/**\n * standard altitude for sun for upper limb of the disk\n */\nexport const stdh0Solar = (_refraction) => refraction(stdh0.solar, _refraction)\nexport const Stdh0Solar = stdh0Solar() // for backward-compatibility\n\n/**\n * standard altitude for moon (low accuracy)\n */\nexport const stdh0LunarMean = (_refraction) => {\n  return stdh0.lunarMean - refraction(_refraction)\n}\nexport const Stdh0LunarMean = stdh0LunarMean() // for backward-compatibility\n/**\n * Stdh0Lunar is the standard altitude of the Moon considering π, the\n * Moon's horizontal parallax.\n * @param {number} π - the Moon's horizontal parallax\n * @param {number} [refraction] - optional value for refraction in radians if\n *        omitted than meanRefraction is used\n * @return {number} altitude of Moon in radians\n */\nexport const stdh0Lunar = (π, refraction) => {\n  return stdh0.lunar * π - (refraction || meanRefraction)\n}\nexport const Stdh0Lunar = stdh0Lunar // for backward-compatibility\n\n/**\n * @return {number} local angle in radians\n */\nexport function hourAngle (lat, h0, δ) {\n  // approximate local hour angle\n  const cosH = (sin(h0) - sin(lat) * sin(δ)) / (cos(lat) * cos(δ)) // (15.1) p. 102\n  if (cosH < -1) {\n    throw errorAboveHorizon\n  } else if (cosH > 1) {\n    throw errorBelowHorizon\n  }\n  const H = acos(cosH)\n  return H\n}\n\n/**\n * @param {number} lon - longitude in radians\n * @param {number} α - right ascension in radians\n * @param {number} th0 - sidereal.apparent0UT in seconds of day `[0...86400[`\n * @return {number} time of transit in seconds of day `[0, 86400[`\n */\nfunction _mt (lon, α, th0) {\n  // const mt = (((lon + α) * 180 / Math.PI - (th0 * 360 / 86400)) * 86400 / 360)\n  const mt = (lon + α) * SECS_PER_DEGREE * 180 / Math.PI - th0\n  return mt\n}\n\n/**\n * @param {number} Th0 - sidereal.apparent0UT in seconds of day `[0...86400[`\n * @param {number} m - motion in seconds of day `[0...86400[`\n * @return {number} new siderial time seconds of day `[0...86400[`\n */\nfunction _th0 (Th0, m) {\n  // in original formula Th0 = 0...360 and m = 0...1 -> return value would be in 0...360 degrees\n  // Th0 /= 240\n  // m /= 86400\n  const th0 = base.pmod(Th0 + m * 360.985647 / 360, SECS_PER_DAY) // p103\n  return th0 // 0...86400 in seconds angle\n}\n\n/**\n * maintain backward compatibility - will be removed in v2\n * return value in future will be an object not an array\n * @private\n * @param {RiseObj} rs\n * @return {RiseObj}\n */\nfunction _compatibility (rs) {\n  const _rs = [rs.rise, rs.transit, rs.set]\n  _rs.rise = rs.rise\n  _rs.transit = rs.transit\n  _rs.set = rs.set\n  return _rs\n}\n\n/**\n * ApproxTimes computes approximate UT rise, transit and set times for\n * a celestial object on a day of interest.\n *\n * The function argurments do not actually include the day, but do include\n * values computed from the day.\n *\n * @param {GlobeCoord} p - is geographic coordinates of observer.\n * @param {number} h0 - is \"standard altitude\" of the body in radians\n * @param {number} Th0 - is apparent sidereal time at 0h UT at Greenwich in seconds\n *        (range 0...86400) must be the time on the day of interest, in seconds.\n *        See sidereal.apparent0UT\n * @param {number} α - right ascension (radians)\n * @param {number} δ - declination (radians)\n * @return {RiseObj} Result units are seconds and are in the range [0,86400)\n * @throws Error\n */\nexport function approxTimes (p, h0, Th0, α, δ) {\n  const H0 = hourAngle(p.lat, h0, δ) * SECS_PER_DEGREE * 180 / Math.PI // in degrees per day === seconds\n  // approximate transit, rise, set times.\n  // (15.2) p. 102.0\n  const mt = _mt(p.lon, α, Th0)\n  const rs = {}\n  rs.transit = base.pmod(mt, SECS_PER_DAY)\n  rs.rise = base.pmod(mt - H0, SECS_PER_DAY)\n  rs.set = base.pmod(mt + H0, SECS_PER_DAY)\n  return _compatibility(rs)\n}\n\n/**\n * Times computes UT rise, transit and set times for a celestial object on\n * a day of interest.\n *\n * The function argurments do not actually include the day, but do include\n * a number of values computed from the day.\n *\n * @param {GlobeCoord} p - is geographic coordinates of observer.\n * @param {number} ΔT - is delta T in seconds\n * @param {number} h0 - is \"standard altitude\" of the body in radians\n * @param {number} Th0 - is apparent sidereal time at 0h UT at Greenwich in seconds\n *        (range 0...86400) must be the time on the day of interest, in seconds.\n *        See sidereal.apparent0UT\n * @param {Array<number>} α3 - slices of three right ascensions\n * @param {Array<number>} δ3 - slices of three declinations.\n *        α3, δ3 must be values at 0h dynamical time for the day before, the day of,\n *        and the day after the day of interest.  Units are radians.\n *\n * @return {RiseObj} Result units are seconds and are in the range [0,86400)\n * @throws Error\n */\nexport function times (p, ΔT, h0, Th0, α3, δ3) { // (p globe.Coord, ΔT, h0, Th0 float64, α3, δ3 []float64)  (mRise, mTransit, mSet float64, err error)\n  const rs = approxTimes(p, h0, Th0, α3[1], δ3[1])\n  const d3α = new interp.Len3(-SECS_PER_DAY, SECS_PER_DAY, α3)\n  const d3δ = new interp.Len3(-SECS_PER_DAY, SECS_PER_DAY, δ3)\n\n  // adjust mTransit\n  const ut = rs.transit + ΔT\n  const α = d3α.interpolateX(ut)\n  const th0 = _th0(Th0, rs.transit)\n  const H = -1 * _mt(p.lon, α, th0) // in secs // Hmeus = 0...360\n  rs.transit -= H\n\n  // adjust mRise, mSet\n  const [sLat, cLat] = base.sincos(p.lat)\n\n  const adjustRS = function (m) {\n    const ut = m + ΔT\n    const α = d3α.interpolateX(ut)\n    const δ = d3δ.interpolateX(ut)\n    const th0 = _th0(Th0, m)\n    const H = -1 * _mt(p.lon, α, th0)\n    const Hrad = (H / SECS_PER_DEGREE) * D2R\n    const h = asin(((sLat * sin(δ)) + (cLat * cos(δ) * cos(Hrad)))) // formula 13.6\n    const Δm = (SECS_PER_DAY * (h - h0) / (cos(δ) * cLat * sin(Hrad) * 2 * Math.PI)) // formula p103 3\n    return m + Δm\n  }\n\n  rs.rise = adjustRS(rs.rise)\n  rs.set = adjustRS(rs.set)\n\n  return _compatibility(rs)\n}\n\n/**\n * RisePlanet computes rise, transit and set times for a planet on a day of interest.\n */\nexport class PlanetRise {\n  /**\n   * @param {number|Date} jd - Julian Day starting at midnight or Date object\n   * @param {number} lat - geographic latitude of the observerin degrees\n   * @param {number} lon - geographic longitude of the observer in degrees (measured positively westward)\n   * @param {Planet} earth - VSOP87 Planet object for Earth\n   * @param {Planet} planet - VSOP87 Planet object of observed body\n   * @param {object} [opts]\n   * @param {boolean} [opts.date] - return times as Date objects\n   * @param {number} [opts.refraction] - use different refraction than `stdh0Stellar`\n   */\n  constructor (jd, lat, lon, earth, planet, opts) {\n    this.opts = opts || {}\n    this.refraction = this.opts.refraction || stdh0Stellar()\n    if (jd instanceof Date) {\n      jd = new julian.Calendar().fromDate(jd).toJD()\n    }\n    this.jd = Math.floor(jd - 0.5) + 0.5 // start at midnight\n    this.lat = lat * D2R // convert to radians\n    this.lon = lon * D2R\n    const cal = new julian.Calendar().fromJD(this.jd)\n    this.jde = cal.toJDE()\n    this.ΔT = deltat.deltaT(cal.toYear())\n    this.earth = earth\n    this.planet = planet\n  }\n\n  approxTimes () {\n    const body = elliptic.position(this.planet, this.earth, this.jde)\n    const Th0 = sidereal.apparent0UT(this.jd)\n    const rs = approxTimes(\n      { lat: this.lat, lon: this.lon }, this.refraction,\n      Th0, body.ra, body.dec\n    )\n    return this._rsToJD(rs)\n  }\n\n  times () {\n    const body = [\n      elliptic.position(this.planet, this.earth, this.jde - 1),\n      elliptic.position(this.planet, this.earth, this.jde),\n      elliptic.position(this.planet, this.earth, this.jde + 1)\n    ]\n    const Th0 = sidereal.apparent0UT(this.jd)\n    const rs = times(\n      { lat: this.lat, lon: this.lon }, this.ΔT, this.refraction,\n      Th0, this._toArr(body, 'ra'), this._toArr(body, 'dec')\n    )\n    return this._rsToJD(rs)\n  }\n\n  /** @private */\n  _toArr (body, p) {\n    return body.map((item) => {\n      return item[p]\n    })\n  }\n\n  /** @private */\n  _rsToJD (rs) {\n    return {\n      rise: this._toJD(rs.rise),\n      transit: this._toJD(rs.transit),\n      set: this._toJD(rs.set)\n    }\n  }\n\n  /** @private */\n  _toJD (secs) {\n    const jd = this.jd + secs / 86400\n    if (this.opts.date) {\n      return new julian.Calendar().fromJD(jd).toDate()\n    } else {\n      return jd\n    }\n  }\n}\n\nexport default {\n  errorAboveHorizon,\n  errorBelowHorizon,\n  meanRefraction,\n  stdh0,\n  refraction,\n  stdh0Stellar,\n  Stdh0Stellar,\n  stdh0Solar,\n  Stdh0Solar,\n  stdh0LunarMean,\n  Stdh0LunarMean,\n  stdh0Lunar,\n  Stdh0Lunar,\n  hourAngle,\n  approxTimes,\n  times,\n  PlanetRise\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module saturnmoons\n */\n/**\n * Saturnmoons: Chapter 46, Positions of the Satellites of Saturn\n */\n\nimport base from './base.js'\nimport coord from './coord.js'\nimport planetposition, { Planet } from './planetposition.js' // eslint-disable-line no-unused-vars\nimport precess from './precess.js'\nimport solar from './solar.js'\n\n// array positions of Saturnmoons returned from positions().\nexport const mimas = 0\nexport const enceladus = 1\nexport const tethys = 2\nexport const dione = 3\nexport const rhea = 4\nexport const titan = 5\nexport const hyperion = 6\nexport const iapetus = 7\n\n/**\n * XY holds coordinates returned from positions().\n */\nfunction XY (x, y) {\n  this.x = x\n  this.y = y\n}\n\nconst d = Math.PI / 180\n\n/**\n * Positions returns positions of the eight major moons of Saturn.\n *\n * Results returned in argument pos, which must not be undefined.\n *\n * Result units are Saturn radii.\n *\n * @param {number} jde - Julian ephemeris day\n * @param {Planet} earth - VSOP87 planet Earth // eslint-disable-line no-unused-vars\n * @param {Planet} saturn - VSOP87 planet Saturn // eslint-disable-line no-unused-vars\n * @return {XY[]} Array of Moon Positions in `XY`\n *   Use `M.mimas ... M.iapetus` to resolve to Moon and its position at `jde`\n */\nexport function positions (jde, earth, saturn) {\n  const sol = solar.trueVSOP87(earth, jde)\n  const [s, β, R] = [sol.lon, sol.lat, sol.range]\n  const [ss, cs] = base.sincos(s)\n  const sβ = Math.sin(β)\n  let Δ = 9.0\n  let x\n  let y\n  let z = 0\n  let _jde\n\n  const f = function () {\n    const τ = base.lightTime(Δ)\n    _jde = jde - τ\n    const { lon, lat, range } = saturn.position(_jde)\n    const fk5 = planetposition.toFK5(lon, lat, _jde) // eslint-disable-line no-unused-vars\n    const [l, b] = [fk5.lon, fk5.lat]\n    const [sl, cl] = base.sincos(l)\n    const [sb, cb] = base.sincos(b)\n    x = range * cb * cl + R * cs\n    y = range * cb * sl + R * ss\n    z = range * sb + R * sβ\n    Δ = Math.sqrt(x * x + y * y + z * z)\n  }\n  f()\n  f()\n\n  let λ0 = Math.atan2(y, x)\n  let β0 = Math.atan(z / Math.hypot(x, y))\n  let ecl = new coord.Ecliptic(λ0, β0)\n  ecl = precess.eclipticPosition(ecl, base.JDEToJulianYear(jde), base.JDEToJulianYear(base.B1950))\n  λ0 = ecl.lon\n  β0 = ecl.lat\n  const q = new Qs(_jde)\n  const s4 = [\n    new R4(), // 0 unused\n    q.mimas(),\n    q.enceladus(),\n    q.tethys(),\n    q.dione(),\n    q.rhea(),\n    q.titan(),\n    q.hyperion(),\n    q.iapetus()\n  ]\n\n  const X = new Array(9).fill(0)\n  const Y = new Array(9).fill(0)\n  const Z = new Array(9).fill(0)\n  for (let j = 1; j <= 8; j++) {\n    const u = s4[j].λ - s4[j].Ω\n    const w = s4[j].Ω - 168.8112 * d\n    const [su, cu] = base.sincos(u)\n    const [sw, cw] = base.sincos(w)\n    const [sγ, cγ] = base.sincos(s4[j].γ)\n    const r = s4[j].r\n    X[j] = r * (cu * cw - su * cγ * sw)\n    Y[j] = r * (su * cw * cγ + cu * sw)\n    Z[j] = r * su * sγ\n  }\n  Z[0] = 1\n  const [sλ0, cλ0] = base.sincos(λ0)\n  const [sβ0, cβ0] = base.sincos(β0)\n  const A = new Array(9).fill(0)\n  const B = new Array(9).fill(0)\n  const C = new Array(9).fill(0)\n  for (const j in X) {\n    let a = X[j]\n    let b = q.c1 * Y[j] - q.s1 * Z[j]\n    const c = q.s1 * Y[j] + q.c1 * Z[j]\n    const a0 = q.c2 * a - q.s2 * b\n    b = q.s2 * a + q.c2 * b\n    a = a0\n\n    A[j] = a * sλ0 - b * cλ0\n    b = a * cλ0 + b * sλ0\n\n    B[j] = b * cβ0 + c * sβ0\n    C[j] = c * cβ0 - b * sβ0\n  }\n\n  const pos = new Array(9)\n  const D = Math.atan2(A[0], C[0])\n  const [sD, cD] = base.sincos(D)\n  for (let j = 1; j <= 8; j++) {\n    X[j] = A[j] * cD - C[j] * sD\n    Y[j] = A[j] * sD + C[j] * cD\n    Z[j] = B[j]\n    const d = X[j] / s4[j].r\n    X[j] += Math.abs(Z[j]) / k[j] * Math.sqrt(1 - d * d)\n    const W = Δ / (Δ + Z[j] / 2475)\n    pos[j - 1] = new XY(X[j] * W, Y[j] * W)\n  }\n  return pos\n}\n\nconst k = [0, 20947, 23715, 26382, 29876, 35313, 53800, 59222, 91820]\n\nfunction R4 (λ, r, γ, Ω) {\n  this.λ = λ || 0\n  this.r = r || 0\n  this.γ = γ || 0\n  this.Ω = Ω || 0\n}\n\nexport function Qs (jde) {\n  this.t1 = jde - 2411093\n  this.t2 = this.t1 / 365.25\n  this.t3 = (jde - 2433282.423) / 365.25 + 1950\n  this.t4 = jde - 2411368\n  this.t5 = this.t4 / 365.25\n  this.t6 = jde - 2415020\n  this.t7 = this.t6 / 36525\n  this.t8 = this.t6 / 365.25\n  this.t9 = (jde - 2442000.5) / 365.25\n  this.t10 = jde - 2409786\n  this.t11 = this.t10 / 36525\n  this.W0 = 5.095 * d * (this.t3 - 1866.39)\n  this.W1 = 74.4 * d + 32.39 * d * this.t2\n  this.W2 = 134.3 * d + 92.62 * d * this.t2\n  this.W3 = 42 * d - 0.5118 * d * this.t5\n  this.W4 = 276.59 * d + 0.5118 * d * this.t5\n  this.W5 = 267.2635 * d + 1222.1136 * d * this.t7\n  this.W6 = 175.4762 * d + 1221.5515 * d * this.t7\n  this.W7 = 2.4891 * d + 0.002435 * d * this.t7\n  this.W8 = 113.35 * d - 0.2597 * d * this.t7\n  this.s1 = Math.sin(28.0817 * d)\n  this.c1 = Math.cos(28.0817 * d)\n  this.s2 = Math.sin(168.8112 * d)\n  this.c2 = Math.cos(168.8112 * d)\n  this.e1 = 0.05589 - 0.000346 * this.t7\n  this.sW0 = Math.sin(this.W0)\n  this.s3W0 = Math.sin(3 * this.W0)\n  this.s5W0 = Math.sin(5 * this.W0)\n  this.sW1 = Math.sin(this.W1)\n  this.sW2 = Math.sin(this.W2)\n  this.sW3 = Math.sin(this.W3)\n  this.cW3 = Math.cos(this.W3)\n  this.sW4 = Math.sin(this.W4)\n  this.cW4 = Math.cos(this.W4)\n  this.sW7 = Math.sin(this.W7)\n  this.cW7 = Math.cos(this.W7)\n  return this\n}\n\nQs.prototype.mimas = function () {\n  const r = new R4()\n  const L = 127.64 * d + 381.994497 * d * this.t1 -\n    43.57 * d * this.sW0 - 0.72 * d * this.s3W0 - 0.02144 * d * this.s5W0\n  const p = 106.1 * d + 365.549 * d * this.t2\n  const M = L - p\n  const C = 2.18287 * d * Math.sin(M) +\n    0.025988 * d * Math.sin(2 * M) + 0.00043 * d * Math.sin(3 * M)\n  r.λ = L + C\n  r.r = 3.06879 / (1 + 0.01905 * Math.cos(M + C))\n  r.γ = 1.563 * d\n  r.Ω = 54.5 * d - 365.072 * d * this.t2\n  return r\n}\n\nQs.prototype.enceladus = function () {\n  const r = new R4()\n  const L = 200.317 * d + 262.7319002 * d * this.t1 + 0.25667 * d * this.sW1 + 0.20883 * d * this.sW2\n  const p = 309.107 * d + 123.44121 * d * this.t2\n  const M = L - p\n  const C = 0.55577 * d * Math.sin(M) + 0.00168 * d * Math.sin(2 * M)\n  r.λ = L + C\n  r.r = 3.94118 / (1 + 0.00485 * Math.cos(M + C))\n  r.γ = 0.0262 * d\n  r.Ω = 348 * d - 151.95 * d * this.t2\n  return r\n}\n\nQs.prototype.tethys = function () {\n  const r = new R4()\n  r.λ = 285.306 * d + 190.69791226 * d * this.t1 +\n    2.063 * d * this.sW0 + 0.03409 * d * this.s3W0 + 0.001015 * d * this.s5W0\n  r.r = 4.880998\n  r.γ = 1.0976 * d\n  r.Ω = 111.33 * d - 72.2441 * d * this.t2\n  return r\n}\n\nQs.prototype.dione = function () {\n  const r = new R4()\n  const L = 254.712 * d + 131.53493193 * d * this.t1 - 0.0215 * d * this.sW1 - 0.01733 * d * this.sW2\n  const p = 174.8 * d + 30.82 * d * this.t2\n  const M = L - p\n  const C = 0.24717 * d * Math.sin(M) + 0.00033 * d * Math.sin(2 * M)\n  r.λ = L + C\n  r.r = 6.24871 / (1 + 0.002157 * Math.cos(M + C))\n  r.γ = 0.0139 * d\n  r.Ω = 232 * d - 30.27 * d * this.t2\n  return r\n}\n\nQs.prototype.rhea = function () {\n  const pʹ = 342.7 * d + 10.057 * d * this.t2\n  const [spʹ, cpʹ] = base.sincos(pʹ)\n  const a1 = 0.000265 * spʹ + 0.001 * this.sW4\n  const a2 = 0.000265 * cpʹ + 0.001 * this.cW4\n  const e = Math.hypot(a1, a2)\n  const p = Math.atan2(a1, a2)\n  const N = 345 * d - 10.057 * d * this.t2\n  const [sN, cN] = base.sincos(N)\n  const λʹ = 359.244 * d + 79.6900472 * d * this.t1 + 0.086754 * d * sN\n  const i = 28.0362 * d + 0.346898 * d * cN + 0.0193 * d * this.cW3\n  const Ω = 168.8034 * d + 0.736936 * d * sN + 0.041 * d * this.sW3\n  const a = 8.725924\n  return this.subr(λʹ, p, e, a, Ω, i)\n}\n\nQs.prototype.subr = function (λʹ, p, e, a, Ω, i) {\n  const r = new R4()\n  const M = λʹ - p\n  const e2 = e * e\n  const e3 = e2 * e\n  const e4 = e2 * e2\n  const e5 = e3 * e2\n  const C = (2 * e - 0.25 * e3 + 0.0520833333 * e5) * Math.sin(M) +\n    (1.25 * e2 - 0.458333333 * e4) * Math.sin(2 * M) +\n    (1.083333333 * e3 - 0.671875 * e5) * Math.sin(3 * M) +\n    1.072917 * e4 * Math.sin(4 * M) + 1.142708 * e5 * Math.sin(5 * M)\n  r.r = a * (1 - e2) / (1 + e * Math.cos(M + C)) // return value\n  const g = Ω - 168.8112 * d\n  const [si, ci] = base.sincos(i)\n  const [sg, cg] = base.sincos(g)\n  const a1 = si * sg\n  const a2 = this.c1 * si * cg - this.s1 * ci\n  r.γ = Math.asin(Math.hypot(a1, a2)) // return value\n  const u = Math.atan2(a1, a2)\n  r.Ω = 168.8112 * d + u // return value (w)\n  const h = this.c1 * si - this.s1 * ci * cg\n  const ψ = Math.atan2(this.s1 * sg, h)\n  r.λ = λʹ + C + u - g - ψ // return value\n  return r\n}\n\nQs.prototype.titan = function () {\n  const L = 261.1582 * d + 22.57697855 * d * this.t4 + 0.074025 * d * this.sW3\n  const iʹ = 27.45141 * d + 0.295999 * d * this.cW3\n  const Ωʹ = 168.66925 * d + 0.628808 * d * this.sW3\n  const [siʹ, ciʹ] = base.sincos(iʹ)\n  const [sΩʹW8, cΩʹW8] = base.sincos(Ωʹ - this.W8)\n  const a1 = this.sW7 * sΩʹW8\n  const a2 = this.cW7 * siʹ - this.sW7 * ciʹ * cΩʹW8\n  const g0 = 102.8623 * d\n  const ψ = Math.atan2(a1, a2)\n  const s = Math.hypot(a1, a2)\n  let g = this.W4 - Ωʹ - ψ\n  let ϖ = 0\n  const [s2g0, c2g0] = base.sincos(2 * g0)\n  const f = () => {\n    ϖ = this.W4 + 0.37515 * d * (Math.sin(2 * g) - s2g0)\n    g = ϖ - Ωʹ - ψ\n  }\n  f()\n  f()\n  f()\n  const eʹ = 0.029092 + 0.00019048 * (Math.cos(2 * g) - c2g0)\n  const qq = 2 * (this.W5 - ϖ)\n  const b1 = siʹ * sΩʹW8\n  const b2 = this.cW7 * siʹ * cΩʹW8 - this.sW7 * ciʹ\n  const θ = Math.atan2(b1, b2) + this.W8\n  const [sq, cq] = base.sincos(qq)\n  const e = eʹ + 0.002778797 * eʹ * cq\n  const p = ϖ + 0.159215 * d * sq\n  const u = 2 * this.W5 - 2 * θ + ψ\n  const [su, cu] = base.sincos(u)\n  const h = 0.9375 * eʹ * eʹ * sq + 0.1875 * s * s * Math.sin(2 * (this.W5 - θ))\n  const λʹ = L - 0.254744 * d *\n    (this.e1 * Math.sin(this.W6) + 0.75 * this.e1 * this.e1 * Math.sin(2 * this.W6) + h)\n  const i = iʹ + 0.031843 * d * s * cu\n  const Ω = Ωʹ + 0.031843 * d * s * su / siʹ\n  const a = 20.216193\n  return this.subr(λʹ, p, e, a, Ω, i)\n}\n\nQs.prototype.hyperion = function () {\n  const η = 92.39 * d + 0.5621071 * d * this.t6\n  const ζ = 148.19 * d - 19.18 * d * this.t8\n  const θ = 184.8 * d - 35.41 * d * this.t9\n  const θʹ = θ - 7.5 * d\n  const as = 176 * d + 12.22 * d * this.t8\n  const bs = 8 * d + 24.44 * d * this.t8\n  const cs = bs + 5 * d\n  const ϖ = 69.898 * d - 18.67088 * d * this.t8\n  const φ = 2 * (ϖ - this.W5)\n  const χ = 94.9 * d - 2.292 * d * this.t8\n  const [sη, cη] = base.sincos(η)\n  const [sζ, cζ] = base.sincos(ζ)\n  const [s2ζ, c2ζ] = base.sincos(2 * ζ)\n  const [s3ζ, c3ζ] = base.sincos(3 * ζ)\n  const [sζpη, cζpη] = base.sincos(ζ + η)\n  const [sζmη, cζmη] = base.sincos(ζ - η)\n  const [sφ, cφ] = base.sincos(φ)\n  const [sχ, cχ] = base.sincos(χ)\n  const [scs, ccs] = base.sincos(cs)\n  const a = 24.50601 - 0.08686 * cη - 0.00166 * cζpη + 0.00175 * cζmη\n  const e = 0.103458 - 0.004099 * cη - 0.000167 * cζpη + 0.000235 * cζmη +\n    0.02303 * cζ - 0.00212 * c2ζ + 0.000151 * c3ζ + 0.00013 * cφ\n  const p = ϖ + 0.15648 * d * sχ - 0.4457 * d * sη - 0.2657 * d * sζpη - 0.3573 * d * sζmη -\n    12.872 * d * sζ + 1.668 * d * s2ζ - 0.2419 * d * s3ζ - 0.07 * d * sφ\n  const λʹ = 177.047 * d + 16.91993829 * d * this.t6 + 0.15648 * d * sχ + 9.142 * d * sη +\n    0.007 * d * Math.sin(2 * η) - 0.014 * d * Math.sin(3 * η) + 0.2275 * d * sζpη +\n    0.2112 * d * sζmη - 0.26 * d * sζ - 0.0098 * d * s2ζ -\n    0.013 * d * Math.sin(as) + 0.017 * d * Math.sin(bs) - 0.0303 * d * sφ\n  const i = 27.3347 * d + 0.6434886 * d * cχ + 0.315 * d * this.cW3 + 0.018 * d * Math.cos(θ) -\n    0.018 * d * ccs\n  const Ω = 168.6812 * d + 1.40136 * d * cχ + 0.68599 * d * this.sW3 - 0.0392 * d * scs +\n    0.0366 * d * Math.sin(θʹ)\n  return this.subr(λʹ, p, e, a, Ω, i)\n}\n\nQs.prototype.iapetus = function () {\n  const L = 261.1582 * d + 22.57697855 * d * this.t4\n  const ϖʹ = 91.796 * d + 0.562 * d * this.t7\n  const ψ = 4.367 * d - 0.195 * d * this.t7\n  const θ = 146.819 * d - 3.198 * d * this.t7\n  const φ = 60.47 * d + 1.521 * d * this.t7\n  const Φ = 205.055 * d - 2.091 * d * this.t7\n  const eʹ = 0.028298 + 0.001156 * this.t11\n  const ϖ0 = 352.91 * d + 11.71 * d * this.t11\n  const μ = 76.3852 * d + 4.53795125 * d * this.t10\n  const iʹ = base.horner(this.t11, 18.4602 * d, -0.9518 * d, -0.072 * d, 0.0054 * d)\n  const Ωʹ = base.horner(this.t11, 143.198 * d, -3.919 * d, 0.116 * d, 0.008 * d)\n  const l = μ - ϖ0\n  const g = ϖ0 - Ωʹ - ψ\n  const g1 = ϖ0 - Ωʹ - φ\n  const ls = this.W5 - ϖʹ\n  const gs = ϖʹ - θ\n  const lT = L - this.W4\n  const gT = this.W4 - Φ\n  const u1 = 2 * (l + g - ls - gs)\n  const u2 = l + g1 - lT - gT\n  const u3 = l + 2 * (g - ls - gs)\n  const u4 = lT + gT - g1\n  const u5 = 2 * (ls + gs)\n  const [sl, cl] = base.sincos(l)\n  const [su1, cu1] = base.sincos(u1)\n  const [su2, cu2] = base.sincos(u2)\n  const [su3, cu3] = base.sincos(u3)\n  const [su4, cu4] = base.sincos(u4)\n  const [slu2, clu2] = base.sincos(l + u2)\n  const [sg1gT, cg1gT] = base.sincos(g1 - gT)\n  const [su52g, cu52g] = base.sincos(u5 - 2 * g)\n  const [su5ψ, cu5ψ] = base.sincos(u5 + ψ)\n  const [su2φ, cu2φ] = base.sincos(u2 + φ)\n  const [s5, c5] = base.sincos(l + g1 + lT + gT + φ)\n  const a = 58.935028 + 0.004638 * cu1 + 0.058222 * cu2\n  const e = eʹ - 0.0014097 * cg1gT + 0.0003733 * cu52g +\n    0.000118 * cu3 + 0.0002408 * cl + 0.0002849 * clu2 + 0.000619 * cu4\n  const w = 0.08077 * d * sg1gT + 0.02139 * d * su52g - 0.00676 * d * su3 +\n    0.0138 * d * sl + 0.01632 * d * slu2 + 0.03547 * d * su4\n  const p = ϖ0 + w / eʹ\n  const λʹ = μ - 0.04299 * d * su2 - 0.00789 * d * su1 - 0.06312 * d * Math.sin(ls) -\n    0.00295 * d * Math.sin(2 * ls) - 0.02231 * d * Math.sin(u5) + 0.0065 * d * su5ψ\n  const i = iʹ + 0.04204 * d * cu5ψ + 0.00235 * d * c5 + 0.0036 * d * cu2φ\n  const wʹ = 0.04204 * d * su5ψ + 0.00235 * d * s5 + 0.00358 * d * su2φ\n  const Ω = Ωʹ + wʹ / Math.sin(iʹ)\n  return this.subr(λʹ, p, e, a, Ω, i)\n}\n\nexport default {\n  mimas,\n  enceladus,\n  tethys,\n  dione,\n  rhea,\n  titan,\n  hyperion,\n  iapetus,\n  positions,\n  Qs\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module saturnring\n */\n/**\n * Saturnrings: Chapter 45, The Ring of Saturn\n */\n\nimport base from './base.js'\nimport coord from './coord.js'\nimport nutation from './nutation.js'\nimport planetposition from './planetposition.js'\n\n/**\n * Ring computes quantities of the ring of Saturn.\n *\n *  B  Saturnicentric latitude of the Earth referred to the plane of the ring.\n *  Bʹ  Saturnicentric latitude of the Sun referred to the plane of the ring.\n *  ΔU  Difference between Saturnicentric longitudes of the Sun and the Earth.\n *  P  Geometric position angle of the northern semiminor axis of the ring.\n *  aEdge  Major axis of the out edge of the outer ring.\n *  bEdge  Minor axis of the out edge of the outer ring.\n *\n * All results in radians.\n */\nexport function ring (jde, earth, saturn) { // (jde float64, earth, saturn *pp.V87Planet)  (B, Bʹ, ΔU, P, aEdge, bEdge float64)\n  const [f1, f2] = cl(jde, earth, saturn)\n  const [ΔU, B] = f1()\n  const [Bʹ, P, aEdge, bEdge] = f2()\n  return [B, Bʹ, ΔU, P, aEdge, bEdge]\n}\n\n/**\n * UB computes quantities required by illum.Saturn().\n *\n * Same as ΔU and B returned by Ring().  Results in radians.\n */\nexport function ub (jde, earth, saturn) { // (jde float64, earth, saturn *pp.V87Planet)  (ΔU, B float64)\n  const [f1, f2] = cl(jde, earth, saturn) // eslint-disable-line no-unused-vars\n  return f1()\n}\n\n/**\n * cl splits the work into two closures.\n */\nfunction cl (jde, earth, saturn) { // (jde float64, earth, saturn *pp.V87Planet)  (f1 func() (ΔU, B float64),\n  // f2 func() (Bʹ, P, aEdge, bEdge float64))\n  const p = Math.PI / 180\n  let i, Ω\n  let l0, b0, R\n  let Δ = 9.0\n  let λ, β\n  let si, ci, sβ, cβ, sB\n  let sbʹ, cbʹ, slʹΩ, clʹΩ\n  const f1 = function () { // (ΔU, B float64)\n    // (45.1), p. 318\n    const T = base.J2000Century(jde)\n    i = base.horner(T, 28.075216 * p, -0.012998 * p, 0.000004 * p)\n    Ω = base.horner(T, 169.50847 * p, 1.394681 * p, 0.000412 * p)\n    // Step 2.0\n    const earthPos = earth.position(jde)\n    R = earthPos.range\n    const fk5 = planetposition.toFK5(earthPos.lon, earthPos.lat, jde)\n    l0 = fk5.lon\n    b0 = fk5.lat\n    const [sl0, cl0] = base.sincos(l0)\n    const sb0 = Math.sin(b0)\n    // Steps 3, 4.0\n    let l = 0\n    let b = 0\n    let r = 0\n    let x = 0\n    let y = 0\n    let z = 0\n\n    const f = function () {\n      const τ = base.lightTime(Δ)\n      const saturnPos = saturn.position(jde - τ)\n      r = saturnPos.range\n      const fk5 = planetposition.toFK5(saturnPos.lon, saturnPos.lat, jde)\n      l = fk5.lon\n      b = fk5.lat\n      const [sl, cl] = base.sincos(l)\n      const [sb, cb] = base.sincos(b)\n      x = r * cb * cl - R * cl0\n      y = r * cb * sl - R * sl0\n      z = r * sb - R * sb0\n      Δ = Math.sqrt(x * x + y * y + z * z)\n    }\n    f()\n    f()\n    // Step 5.0\n    λ = Math.atan2(y, x)\n    β = Math.atan(z / Math.hypot(x, y))\n    // First part of step 6.0\n    si = Math.sin(i)\n    ci = Math.cos(i)\n    sβ = Math.sin(β)\n    cβ = Math.cos(β)\n    sB = si * cβ * Math.sin(λ - Ω) - ci * sβ\n    const B = Math.asin(sB) // return value\n    // Step 7.0\n    const N = 113.6655 * p + 0.8771 * p * T\n    const lʹ = l - 0.01759 * p / r\n    const bʹ = b - 0.000764 * p * Math.cos(l - N) / r\n    // Setup for steps 8, 9.0\n    sbʹ = Math.sin(bʹ)\n    cbʹ = Math.cos(bʹ)\n    slʹΩ = Math.sin(lʹ - Ω)\n    clʹΩ = Math.cos(lʹ - Ω)\n    // Step 9.0\n    const [sλΩ, cλΩ] = base.sincos(λ - Ω)\n    const U1 = Math.atan2(si * sbʹ + ci * cbʹ * slʹΩ, cbʹ * clʹΩ)\n    const U2 = Math.atan2(si * sβ + ci * cβ * sλΩ, cβ * cλΩ)\n    const ΔU = Math.abs(U1 - U2) // return value\n    return [ΔU, B]\n  }\n  const f2 = function () { // (Bʹ, P, aEdge, bEdge) {\n    // Remainder of step 6.0\n    const aEdge = 375.35 / 3600 * p / Δ // return value\n    const bEdge = aEdge * Math.abs(sB) // return value\n    // Step 8.0\n    const sBʹ = si * cbʹ * slʹΩ - ci * sbʹ\n    const Bʹ = Math.asin(sBʹ) // return value\n    // Step 10.0\n    const [Δψ, Δε] = nutation.nutation(jde)\n    const ε = nutation.meanObliquity(jde) + Δε\n    // Step 11.0\n    let λ0 = Ω - Math.PI / 2\n    const β0 = Math.PI / 2 - i\n    // Step 12.0\n    const [sl0λ, cl0λ] = base.sincos(l0 - λ)\n    λ += 0.005693 * p * cl0λ / cβ\n    β += 0.005693 * p * sl0λ * sβ\n    // Step 13.0\n    λ0 += Δψ\n    λ += Δψ\n    // Step 14.0\n    let eq = new coord.Ecliptic(λ0, β0).toEquatorial(ε)\n    const [α0, δ0] = [eq.ra, eq.dec]\n    eq = new coord.Ecliptic(λ, β).toEquatorial(ε)\n    const [α, δ] = [eq.ra, eq.dec]\n    // Step 15.0\n    const [sδ0, cδ0] = base.sincos(δ0)\n    const [sδ, cδ] = base.sincos(δ)\n    const [sα0α, cα0α] = base.sincos(α0 - α)\n    const P = Math.atan2(cδ0 * sα0α, sδ0 * cδ - cδ0 * sδ * cα0α) // return value\n    return [Bʹ, P, aEdge, bEdge]\n  }\n  return [f1, f2]\n}\n\nexport default {\n  ring,\n  ub\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module solardisk\n */\n/**\n * Solardisk: Chapter 29, Ephemeris for Physical Observations of the Sun.\n */\n\nimport base from './base.js'\nimport nutation from './nutation.js'\nimport solar from './solar.js'\n\n/**\n * Ephemeris returns the apparent orientation of the sun at the given jd.\n *\n * Results:\n *  P:  Position angle of the solar north pole.\n *  B0: Heliographic latitude of the center of the solar disk.\n *  L0: Heliographic longitude of the center of the solar disk.\n *\n * All results in radians.\n */\nexport function ephemeris (jd, earth) { // (jd float64, e *pp.V87Planet)  (P, B0, L0 float64)\n  const θ = (jd - 2398220) * 2 * Math.PI / 25.38\n  const I = 7.25 * Math.PI / 180\n  const K = 73.6667 * Math.PI / 180 +\n    1.3958333 * Math.PI / 180 * (jd - 2396758) / base.JulianCentury\n\n  const solarPos = solar.trueVSOP87(earth, jd)\n  const L = solarPos.lon\n  const R = solarPos.range\n  const [Δψ, Δε] = nutation.nutation(jd)\n  const ε0 = nutation.meanObliquity(jd)\n  const ε = ε0 + Δε\n  const λ = L - 20.4898 / 3600 * Math.PI / 180 / R\n  const λp = λ + Δψ\n\n  const [sλK, cλK] = base.sincos(λ - K)\n  const [sI, cI] = base.sincos(I)\n\n  const tx = -Math.cos(λp) * Math.tan(ε)\n  const ty = -cλK * Math.tan(I)\n  const P = Math.atan(tx) + Math.atan(ty)\n  const B0 = Math.asin(sλK * sI)\n  const η = Math.atan2(-sλK * cI, -cλK)\n  const L0 = base.pmod(η - θ, 2 * Math.PI)\n  return [P, B0, L0]\n}\n\n/**\n * Cycle returns the jd of the start of the given synodic rotation.\n *\n * Argument c is the \"Carrington\" cycle number.\n *\n * Result is a dynamical time (not UT).\n */\nexport function cycle (c) { // (c int)  (jde float64)\n  const jde = 2398140.227 + 27.2752316 * c\n  const m = 281.96 * Math.PI / 180 + 26.882476 * Math.PI / 180 * c\n  const [s2m, c2m] = base.sincos(2 * m)\n  return jde + 0.1454 * Math.sin(m) - 0.0085 * s2m - 0.0141 * c2m\n}\n\nexport default {\n  ephemeris,\n  cycle\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module solstice\n */\n/**\n * Solstice: Chapter 27: Equinoxes and Solstices.\n */\n\nimport base from './base.js'\nimport solar from './solar.js'\nconst { abs, cos, sin } = Math\nconst D2R = Math.PI / 180\n\n// table 27.a - for years from -1000 to +1000\nconst mc0 = [1721139.29189, 365242.13740, 0.06134, 0.00111, -0.00071]\nconst jc0 = [1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025]\nconst sc0 = [1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074]\nconst dc0 = [1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006]\n\n// table 27.b - for years from +1000 to +3000\nconst mc2 = [2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057]\nconst jc2 = [2451716.56767, 365241.62603, 0.00325, 0.00888, -0.00030]\nconst sc2 = [2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078]\nconst dc2 = [2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032]\n\n// table 27.c\nconst terms = (function () {\n  const term = [\n    [485, 324.96, 1934.136],\n    [203, 337.23, 32964.467],\n    [199, 342.08, 20.186],\n    [182, 27.85, 445267.112],\n    [156, 73.14, 45036.886],\n    [136, 171.52, 22518.443],\n    [77, 222.54, 65928.934],\n    [74, 296.72, 3034.906],\n    [70, 243.58, 9037.513],\n    [58, 119.81, 33718.147],\n    [52, 297.17, 150.678],\n    [50, 21.02, 2281.226],\n    [45, 247.54, 29929.562],\n    [44, 325.15, 31555.956],\n    [29, 60.93, 4443.417],\n    [18, 155.12, 67555.328],\n    [17, 288.79, 4562.452],\n    [16, 198.04, 62894.029],\n    [14, 199.76, 31436.921],\n    [12, 95.39, 14577.848],\n    [12, 287.11, 31931.756],\n    [12, 320.81, 34777.259],\n    [9, 227.73, 1222.114],\n    [8, 15.45, 16859.074]\n  ]\n  return term.map((t) => {\n    return {\n      a: t[0],\n      b: t[1],\n      c: t[2]\n    }\n  })\n})()\n\n/**\n * March returns the JDE of the March equinox for the given year.\n *\n * Results are valid for the years -1000 to +3000.\n *\n * Accuracy is within one minute of time for the years 1951-2050.\n * @param {Number} y - (int) year\n * @returns {Number} JDE\n */\nexport function march (y) {\n  if (y < 1000) {\n    return eq(y, mc0)\n  }\n  return eq(y - 2000, mc2)\n}\n\n/**\n * June returns the JDE of the June solstice for the given year.\n *\n * Results are valid for the years -1000 to +3000.\n *\n * Accuracy is within one minute of time for the years 1951-2050.\n * @param {Number} y - (int) year\n * @returns {Number} JDE\n */\nexport function june (y) {\n  if (y < 1000) {\n    return eq(y, jc0)\n  }\n  return eq(y - 2000, jc2)\n}\n\n/**\n * September returns the JDE of the September equinox for the given year.\n *\n * Results are valid for the years -1000 to +3000.\n *\n * Accuracy is within one minute of time for the years 1951-2050.\n * @param {Number} y - (int) year\n * @returns {Number} JDE\n */\nexport function september (y) {\n  if (y < 1000) {\n    return eq(y, sc0)\n  }\n  return eq(y - 2000, sc2)\n}\n\n/**\n * December returns the JDE of the December solstice for a given year.\n *\n * Results are valid for the years -1000 to +3000.\n *\n * Accuracy is within one minute of time for the years 1951-2050.\n * @param {Number} y - (int) year\n * @returns {Number} JDE\n */\nexport function december (y) {\n  if (y < 1000) {\n    return eq(y, dc0)\n  }\n  return eq(y - 2000, dc2)\n}\n\n/**\n * Fast calculation of solstices/ equinoxes\n * Accuracy is within one minute of time for the years 1951-2050.\n *\n * @param {Number} y - (int) year\n * @param {Array} c - term from table 27.a / 27.b\n * @returns {Number} JDE\n */\nfunction eq (y, c) {\n  const J0 = base.horner(y * 0.001, c)\n  const T = base.J2000Century(J0)\n  const W = 35999.373 * D2R * T - 2.47 * D2R\n  const Δλ = 1 + 0.0334 * cos(W) + 0.0007 * cos(2 * W)\n  let S = 0\n  for (let i = terms.length - 1; i >= 0; i--) {\n    const t = terms[i]\n    S += t.a * cos((t.b + t.c * T) * D2R)\n  }\n  return J0 + 0.00001 * S / Δλ\n}\n\n/**\n * March2 returns a more accurate JDE of the March equinox.\n *\n * Result is accurate to one second of time.\n *\n * @param {Number} year - (int) year\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\n * the package planetposition\n * @returns {Number} JDE\n */\nexport function march2 (year, planet) {\n  return longitude(year, planet, 0)\n}\n\n/**\n * June2 returns a more accurate JDE of the June solstice.\n *\n * Result is accurate to one second of time.\n *\n * @param {Number} year - (int) year\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\n * the package planetposition\n * @returns {Number} JDE\n */\nexport function june2 (year, planet) {\n  return longitude(year, planet, Math.PI / 2)\n}\n\n/**\n * September2 returns a more accurate JDE of the September equinox.\n *\n * Result is accurate to one second of time.\n *\n * @param {Number} year - (int) year\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\n * the package planetposition\n * @returns {Number} JDE\n */\nexport function september2 (year, planet) {\n  return longitude(year, planet, Math.PI)\n}\n\n/**\n * December2 returns a more accurate JDE of the December solstice.\n *\n * Result is accurate to one second of time.\n *\n * @param {Number} year - (int) year\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\n * the package planetposition\n * @returns {Number} JDE\n */\nexport function december2 (year, planet) {\n  return longitude(year, planet, Math.PI * 3 / 2)\n}\n\n/**\n * Longitude returns the JDE for a given `year`, VSOP87 Planet `planet` at a\n * given geocentric solar longitude `lon`\n * @param {Number} year - (int)\n * @param {planetposition.Planet} planet\n * @param {Number} lon - geocentric solar longitude in radians\n * @returns {Number} JDE\n */\nexport function longitude (year, planet, lon) {\n  let c\n  let ct\n\n  if (year < 1000) {\n    ct = [mc0, jc0, sc0, dc0]\n  } else {\n    ct = [mc2, jc2, sc2, dc2]\n    year -= 2000\n  }\n\n  lon = lon % (Math.PI * 2)\n\n  if (lon < Math.PI / 2) {\n    c = ct[0]\n  } else if (lon < Math.PI) {\n    c = ct[1]\n  } else if (lon < Math.PI * 3 / 2) {\n    c = ct[2]\n  } else {\n    c = ct[3]\n  }\n\n  return eq2(year, planet, lon, c)\n}\n\n/**\n  * Accurate calculation of solstices/ equinoxes\n  * Result is accurate to one second of time.\n  *\n  * @param {Number} year - (int) year\n  * @param {planetposition.Planet} planet - vsop87 planet\n  * @param {Number} lon - longitude in radians\n  * @param {Array} c - term from table 27.a / 27.b\n  * @returns {Number} JDE\n  */\nfunction eq2 (year, planet, lon, c) {\n  let J0 = base.horner(year * 0.001, c)\n\n  for (;;) {\n    const a = solar.apparentVSOP87(planet, J0)\n    const c = 58 * sin(lon - a.lon) // (27.1) p. 180\n    J0 += c\n    if (abs(c) < 0.000005) {\n      break\n    }\n  }\n\n  return J0\n}\n\nexport default {\n  march,\n  june,\n  september,\n  december,\n  march2,\n  june2,\n  september2,\n  december2,\n  longitude\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module stellar\n */\n/**\n * Stellar: Chapter 56, Stellar Magnitudes.\n */\n\n/**\n * Sum returns the combined apparent magnitude of two stars.\n */\nexport function sum (m1, m2) { // (m1, m2 float64)  float64\n  const x = 0.4 * (m2 - m1)\n  return m2 - 2.5 * Math.log10(Math.pow(10, x) + 1)\n}\n\n/**\n * SumN returns the combined apparent magnitude of a number of stars.\n */\nexport function sumN (m) { // (m ...float64)  float64\n  let s = 0\n  for (const mi of m) {\n    s += Math.pow(10, -0.4 * mi)\n  }\n  return -2.5 * Math.log10(s)\n}\n\n/**\n * Ratio returns the brightness ratio of two stars.\n *\n * Arguments m1, m2 are apparent magnitudes.\n */\nexport function ratio (m1, m2) { // (m1, m2 float64)  float64\n  const x = 0.4 * (m2 - m1)\n  return Math.pow(10, x)\n}\n\n/**\n * Difference returns the difference in apparent magnitude of two stars\n * given their brightness ratio.\n */\nexport function difference (ratio) { // (ratio float64)  float64\n  return 2.5 * Math.log10(ratio)\n}\n\n/**\n * AbsoluteByParallax returns absolute magnitude given annual parallax.\n *\n * Argument m is apparent magnitude, π is annual parallax in arc seconds.\n */\nexport function absoluteByParallax (m, π) { // (m, π float64)  float64\n  return m + 5 + 5 * Math.log10(π)\n}\n\n/**\n * AbsoluteByDistance returns absolute magnitude given distance.\n *\n * Argument m is apparent magnitude, d is distance in parsecs.\n */\nexport function absoluteByDistance (m, d) { // (m, d float64)  float64\n  return m + 5 - 5 * Math.log10(d)\n}\n\nexport default {\n  sum,\n  sumN,\n  ratio,\n  difference,\n  absoluteByParallax,\n  absoluteByDistance\n}\n", "/**\n * @copyright 2013 Sonia Keys\n * @copyright 2016 commenthol\n * @license MIT\n * @module sundial\n */\n/**\n * Sundial: Chapter 58, Calculation of a Planar Sundial.\n */\n\nimport base from './base.js'\n\n/**\n * Point return type represents a point to be used in constructing the sundial.\n */\nfunction Point (x, y) {\n  this.x = x || 0\n  this.y = y || 0\n}\n\n/**\n * Line holds data to draw an hour line on the sundial.\n */\nfunction Line (hour, points) {\n  this.hour = hour // 0 to 24\n  this.points = points || [] // One or more points corresponding to the hour.\n}\n\nconst m = [-23.44, -20.15, -11.47, 0, 11.47, 20.15, 23.44]\n\n/**\n * General computes data for the general case of a planar sundial.\n *\n * Argument φ is geographic latitude at which the sundial will be located.\n * D is gnomonic declination, the azimuth of the perpendicular to the plane\n * of the sundial, measured from the southern meridian towards the west.\n * Argument a is the length of a straight stylus perpendicular to the plane\n * of the sundial, z is zenithal distance of the direction defined by the\n * stylus.  Angles φ, D, and z are in radians.  Units of stylus length a\n * are arbitrary.\n *\n * Results consist of a set of lines, a center point, u, the length of a\n * polar stylus, and ψ, the angle which the polar stylus makes with the plane\n * of the sundial.  The center point, the points defining the hour lines, and\n * u are in units of a, the stylus length.  ψ is in radians.\n */\nexport function general (φ, D, a, z) { // (φ, D, a, z float64)  (lines []Line, center Point, u, ψ float64)\n  const [sφ, cφ] = base.sincos(φ)\n  const tφ = sφ / cφ\n  const [sD, cD] = base.sincos(D)\n  const [sz, cz] = base.sincos(z)\n  const P = sφ * cz - cφ * sz * cD\n  const lines = []\n  for (let i = 0; i < 24; i++) {\n    const l = new Line(i)\n    const H = (i - 12) * 15 * Math.PI / 180\n    const aH = Math.abs(H)\n    const [sH, cH] = base.sincos(H)\n    for (const d of m) {\n      const tδ = Math.tan(d * Math.PI / 180)\n      const H0 = Math.acos(-tφ * tδ)\n      if (aH > H0) {\n        continue // sun below horizon\n      }\n      const Q = sD * sz * sH + (cφ * cz + sφ * sz * cD) * cH + P * tδ\n      if (Q < 0) {\n        continue // sun below plane of sundial\n      }\n      const Nx = cD * sH - sD * (sφ * cH - cφ * tδ)\n      const Ny = cz * sD * sH - (cφ * sz - sφ * cz * cD) * cH - (sφ * sz + cφ * cz * cD) * tδ\n      l.points.push(new Point(a * Nx / Q, a * Ny / Q))\n    }\n    if (l.points.length > 0) {\n      lines.push(l)\n    }\n  }\n  const center = new Point()\n  center.x = a / P * cφ * sD\n  center.y = -a / P * (sφ * sz + cφ * cz * cD)\n  const aP = Math.abs(P)\n  const u = a / aP\n  const ψ = Math.asin(aP)\n  return {\n    lines,\n    center,\n    length: u,\n    angle: ψ\n  }\n}\n\n/**\n * Equatorial computes data for a sundial level with the equator.\n *\n * Argument φ is geographic latitude at which the sundial will be located;\n * a is the length of a straight stylus perpendicular to the plane of the\n * sundial.\n *\n * The sundial will have two sides, north and south.  Results n and s define\n * lines on the north and south sides of the sundial.  Result coordinates\n * are in units of a, the stylus length.\n */\nexport function equatorial (φ, a) { // (φ, a float64)  (n, s []Line)\n  const tφ = Math.tan(φ)\n  const n = []\n  const s = []\n  for (let i = 0; i < 24; i++) {\n    const nl = new Line(i)\n    const sl = new Line(i)\n    const H = (i - 12) * 15 * Math.PI / 180\n    const aH = Math.abs(H)\n    const [sH, cH] = base.sincos(H)\n    for (const d of m) {\n      const tδ = Math.tan(d * Math.PI / 180)\n      const H0 = Math.acos(-tφ * tδ)\n      if (aH > H0) {\n        continue\n      }\n      const x = -a * sH / tδ\n      const yy = a * cH / tδ\n      if (tδ < 0) {\n        sl.points.push(new Point(x, yy))\n      } else {\n        nl.points.push(new Point(x, -yy))\n      }\n    }\n    if (nl.points.length > 0) {\n      n.push(nl)\n    }\n    if (sl.points.length > 0) {\n      s.push(sl)\n    }\n  }\n  return {\n    north: n,\n    south: s\n  }\n}\n\n/**\n * Horizontal computes data for a horizontal sundial.\n *\n * Argument φ is geographic latitude at which the sundial will be located,\n * a is the length of a straight stylus perpendicular to the plane of the\n * sundial.\n *\n * Results consist of a set of lines, a center point, and u, the length of a\n * polar stylus.  They are in units of a, the stylus length.\n */\nexport function horizontal (φ, a) { // (φ, a float64)  (lines []Line, center Point, u float64)\n  const [sφ, cφ] = base.sincos(φ)\n  const tφ = sφ / cφ\n  const lines = []\n  for (let i = 0; i < 24; i++) {\n    const l = new Line(i)\n    const H = (i - 12) * 15 * Math.PI / 180\n    const aH = Math.abs(H)\n    const [sH, cH] = base.sincos(H)\n    for (const d of m) {\n      const tδ = Math.tan(d * Math.PI / 180)\n      const H0 = Math.acos(-tφ * tδ)\n      if (aH > H0) {\n        continue // sun below horizon\n      }\n      const Q = cφ * cH + sφ * tδ\n      const x = a * sH / Q\n      const y = a * (sφ * cH - cφ * tδ) / Q\n      l.points.push(new Point(x, y))\n    }\n    if (l.points.length > 0) {\n      lines.push(l)\n    }\n  }\n  const center = new Point(0, -a / tφ)\n  const u = a / Math.abs(sφ)\n  return {\n    lines,\n    center,\n    length: u\n  }\n}\n\n/**\n * Vertical computes data for a vertical sundial.\n *\n * Argument φ is geographic latitude at which the sundial will be located.\n * D is gnomonic declination, the azimuth of the perpendicular to the plane\n * of the sundial, measured from the southern meridian towards the west.\n * Argument a is the length of a straight stylus perpendicular to the plane\n * of the sundial.\n *\n * Results consist of a set of lines, a center point, and u, the length of a\n * polar stylus.  They are in units of a, the stylus length.\n */\nexport function vertical (φ, D, a) { // (φ, D, a float64)  (lines []Line, center Point, u float64)\n  const [sφ, cφ] = base.sincos(φ)\n  const tφ = sφ / cφ\n  const [sD, cD] = base.sincos(D)\n  const lines = []\n  for (let i = 0; i < 24; i++) {\n    const l = new Line(i)\n    const H = (i - 12) * 15 * Math.PI / 180\n    const aH = Math.abs(H)\n    const [sH, cH] = base.sincos(H)\n    for (const d of m) {\n      const tδ = Math.tan(d * Math.PI / 180)\n      const H0 = Math.acos(-tφ * tδ)\n      if (aH > H0) {\n        continue // sun below horizon\n      }\n      const Q = sD * sH + sφ * cD * cH - cφ * cD * tδ\n      if (Q < 0) {\n        continue // sun below plane of sundial\n      }\n      const x = a * (cD * sH - sφ * sD * cH + cφ * sD * tδ) / Q\n      const y = -a * (cφ * cH + sφ * tδ) / Q\n      l.points.push(new Point(x, y))\n    }\n    if (l.points.length > 0) {\n      lines.push(l)\n    }\n  }\n  const center = new Point()\n  center.x = -a * sD / cD\n  center.y = a * tφ / cD\n  const u = a / Math.abs(cφ * cD)\n  return {\n    lines,\n    center,\n    length: u\n  }\n}\n\nexport default {\n  general,\n  equatorial,\n  horizontal,\n  vertical\n}\n", "/**\n * @copyright 2016 commenthol\n * @license MIT\n * @module sunrise\n */\n/**\n * Sunrise: Compute rise, noon, set of the Sun for an earth observer\n */\n\n/* eslint key-spacing: 0 */\n\nimport base from './base.js'\nimport eqtime from './eqtime.js'\nimport sexa from './sexagesimal.js'\nimport solar from './solar.js'\nimport julian from './julian.js'\nimport rise from './rise.js'\n\nconst stdh0 = {\n  sunrise:          new sexa.Angle(true, 0, 50, 0).rad(),\n  sunriseEnd:       new sexa.Angle(true, 0, 18, 0).rad(),\n  twilight:         new sexa.Angle(true, 6, 0, 0).rad(),\n  nauticalTwilight: new sexa.Angle(true, 12, 0, 0).rad(),\n  night:            new sexa.Angle(true, 18, 0, 0).rad(),\n  goldenHour:       new sexa.Angle(false, 6, 0, 0).rad()\n}\n\nconst stdh0Sunrise = (refraction) => rise.refraction(stdh0.sunrise, refraction)\nconst stdh0SunriseEnd = (refraction) => rise.refraction(stdh0.sunriseEnd, refraction)\nconst stdh0Twilight = (refraction) => rise.refraction(stdh0.twilight, refraction)\nconst stdh0NauticalTwilight = (refraction) => rise.refraction(stdh0.nauticalTwilight, refraction)\nconst stdh0Night = (refraction) => rise.refraction(stdh0.night, refraction)\nconst stdh0GoldenHour = (refraction) => rise.refraction(stdh0.goldenHour, refraction)\n\nexport class Sunrise {\n  /**\n   * Computes time of sunrise, sunset for a given day `date` of an observer on earth given by latitude and longitude.\n   * Methods may return `undefined` instead of `julian.Calendar` for latitudes very near the poles.\n   * @param {julian.Calendar} date - calendar date\n   * @param {number} lat - latitude of observer in the range of (-89.6, 89.6)\n   * @param {number} lon - longitude of observer (measured positively westwards, New York = 40.7° lat, 74° lon)\n   * @param {number} [refraction] - optional refraction\n   */\n  constructor (date, lat, lon, refraction) {\n    this.date = date\n    this.jde = date.midnight().toJDE()\n    this.lat = sexa.angleFromDeg(lat)\n    this.lon = sexa.angleFromDeg(lon)\n    this.refraction = refraction\n  }\n\n  _calcNoon (jde) {\n    const etime = sexa.secFromHourAngle(eqtime.eSmart(jde))\n    const delta = sexa.secFromHourAngle(this.lon)\n    const time = 43200 /* noon */ + delta - etime // in seconds\n    return base.pmod(time / 86400, 86400)\n  }\n\n  _calcRiseOrSet (jde, h0, isSet) {\n    const etime = sexa.secFromHourAngle(eqtime.eSmart(jde))\n    const solarDec = solar.apparentEquatorial(jde).dec\n    let ha = rise.hourAngle(this.lat, h0, solarDec)\n    if (isSet) ha = -ha\n    const delta = sexa.secFromHourAngle(ha - this.lon)\n    const time = 43200 /* noon */ - delta - etime // in seconds\n    return time / 86400\n  }\n\n  _calcPolarDayNight (h0, isSet, step) {\n    let jde = this.jde\n    let t\n    let failCnt = 0\n    while (failCnt < 190) { // a bit more than days of half a year\n      jde += step\n      try {\n        t = this._calcRiseOrSet(jde, h0, isSet)\n        t = this._calcRiseOrSet(jde + t, h0, isSet)\n        break\n      } catch (e) {\n        t = undefined\n        failCnt++\n      }\n    }\n    if (t === undefined) {\n      return\n    }\n    return new julian.Calendar().fromJDE(jde + t)\n  }\n\n  _calc (h0, isSet) {\n    let t\n    const jde = this.jde\n    // calc 2times for higher accuracy\n    try {\n      t = this._calcRiseOrSet(jde, h0, isSet)\n      t = this._calcRiseOrSet(jde + t, h0, isSet)\n      return new julian.Calendar().fromJDE(jde + t)\n    } catch (e) {\n      let step = (isSet ? -1 : 1)\n      const doy = this.date.dayOfYear()\n      if ( // overlap with march, september equinoxes\n        (this.lat > 0 && (doy > 76 && doy < 267)) || // northern hemisphere\n        (this.lat < 0 && (doy < 83 || doy > 262)) // southern hemisphere\n      ) {\n        step = -step\n      }\n      return this._calcPolarDayNight(h0, isSet, step)\n    }\n  }\n\n  /**\n   * time of solar transit\n   * @return {julian.Calendar} time of noon\n   */\n  noon () {\n    const jde = this.jde\n    // calc 2times for higher accuracy\n    let t = this._calcNoon(jde + this.lon / (2 * Math.PI))\n    t = this._calcNoon(jde + t)\n    return new julian.Calendar().fromJDE(jde + t)\n  }\n\n  /**\n   * Solar limb appears over the easter horizon in the morning\n   * @return {julian.Calendar} time of sunrise\n   */\n  rise () {\n    return this._calc(stdh0Sunrise(this.refraction), false)\n  }\n\n  /**\n   * @return {julian.Calendar} time of sunset\n   * Solar limb disappears on the western horizon in the evening\n   */\n  set () {\n    return this._calc(stdh0Sunrise(this.refraction), true)\n  }\n\n  /**\n   * Solar limb is fully visible at the easter horizon\n   * @return {julian.Calendar} time of sunrise end\n   */\n  riseEnd () {\n    return this._calc(stdh0SunriseEnd(this.refraction), false)\n  }\n\n  /**\n   * Solar limb starts disappearing on the western horizon in the evening\n   * @return {julian.Calendar} time of sunset start\n   */\n  setStart () {\n    return this._calc(stdh0SunriseEnd(this.refraction), true)\n  }\n\n  /**\n   * Dawn, there is still enough light for objects to be distinguishable,\n   * @return {julian.Calendar} time of dawn\n   */\n  dawn () {\n    return this._calc(stdh0Twilight(this.refraction), false)\n  }\n\n  /**\n   * Dusk, there is still enough light for objects to be distinguishable\n   * Bright stars and planets are visible by naked eye\n   * @return {julian.Calendar} time of dusk\n   */\n  dusk () {\n    return this._calc(stdh0Twilight(this.refraction), true)\n  }\n\n  /**\n   * nautical dawn - Horizon gets visible by naked eye\n   * @return {julian.Calendar} time of nautical dawn\n   */\n  nauticalDawn () {\n    return this._calc(stdh0NauticalTwilight(this.refraction), false)\n  }\n\n  /**\n   * nautical dusk - Horizon is no longer visible by naked eye\n   * @return {julian.Calendar} time of nautical dusk\n   */\n  nauticalDusk () {\n    return this._calc(stdh0NauticalTwilight(this.refraction), true)\n  }\n\n  /**\n   * night starts - No sunlight illumination of the sky, such no intereferance\n   * with astronomical observations.\n   * @return {julian.Calendar} time of start of night\n   */\n  nightStart () {\n    return this._calc(stdh0Night(this.refraction), true)\n  }\n\n  /**\n   * night end - Sunlight starts illumination of the sky and interferes\n   * with astronomical observations.\n   * @return {julian.Calendar} time of end of night\n   */\n  nightEnd () {\n    return this._calc(stdh0Night(this.refraction), false)\n  }\n\n  /**\n   * Start of \"golden hour\" before sunset\n   * @return {julian.Calendar} time of start of golden hour\n   */\n  goldenHourStart () {\n    return this._calc(stdh0GoldenHour(this.refraction), true)\n  }\n\n  /**\n   * End of \"golden hour\" after sunrise\n   * @return {julian.Calendar} time of end of golden hour\n   */\n  goldenHourEnd () {\n    return this._calc(stdh0GoldenHour(this.refraction), false)\n  }\n}\n\nexport default {\n  Sunrise\n}\n"],
  "mappings": "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AI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,GAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,GAAG,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,IAAI,OAAO,OAAO,IAAI,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,IAAI,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,OAAO,MAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,MAAM;AAAA,IAC9yH,OAAO;AAAA,IACP,MAAM;AAAA,EACR;AAAA,EACA,MAAM;AAAA,IACJ,OAAO,CAAC,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,WAAW,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,UAAU,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,UAAU,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,WAAW,YAAY,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,WAAW,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,UAAU,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,UAAU,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,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",
  "names": ["c", "n0", "sum", "last", "k", "c2", "c", "K", "u", "v", "up", "vp", "p", "d", "m", "s", "angle", "round", "modf", "radius", "s", "c", "c2", "d", "Coord", "g", "s", "c", "L", "p", "inc", "node", "m", "C", "p", "Lp", "m", "C", "e", "s", "cos", "tan", "nutation", "e", "aberration", "position", "sin", "cos", "k", "parallax", "s", "atan2", "cos", "sqrt", "tan", "meanAnomaly", "position", "e", "C", "d", "c2", "hav", "c", "first", "last", "d", "deltat_default", "d", "e", "radius", "m", "d", "position", "earth", "s", "ζt", "zt", "θt", "xyz", "position", "earth", "τ", "pos", "L", "Elements", "inc", "node", "C", "c", "jde", "e", "s", "p", "m", "m2", "sin", "cos", "ck", "D2R", "mean", "snap", "k", "m", "c", "k", "c2", "ck", "p", "snap", "e", "sum", "L", "position", "cos", "sin", "tan", "earth", "eq", "e", "linear", "p", "d", "S", "c", "toDeg", "D2R", "s", "L", "int", "m", "s", "ms", "d", "LeapYearGregorian", "deltat_default", "c", "e", "k", "int", "C", "S", "m", "d", "K", "J", "A", "C2", "earth", "jupiter", "d", "p", "l0", "pos", "fk5", "sb", "cb", "sl", "cl", "C", "J", "K", "mercury", "venus", "mars", "jupiter", "saturn", "uranus", "neptune", "Elements", "inc", "node", "mean", "p", "e", "c", "d", "p", "J", "K", "c2", "r", "earth", "jupiter", "s", "R", "lon", "lat", "range", "cl", "L", "B", "C", "sI", "cI", "c", "d2", "C", "m", "c2", "m2", "Elements", "g", "d", "s", "s", "physical", "earth", "mars", "p", "l0", "fk5", "cl", "eq", "s", "d", "k", "asin", "sin", "D2R", "EARTH_RADIUS", "distance", "d", "m", "position", "e", "e2", "ta", "tb", "node", "perigee", "sin", "cos", "asin", "atan2", "D2R", "physical", "earth", "m", "Moon", "l0", "D2R", "pa", "phaseAngle3", "m", "nc", "ck", "c", "k", "m", "node", "k", "p", "ck", "Elements", "s", "mean", "s", "c", "C", "s", "S", "c", "mercury", "venus", "earth", "mars", "jupiter", "saturn", "uranus", "neptune", "perihelion", "p", "k", "c", "i", "perihelion2", "setImmediate", "d", "mean", "k", "J", "sum", "c", "saa", "el", "e", "J", "S", "earth", "jde", "cl", "c", "k", "sin", "tan", "D2R", "acos", "asin", "cos", "sin", "D2R", "refraction", "m", "p", "ut", "α", "th0", "H", "earth", "deltat_default", "XY", "d", "positions", "earth", "saturn", "s", "cl", "C", "c", "k", "L", "p", "e", "e2", "e5", "g", "earth", "saturn", "p", "l0", "fk5", "cl", "eq", "earth", "K", "L", "sI", "cI", "c", "m", "abs", "cos", "sin", "D2R", "c", "S", "sum", "m2", "m", "s", "ratio", "d", "m", "d", "s", "horizontal", "stdh0", "refraction", "time", "e"]
}
