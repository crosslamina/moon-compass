import { EclipticCoordinatesAtJulianDayFunction, EquatorialCoordinatesAtJulianDayWithObliquityFunction, EquatorialCoordinatesAtJulianDayFunction, JulianDayForJulianDayFunction, QuantityAtJulianDayFunction, QuantityInArcSecondAtJulianDayFunction, QuantityInAstronomicalUnitAtJulianDayFunction, QuantityInDegreeAtJulianDayFunction, QuantityInDegreeAtJulianDayWithEquinoxFunction, QuantityInKilometerPerSecondAtJulianDayFunction, QuantityInMagnitudeAtJulianDayFunction, RiseTransitSetTimesAtJulianDayAndGeographicCoordinatesFunction, SingleCoordinateDegreeAtJulianDayFunction } from './funcs';
import { Albedo, ArcSecond, AstronomicalUnit, Day, Degree, GramPerCubicCentimeter, JulianDay, Kilogram24, Kilometer, KilometerPerSecond, Magnitude, MeterPerSquareSecond, Year } from './units';
import { Equinox } from './earth';

export type PlanetConstants = {
    equatorialRadius: Kilometer;
    meanRadius: Kilometer;
    mass: Kilogram24;
    bulkDensity: GramPerCubicCentimeter;
    siderealRotationPeriod: Day;
    siderealOrbitPeriod: Year;
    visualMagnitude: Magnitude;
    geometricAlbedo: Albedo;
    equatorialGravity: MeterPerSquareSecond;
    escapeVelocity: KilometerPerSecond;
};
export interface PlanetBase {
    getEclipticLongitude: SingleCoordinateDegreeAtJulianDayFunction;
    getEclipticLatitude: SingleCoordinateDegreeAtJulianDayFunction;
    getRadiusVector: QuantityInAstronomicalUnitAtJulianDayFunction;
    getEclipticCoordinates: EclipticCoordinatesAtJulianDayFunction;
    getEquatorialCoordinates: EquatorialCoordinatesAtJulianDayWithObliquityFunction;
    getGeocentricDistance: QuantityInAstronomicalUnitAtJulianDayFunction;
    getGeocentricEclipticCoordinates: EclipticCoordinatesAtJulianDayFunction;
    getApparentGeocentricEclipticCoordinates: EclipticCoordinatesAtJulianDayFunction;
    getGeocentricEquatorialCoordinates: EquatorialCoordinatesAtJulianDayWithObliquityFunction;
    getApparentGeocentricEquatorialCoordinates: EquatorialCoordinatesAtJulianDayFunction;
    getRiseTransitSet: RiseTransitSetTimesAtJulianDayAndGeographicCoordinatesFunction;
    getAccurateRiseTransitSet: RiseTransitSetTimesAtJulianDayAndGeographicCoordinatesFunction;
    getPhaseAngle: JulianDayForJulianDayFunction;
    getIlluminatedFraction: QuantityAtJulianDayFunction;
    getMagnitude: QuantityInMagnitudeAtJulianDayFunction;
    getEquatorialSemiDiameter: QuantityInArcSecondAtJulianDayFunction;
    getPolarSemiDiameter: QuantityInArcSecondAtJulianDayFunction;
    constants: PlanetConstants;
}
export interface DwarfPlanet extends PlanetBase {
}
export interface Planet extends PlanetBase {
    getInstantaneousVelocity: QuantityInKilometerPerSecondAtJulianDayFunction;
    getVelocityAtPerihelion: QuantityInKilometerPerSecondAtJulianDayFunction;
    getVelocityAtAphelion: QuantityInKilometerPerSecondAtJulianDayFunction;
    getLengthOfEllipse: QuantityInAstronomicalUnitAtJulianDayFunction;
    getMeanLongitude: QuantityInDegreeAtJulianDayWithEquinoxFunction;
    getEccentricity: QuantityAtJulianDayFunction;
    getInclination: QuantityInDegreeAtJulianDayFunction;
    getLongitudeOfAscendingNode: QuantityInDegreeAtJulianDayFunction;
    getLongitudeOfPerihelion: QuantityInDegreeAtJulianDayFunction;
    getAphelion: JulianDayForJulianDayFunction;
    getPerihelion: JulianDayForJulianDayFunction;
    orbitalElements: PlanetOrbitalElements;
}
export interface MarsPlanet extends Planet {
    getPlanetocentricDeclinationOfTheSun: QuantityInDegreeAtJulianDayFunction;
    getPlanetocentricDeclinationOfTheEarth: QuantityInDegreeAtJulianDayFunction;
}
export type SaturnicentricCoordinates = {
    longitude: Degree;
    latitude: Degree;
};
export interface SaturnRingSystem {
    majorAxis: ArcSecond;
    minorAxis: ArcSecond;
    northPolePositionAngle: Degree;
    saturnicentricSunEarthLongitudesDifference: Degree;
    earthCoordinates: SaturnicentricCoordinates;
    sunCoordinates: SaturnicentricCoordinates;
}
export type SaturnRingSystemFunction = (jd: JulianDay) => SaturnRingSystem;
export interface SaturnPlanet extends Planet {
    getRingSystemDetails: SaturnRingSystemFunction;
}
export interface JupiterPlanet extends Planet {
    getCentralMeridianLongitudes: Function;
    getPlanetocentricDeclinationOfTheSun: QuantityInDegreeAtJulianDayFunction;
    getPlanetocentricDeclinationOfTheEarth: QuantityInDegreeAtJulianDayFunction;
}
export type LengthArray<T, N extends number, R extends T[] = []> = number extends N ? T[] : R['length'] extends N ? R : LengthArray<T, N, [T, ...R]>;
export type PlanetOrbitalElements = {
    semiMajorAxis: LengthArray<AstronomicalUnit, 4>;
    eccentricity: LengthArray<number, 4>;
    [Equinox.MeanOfTheDate]: {
        meanLongitude: LengthArray<Degree, 4>;
        inclination: LengthArray<Degree, 4>;
        longitudeOfAscendingNode: LengthArray<Degree, 4>;
        longitudeOfPerihelion: LengthArray<Degree, 4>;
    };
    [Equinox.StandardJ2000]: {
        meanLongitude: LengthArray<Degree, 4>;
        inclination: LengthArray<Degree, 4>;
        longitudeOfAscendingNode: LengthArray<Degree, 4>;
        longitudeOfPerihelion: LengthArray<Degree, 4>;
    };
};
export type PlanetName = 'Mercury' | 'Venus' | 'Mars' | 'Jupiter' | 'Saturn' | 'Uranus' | 'Neptune';
export type AllPlanetName = 'Mercury' | 'Venus' | 'Mars' | 'Jupiter' | 'Saturn' | 'Uranus' | 'Neptune' | 'Pluto';
export type SolarSystemName = 'Sun' | 'Mercury' | 'Venus' | 'Earth' | 'Mars' | 'Jupiter' | 'Saturn' | 'Uranus' | 'Neptune' | 'Pluto';
export type PlanetCoefficient = {
    A: number;
    B: number;
    C: number;
};
//# sourceMappingURL=planets.d.ts.map