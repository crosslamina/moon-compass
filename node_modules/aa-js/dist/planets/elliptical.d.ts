import { AstronomicalUnit, EclipticCoordinates, JulianDay, KilometerPerSecond, QuantityInAstronomicalUnitAtJulianDayFunction, SingleCoordinateDegreeAtJulianDayFunction } from '../types';

export type EllipticalDistance = {
    x: number;
    y: number;
    z: number;
    Delta: number;
    tau: number;
    l: number;
    b: number;
    r: number;
};
export declare function getPlanetDistanceDetailsFromEarth(jd: JulianDay, eclipticLongitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, eclipticLatitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, radiusVectorFunc: QuantityInAstronomicalUnitAtJulianDayFunction): EllipticalDistance;
export declare function getPlanetGeocentricDistance(jd: JulianDay, eclipticLongitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, eclipticLatitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, radiusVectorFunc: QuantityInAstronomicalUnitAtJulianDayFunction): AstronomicalUnit;
export declare function getPlanetGeocentricEclipticCoordinates(jd: JulianDay, eclipticLongitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, eclipticLatitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, radiusVectorFunc: QuantityInAstronomicalUnitAtJulianDayFunction): EclipticCoordinates;
export declare function getPlanetApparentGeocentricEclipticCoordinates(jd: JulianDay, eclipticLongitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, eclipticLatitudeFunc: SingleCoordinateDegreeAtJulianDayFunction, radiusVectorFunc: QuantityInAstronomicalUnitAtJulianDayFunction): EclipticCoordinates;
export declare function getPlanetInstantaneousVelocity(r: AstronomicalUnit, a: AstronomicalUnit): KilometerPerSecond;
export declare function getPlanetVelocityAtPerihelion(e: number, a: AstronomicalUnit): KilometerPerSecond;
export declare function getPlanetVelocityAtAphelion(e: number, a: AstronomicalUnit): KilometerPerSecond;
export declare function getPlanetLengthOfEllipse(e: number, a: AstronomicalUnit): AstronomicalUnit;
//# sourceMappingURL=elliptical.d.ts.map